!(function (e, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? t(exports)
    : 'function' == typeof define && define.amd
    ? define(['exports'], t)
    : t(
        (((e =
          'undefined' != typeof globalThis
            ? globalThis
            : e || self).Designable = e.Designable || {}),
        (e.Designable.SettingsForm = {}))
      )
})(this, function (e) {
  'use strict'
  function t(e, t, r) {
    return (
      t in e
        ? Object.defineProperty(e, t, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0,
          })
        : (e[t] = r),
      e
    )
  }
  function r(e, t) {
    var r = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e)
      t &&
        (n = n.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable
        })),
        r.push.apply(r, n)
    }
    return r
  }
  function n(e) {
    for (var n = 1; n < arguments.length; n++) {
      var i = null != arguments[n] ? arguments[n] : {}
      n % 2
        ? r(Object(i), !0).forEach(function (r) {
            t(e, r, i[r])
          })
        : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(i))
        : r(Object(i)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(i, t))
          })
    }
    return e
  }
  function i(e, t) {
    if (null == e) return {}
    var r,
      n,
      i = (function (e, t) {
        if (null == e) return {}
        var r,
          n,
          i = {},
          a = Object.keys(e)
        for (n = 0; n < a.length; n++)
          (r = a[n]), t.indexOf(r) >= 0 || (i[r] = e[r])
        return i
      })(e, t)
    if (Object.getOwnPropertySymbols) {
      var a = Object.getOwnPropertySymbols(e)
      for (n = 0; n < a.length; n++)
        (r = a[n]),
          t.indexOf(r) >= 0 ||
            (Object.prototype.propertyIsEnumerable.call(e, r) && (i[r] = e[r]))
    }
    return i
  }
  function a(e, t) {
    ;(null == t || t > e.length) && (t = e.length)
    for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r]
    return n
  }
  function s(e, t, r) {
    return (
      t in e
        ? Object.defineProperty(e, t, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0,
          })
        : (e[t] = r),
      e
    )
  }
  function o(e, t) {
    var r = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e)
      t &&
        (n = n.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable
        })),
        r.push.apply(r, n)
    }
    return r
  }
  function l(e) {
    for (var t = 1; t < arguments.length; t++) {
      var r = null != arguments[t] ? arguments[t] : {}
      t % 2
        ? o(Object(r), !0).forEach(function (t) {
            s(e, t, r[t])
          })
        : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
        : o(Object(r)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t))
          })
    }
    return e
  }
  function c() {
    for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
      t[r] = arguments[r]
    return function (e) {
      return t.reduceRight(function (e, t) {
        return t(e)
      }, e)
    }
  }
  function u(e) {
    return function t() {
      for (
        var r = this, n = arguments.length, i = new Array(n), a = 0;
        a < n;
        a++
      )
        i[a] = arguments[a]
      return i.length >= e.length
        ? e.apply(this, i)
        : function () {
            for (var e = arguments.length, n = new Array(e), a = 0; a < e; a++)
              n[a] = arguments[a]
            return t.apply(r, [].concat(i, n))
          }
    }
  }
  function p(e) {
    return {}.toString.call(e).includes('Object')
  }
  function h(e) {
    return 'function' == typeof e
  }
  Designable.Core.GlobalRegistry.registerDesignerLocales(
    {
      'zh-CN': {
        SettingComponents: {
          ValueInput: { expression: '表达式' },
          MonacoInput: { helpDocument: '帮助文档' },
        },
      },
    },
    {
      'en-US': {
        SettingComponents: {
          ValueInput: { expression: 'Expression' },
          MonacoInput: { helpDocument: 'Help Documents' },
        },
      },
    },
    {
      'ko-KR': {
        SettingComponents: {
          ValueInput: { expression: '표현식' },
          MonacoInput: { helpDocument: '도움말 문서' },
        },
      },
    }
  )
  var d = u(function (e, t) {
      throw new Error(e[t] || e.default)
    })({
      initialIsRequired: 'initial state is required',
      initialType: 'initial state should be an object',
      initialContent: "initial state shouldn't be an empty object",
      handlerType: 'handler should be an object or a function',
      handlersType: 'all handlers should be a functions',
      selectorType: 'selector should be a function',
      changeType: 'provided value of changes should be an object',
      changeField:
        'it seams you want to change a field in the state which is not specified in the "initial" state',
      default: 'an unknown error accured in `state-local` package',
    }),
    f = {
      changes: function (e, t) {
        return (
          p(t) || d('changeType'),
          Object.keys(t).some(function (t) {
            return !(function (e, t) {
              return Object.prototype.hasOwnProperty.call(e, t)
            })(e, t)
          }) && d('changeField'),
          t
        )
      },
      selector: function (e) {
        h(e) || d('selectorType')
      },
      handler: function (e) {
        h(e) || p(e) || d('handlerType'),
          p(e) &&
            Object.values(e).some(function (e) {
              return !h(e)
            }) &&
            d('handlersType')
      },
      initial: function (e) {
        var t
        e || d('initialIsRequired'),
          p(e) || d('initialType'),
          (t = e),
          Object.keys(t).length || d('initialContent')
      },
    }
  function m(e, t) {
    return h(t) ? t(e.current) : t
  }
  function y(e, t) {
    return (e.current = l(l({}, e.current), t)), t
  }
  function g(e, t, r) {
    return (
      h(t)
        ? t(e.current)
        : Object.keys(r).forEach(function (r) {
            var n
            return null === (n = t[r]) || void 0 === n
              ? void 0
              : n.call(t, e.current[r])
          }),
      r
    )
  }
  var b = {
    create: function (e) {
      var t =
        arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
      f.initial(e), f.handler(t)
      var r = { current: e },
        n = u(g)(r, t),
        i = u(y)(r),
        a = u(f.changes)(e),
        s = u(m)(r)
      function o() {
        var e =
          arguments.length > 0 && void 0 !== arguments[0]
            ? arguments[0]
            : function (e) {
                return e
              }
        return f.selector(e), e(r.current)
      }
      function l(e) {
        c(n, i, a, s)(e)
      }
      return [o, l]
    },
  }
  var v,
    x = {
      configIsRequired: 'the configuration object is required',
      configType: 'the configuration object should be an object',
      default: 'an unknown error accured in `@monaco-editor/loader` package',
      deprecation:
        "Deprecation warning!\n    You are using deprecated way of configuration.\n\n    Instead of using\n      monaco.config({ urls: { monacoBase: '...' } })\n    use\n      monaco.config({ paths: { vs: '...' } })\n\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\n  ",
    },
    w = ((v = function (e, t) {
      throw new Error(e[t] || e.default)
    }),
    function e() {
      for (
        var t = this, r = arguments.length, n = new Array(r), i = 0;
        i < r;
        i++
      )
        n[i] = arguments[i]
      return n.length >= v.length
        ? v.apply(this, n)
        : function () {
            for (var r = arguments.length, i = new Array(r), a = 0; a < r; a++)
              i[a] = arguments[a]
            return e.apply(t, [].concat(n, i))
          }
    })(x),
    E = {
      config: function (e) {
        return (
          e || w('configIsRequired'),
          (function (e) {
            return {}.toString.call(e).includes('Object')
          })(e) || w('configType'),
          e.urls
            ? (console.warn(x.deprecation),
              { paths: { vs: e.urls.monacoBase } })
            : e
        )
      },
    }
  function P(e, t) {
    return (
      Object.keys(t).forEach(function (r) {
        t[r] instanceof Object && e[r] && Object.assign(t[r], P(e[r], t[r]))
      }),
      n(n({}, e), t)
    )
  }
  var S = { type: 'cancelation', msg: 'operation is manually canceled' }
  function T(e) {
    var t = !1,
      r = new Promise(function (r, n) {
        e.then(function (e) {
          return t ? n(S) : r(e)
        }),
          e.catch(n)
      })
    return (
      (r.cancel = function () {
        return (t = !0)
      }),
      r
    )
  }
  var C,
    A,
    R = b.create({
      config: {
        paths: {
          vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs',
        },
      },
      isInitialized: !1,
      resolve: null,
      reject: null,
      monaco: null,
    }),
    k =
      ((A = 2),
      (function (e) {
        if (Array.isArray(e)) return e
      })((C = R)) ||
        (function (e, t) {
          if ('undefined' != typeof Symbol && Symbol.iterator in Object(e)) {
            var r = [],
              n = !0,
              i = !1,
              a = void 0
            try {
              for (
                var s, o = e[Symbol.iterator]();
                !(n = (s = o.next()).done) &&
                (r.push(s.value), !t || r.length !== t);
                n = !0
              );
            } catch (e) {
              ;(i = !0), (a = e)
            } finally {
              try {
                n || null == o.return || o.return()
              } finally {
                if (i) throw a
              }
            }
            return r
          }
        })(C, A) ||
        (function (e, t) {
          if (e) {
            if ('string' == typeof e) return a(e, t)
            var r = Object.prototype.toString.call(e).slice(8, -1)
            return (
              'Object' === r && e.constructor && (r = e.constructor.name),
              'Map' === r || 'Set' === r
                ? Array.from(e)
                : 'Arguments' === r ||
                  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                ? a(e, t)
                : void 0
            )
          }
        })(C, A) ||
        (function () {
          throw new TypeError(
            'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
          )
        })()),
    N = k[0],
    O = k[1]
  function I(e) {
    return document.body.appendChild(e)
  }
  function F(e) {
    var t,
      r,
      n = N(function (e) {
        return { config: e.config, reject: e.reject }
      }),
      i =
        ((t = ''.concat(n.config.paths.vs, '/loader.js')),
        (r = document.createElement('script')),
        t && (r.src = t),
        r)
    return (
      (i.onload = function () {
        return e()
      }),
      (i.onerror = n.reject),
      i
    )
  }
  function j() {
    var e = N(function (e) {
        return { config: e.config, resolve: e.resolve, reject: e.reject }
      }),
      t = window.require
    t.config(e.config),
      t(
        ['vs/editor/editor.main'],
        function (t) {
          _(t), e.resolve(t)
        },
        function (t) {
          e.reject(t)
        }
      )
  }
  function _(e) {
    N().monaco || O({ monaco: e })
  }
  var M = new Promise(function (e, t) {
      return O({ resolve: e, reject: t })
    }),
    D = {
      config: function (e) {
        var t = E.config(e),
          r = t.monaco,
          n = i(t, ['monaco'])
        O(function (e) {
          return { config: P(e.config, n), monaco: r }
        })
      },
      init: function () {
        var e = N(function (e) {
          return {
            monaco: e.monaco,
            isInitialized: e.isInitialized,
            resolve: e.resolve,
          }
        })
        if (!e.isInitialized) {
          if ((O({ isInitialized: !0 }), e.monaco))
            return e.resolve(e.monaco), T(M)
          if (window.monaco && window.monaco.editor)
            return _(window.monaco), e.resolve(window.monaco), T(M)
          !(function () {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
              t[r] = arguments[r]
            return function (e) {
              return t.reduceRight(function (e, t) {
                return t(e)
              }, e)
            }
          })(
            I,
            F
          )(j)
        }
        return T(M)
      },
      __getMonacoInstance: function () {
        return N(function (e) {
          return e.monaco
        })
      },
    },
    L = { cdn: '//cdn.jsdelivr.net/npm' },
    B = function () {
      return String(L.cdn).replace(/\/$/, '')
    },
    z =
      'undefined' != typeof globalThis
        ? globalThis
        : 'undefined' != typeof window
        ? window
        : 'undefined' != typeof global
        ? global
        : 'undefined' != typeof self
        ? self
        : {}
  function U(e) {
    return e &&
      e.__esModule &&
      Object.prototype.hasOwnProperty.call(e, 'default')
      ? e.default
      : e
  }
  function W(e) {
    var t = { exports: {} }
    return e(t, t.exports), t.exports
  }
  var H = 'object' == typeof z && z && z.Object === Object && z,
    V = 'object' == typeof self && self && self.Object === Object && self,
    $ = H || V || Function('return this')(),
    q = $.Symbol,
    K = Object.prototype,
    G = K.hasOwnProperty,
    X = K.toString,
    Y = q ? q.toStringTag : void 0
  var J = function (e) {
      var t = G.call(e, Y),
        r = e[Y]
      try {
        e[Y] = void 0
        var n = !0
      } catch (e) {}
      var i = X.call(e)
      return n && (t ? (e[Y] = r) : delete e[Y]), i
    },
    Q = Object.prototype.toString
  var Z = function (e) {
      return Q.call(e)
    },
    ee = q ? q.toStringTag : void 0
  var te = function (e) {
      return null == e
        ? void 0 === e
          ? '[object Undefined]'
          : '[object Null]'
        : ee && ee in Object(e)
        ? J(e)
        : Z(e)
    },
    re = Array.isArray
  var ne = function (e) {
    return null != e && 'object' == typeof e
  }
  var ie = function (e) {
    return (
      'string' == typeof e || (!re(e) && ne(e) && '[object String]' == te(e))
    )
  }
  var ae = function (e) {
      return function (t, r, n) {
        for (var i = -1, a = Object(t), s = n(t), o = s.length; o--; ) {
          var l = s[e ? o : ++i]
          if (!1 === r(a[l], l, a)) break
        }
        return t
      }
    },
    se = ae()
  var oe = function (e, t) {
    for (var r = -1, n = Array(e); ++r < e; ) n[r] = t(r)
    return n
  }
  var le = function (e) {
      return ne(e) && '[object Arguments]' == te(e)
    },
    ce = Object.prototype,
    ue = ce.hasOwnProperty,
    pe = ce.propertyIsEnumerable,
    he = le(
      (function () {
        return arguments
      })()
    )
      ? le
      : function (e) {
          return ne(e) && ue.call(e, 'callee') && !pe.call(e, 'callee')
        },
    de = he
  var fe = function () {
      return !1
    },
    me = W(function (e, t) {
      var r = t && !t.nodeType && t,
        n = r && e && !e.nodeType && e,
        i = n && n.exports === r ? $.Buffer : void 0,
        a = (i ? i.isBuffer : void 0) || fe
      e.exports = a
    }),
    ye = /^(?:0|[1-9]\d*)$/
  var ge = function (e, t) {
    var r = typeof e
    return (
      !!(t = null == t ? 9007199254740991 : t) &&
      ('number' == r || ('symbol' != r && ye.test(e))) &&
      e > -1 &&
      e % 1 == 0 &&
      e < t
    )
  }
  var be = function (e) {
      return (
        'number' == typeof e && e > -1 && e % 1 == 0 && e <= 9007199254740991
      )
    },
    ve = {}
  ;(ve['[object Float32Array]'] =
    ve['[object Float64Array]'] =
    ve['[object Int8Array]'] =
    ve['[object Int16Array]'] =
    ve['[object Int32Array]'] =
    ve['[object Uint8Array]'] =
    ve['[object Uint8ClampedArray]'] =
    ve['[object Uint16Array]'] =
    ve['[object Uint32Array]'] =
      !0),
    (ve['[object Arguments]'] =
      ve['[object Array]'] =
      ve['[object ArrayBuffer]'] =
      ve['[object Boolean]'] =
      ve['[object DataView]'] =
      ve['[object Date]'] =
      ve['[object Error]'] =
      ve['[object Function]'] =
      ve['[object Map]'] =
      ve['[object Number]'] =
      ve['[object Object]'] =
      ve['[object RegExp]'] =
      ve['[object Set]'] =
      ve['[object String]'] =
      ve['[object WeakMap]'] =
        !1)
  var xe = function (e) {
    return ne(e) && be(e.length) && !!ve[te(e)]
  }
  var we = function (e) {
      return function (t) {
        return e(t)
      }
    },
    Ee = W(function (e, t) {
      var r = t && !t.nodeType && t,
        n = r && e && !e.nodeType && e,
        i = n && n.exports === r && H.process,
        a = (function () {
          try {
            var e = n && n.require && n.require('util').types
            return e || (i && i.binding && i.binding('util'))
          } catch (e) {}
        })()
      e.exports = a
    }),
    Pe = Ee && Ee.isTypedArray,
    Se = Pe ? we(Pe) : xe,
    Te = Object.prototype.hasOwnProperty
  var Ce = function (e, t) {
      var r = re(e),
        n = !r && de(e),
        i = !r && !n && me(e),
        a = !r && !n && !i && Se(e),
        s = r || n || i || a,
        o = s ? oe(e.length, String) : [],
        l = o.length
      for (var c in e)
        (!t && !Te.call(e, c)) ||
          (s &&
            ('length' == c ||
              (i && ('offset' == c || 'parent' == c)) ||
              (a &&
                ('buffer' == c || 'byteLength' == c || 'byteOffset' == c)) ||
              ge(c, l))) ||
          o.push(c)
      return o
    },
    Ae = Object.prototype
  var Re = function (e) {
    var t = e && e.constructor
    return e === (('function' == typeof t && t.prototype) || Ae)
  }
  var ke = function (e, t) {
      return function (r) {
        return e(t(r))
      }
    },
    Ne = ke(Object.keys, Object),
    Oe = Object.prototype.hasOwnProperty
  var Ie = function (e) {
    if (!Re(e)) return Ne(e)
    var t = []
    for (var r in Object(e)) Oe.call(e, r) && 'constructor' != r && t.push(r)
    return t
  }
  var Fe = function (e) {
    var t = typeof e
    return null != e && ('object' == t || 'function' == t)
  }
  var je = function (e) {
    if (!Fe(e)) return !1
    var t = te(e)
    return (
      '[object Function]' == t ||
      '[object GeneratorFunction]' == t ||
      '[object AsyncFunction]' == t ||
      '[object Proxy]' == t
    )
  }
  var _e = function (e) {
    return null != e && be(e.length) && !je(e)
  }
  var Me = function (e) {
    return _e(e) ? Ce(e) : Ie(e)
  }
  var De = function (e, t) {
    return e && se(e, t, Me)
  }
  var Le = function (e) {
    return e
  }
  var Be = function (e) {
    return 'function' == typeof e ? e : Le
  }
  var ze = function (e, t) {
      return e && De(e, Be(t))
    },
    Ue = ke(Object.getPrototypeOf, Object),
    We = Function.prototype,
    He = Object.prototype,
    Ve = We.toString,
    $e = He.hasOwnProperty,
    qe = Ve.call(Object)
  var Ke = function (e) {
    if (!ne(e) || '[object Object]' != te(e)) return !1
    var t = Ue(e)
    if (null === t) return !0
    var r = $e.call(t, 'constructor') && t.constructor
    return 'function' == typeof r && r instanceof r && Ve.call(r) == qe
  }
  var Ge = function (e, t) {
    for (var r = -1, n = null == e ? 0 : e.length, i = Array(n); ++r < n; )
      i[r] = t(e[r], r, e)
    return i
  }
  var Xe = function () {
    ;(this.__data__ = []), (this.size = 0)
  }
  var Ye = function (e, t) {
    return e === t || (e != e && t != t)
  }
  var Je = function (e, t) {
      for (var r = e.length; r--; ) if (Ye(e[r][0], t)) return r
      return -1
    },
    Qe = Array.prototype.splice
  var Ze = function (e) {
    var t = this.__data__,
      r = Je(t, e)
    return (
      !(r < 0) &&
      (r == t.length - 1 ? t.pop() : Qe.call(t, r, 1), --this.size, !0)
    )
  }
  var et = function (e) {
    var t = this.__data__,
      r = Je(t, e)
    return r < 0 ? void 0 : t[r][1]
  }
  var tt = function (e) {
    return Je(this.__data__, e) > -1
  }
  var rt = function (e, t) {
    var r = this.__data__,
      n = Je(r, e)
    return n < 0 ? (++this.size, r.push([e, t])) : (r[n][1] = t), this
  }
  function nt(e) {
    var t = -1,
      r = null == e ? 0 : e.length
    for (this.clear(); ++t < r; ) {
      var n = e[t]
      this.set(n[0], n[1])
    }
  }
  ;(nt.prototype.clear = Xe),
    (nt.prototype.delete = Ze),
    (nt.prototype.get = et),
    (nt.prototype.has = tt),
    (nt.prototype.set = rt)
  var it = nt
  var at = function () {
    ;(this.__data__ = new it()), (this.size = 0)
  }
  var st = function (e) {
    var t = this.__data__,
      r = t.delete(e)
    return (this.size = t.size), r
  }
  var ot = function (e) {
    return this.__data__.get(e)
  }
  var lt,
    ct = function (e) {
      return this.__data__.has(e)
    },
    ut = $['__core-js_shared__'],
    pt = (lt = /[^.]+$/.exec((ut && ut.keys && ut.keys.IE_PROTO) || ''))
      ? 'Symbol(src)_1.' + lt
      : ''
  var ht = function (e) {
      return !!pt && pt in e
    },
    dt = Function.prototype.toString
  var ft = function (e) {
      if (null != e) {
        try {
          return dt.call(e)
        } catch (e) {}
        try {
          return e + ''
        } catch (e) {}
      }
      return ''
    },
    mt = /^\[object .+?Constructor\]$/,
    yt = Function.prototype,
    gt = Object.prototype,
    bt = yt.toString,
    vt = gt.hasOwnProperty,
    xt = RegExp(
      '^' +
        bt
          .call(vt)
          .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
          .replace(
            /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
            '$1.*?'
          ) +
        '$'
    )
  var wt = function (e) {
    return !(!Fe(e) || ht(e)) && (je(e) ? xt : mt).test(ft(e))
  }
  var Et = function (e, t) {
    return null == e ? void 0 : e[t]
  }
  var Pt = function (e, t) {
      var r = Et(e, t)
      return wt(r) ? r : void 0
    },
    St = Pt($, 'Map'),
    Tt = Pt(Object, 'create')
  var Ct = function () {
    ;(this.__data__ = Tt ? Tt(null) : {}), (this.size = 0)
  }
  var At = function (e) {
      var t = this.has(e) && delete this.__data__[e]
      return (this.size -= t ? 1 : 0), t
    },
    Rt = Object.prototype.hasOwnProperty
  var kt = function (e) {
      var t = this.__data__
      if (Tt) {
        var r = t[e]
        return '__lodash_hash_undefined__' === r ? void 0 : r
      }
      return Rt.call(t, e) ? t[e] : void 0
    },
    Nt = Object.prototype.hasOwnProperty
  var Ot = function (e) {
    var t = this.__data__
    return Tt ? void 0 !== t[e] : Nt.call(t, e)
  }
  var It = function (e, t) {
    var r = this.__data__
    return (
      (this.size += this.has(e) ? 0 : 1),
      (r[e] = Tt && void 0 === t ? '__lodash_hash_undefined__' : t),
      this
    )
  }
  function Ft(e) {
    var t = -1,
      r = null == e ? 0 : e.length
    for (this.clear(); ++t < r; ) {
      var n = e[t]
      this.set(n[0], n[1])
    }
  }
  ;(Ft.prototype.clear = Ct),
    (Ft.prototype.delete = At),
    (Ft.prototype.get = kt),
    (Ft.prototype.has = Ot),
    (Ft.prototype.set = It)
  var jt = Ft
  var _t = function () {
    ;(this.size = 0),
      (this.__data__ = {
        hash: new jt(),
        map: new (St || it)(),
        string: new jt(),
      })
  }
  var Mt = function (e) {
    var t = typeof e
    return 'string' == t || 'number' == t || 'symbol' == t || 'boolean' == t
      ? '__proto__' !== e
      : null === e
  }
  var Dt = function (e, t) {
    var r = e.__data__
    return Mt(t) ? r['string' == typeof t ? 'string' : 'hash'] : r.map
  }
  var Lt = function (e) {
    var t = Dt(this, e).delete(e)
    return (this.size -= t ? 1 : 0), t
  }
  var Bt = function (e) {
    return Dt(this, e).get(e)
  }
  var zt = function (e) {
    return Dt(this, e).has(e)
  }
  var Ut = function (e, t) {
    var r = Dt(this, e),
      n = r.size
    return r.set(e, t), (this.size += r.size == n ? 0 : 1), this
  }
  function Wt(e) {
    var t = -1,
      r = null == e ? 0 : e.length
    for (this.clear(); ++t < r; ) {
      var n = e[t]
      this.set(n[0], n[1])
    }
  }
  ;(Wt.prototype.clear = _t),
    (Wt.prototype.delete = Lt),
    (Wt.prototype.get = Bt),
    (Wt.prototype.has = zt),
    (Wt.prototype.set = Ut)
  var Ht = Wt
  var Vt = function (e, t) {
    var r = this.__data__
    if (r instanceof it) {
      var n = r.__data__
      if (!St || n.length < 199)
        return n.push([e, t]), (this.size = ++r.size), this
      r = this.__data__ = new Ht(n)
    }
    return r.set(e, t), (this.size = r.size), this
  }
  function $t(e) {
    var t = (this.__data__ = new it(e))
    this.size = t.size
  }
  ;($t.prototype.clear = at),
    ($t.prototype.delete = st),
    ($t.prototype.get = ot),
    ($t.prototype.has = ct),
    ($t.prototype.set = Vt)
  var qt = $t
  var Kt = function (e) {
    return this.__data__.set(e, '__lodash_hash_undefined__'), this
  }
  var Gt = function (e) {
    return this.__data__.has(e)
  }
  function Xt(e) {
    var t = -1,
      r = null == e ? 0 : e.length
    for (this.__data__ = new Ht(); ++t < r; ) this.add(e[t])
  }
  ;(Xt.prototype.add = Xt.prototype.push = Kt), (Xt.prototype.has = Gt)
  var Yt = Xt
  var Jt = function (e, t) {
    for (var r = -1, n = null == e ? 0 : e.length; ++r < n; )
      if (t(e[r], r, e)) return !0
    return !1
  }
  var Qt = function (e, t) {
    return e.has(t)
  }
  var Zt = function (e, t, r, n, i, a) {
      var s = 1 & r,
        o = e.length,
        l = t.length
      if (o != l && !(s && l > o)) return !1
      var c = a.get(e),
        u = a.get(t)
      if (c && u) return c == t && u == e
      var p = -1,
        h = !0,
        d = 2 & r ? new Yt() : void 0
      for (a.set(e, t), a.set(t, e); ++p < o; ) {
        var f = e[p],
          m = t[p]
        if (n) var y = s ? n(m, f, p, t, e, a) : n(f, m, p, e, t, a)
        if (void 0 !== y) {
          if (y) continue
          h = !1
          break
        }
        if (d) {
          if (
            !Jt(t, function (e, t) {
              if (!Qt(d, t) && (f === e || i(f, e, r, n, a))) return d.push(t)
            })
          ) {
            h = !1
            break
          }
        } else if (f !== m && !i(f, m, r, n, a)) {
          h = !1
          break
        }
      }
      return a.delete(e), a.delete(t), h
    },
    er = $.Uint8Array
  var tr = function (e) {
    var t = -1,
      r = Array(e.size)
    return (
      e.forEach(function (e, n) {
        r[++t] = [n, e]
      }),
      r
    )
  }
  var rr = function (e) {
      var t = -1,
        r = Array(e.size)
      return (
        e.forEach(function (e) {
          r[++t] = e
        }),
        r
      )
    },
    nr = q ? q.prototype : void 0,
    ir = nr ? nr.valueOf : void 0
  var ar = function (e, t, r, n, i, a, s) {
    switch (r) {
      case '[object DataView]':
        if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset)
          return !1
        ;(e = e.buffer), (t = t.buffer)
      case '[object ArrayBuffer]':
        return !(e.byteLength != t.byteLength || !a(new er(e), new er(t)))
      case '[object Boolean]':
      case '[object Date]':
      case '[object Number]':
        return Ye(+e, +t)
      case '[object Error]':
        return e.name == t.name && e.message == t.message
      case '[object RegExp]':
      case '[object String]':
        return e == t + ''
      case '[object Map]':
        var o = tr
      case '[object Set]':
        var l = 1 & n
        if ((o || (o = rr), e.size != t.size && !l)) return !1
        var c = s.get(e)
        if (c) return c == t
        ;(n |= 2), s.set(e, t)
        var u = Zt(o(e), o(t), n, i, a, s)
        return s.delete(e), u
      case '[object Symbol]':
        if (ir) return ir.call(e) == ir.call(t)
    }
    return !1
  }
  var sr = function (e, t) {
    for (var r = -1, n = t.length, i = e.length; ++r < n; ) e[i + r] = t[r]
    return e
  }
  var or = function (e, t, r) {
    var n = t(e)
    return re(e) ? n : sr(n, r(e))
  }
  var lr = function (e, t) {
    for (var r = -1, n = null == e ? 0 : e.length, i = 0, a = []; ++r < n; ) {
      var s = e[r]
      t(s, r, e) && (a[i++] = s)
    }
    return a
  }
  var cr = function () {
      return []
    },
    ur = Object.prototype.propertyIsEnumerable,
    pr = Object.getOwnPropertySymbols,
    hr = pr
      ? function (e) {
          return null == e
            ? []
            : ((e = Object(e)),
              lr(pr(e), function (t) {
                return ur.call(e, t)
              }))
        }
      : cr
  var dr = function (e) {
      return or(e, Me, hr)
    },
    fr = Object.prototype.hasOwnProperty
  var mr = function (e, t, r, n, i, a) {
      var s = 1 & r,
        o = dr(e),
        l = o.length
      if (l != dr(t).length && !s) return !1
      for (var c = l; c--; ) {
        var u = o[c]
        if (!(s ? u in t : fr.call(t, u))) return !1
      }
      var p = a.get(e),
        h = a.get(t)
      if (p && h) return p == t && h == e
      var d = !0
      a.set(e, t), a.set(t, e)
      for (var f = s; ++c < l; ) {
        var m = e[(u = o[c])],
          y = t[u]
        if (n) var g = s ? n(y, m, u, t, e, a) : n(m, y, u, e, t, a)
        if (!(void 0 === g ? m === y || i(m, y, r, n, a) : g)) {
          d = !1
          break
        }
        f || (f = 'constructor' == u)
      }
      if (d && !f) {
        var b = e.constructor,
          v = t.constructor
        b == v ||
          !('constructor' in e) ||
          !('constructor' in t) ||
          ('function' == typeof b &&
            b instanceof b &&
            'function' == typeof v &&
            v instanceof v) ||
          (d = !1)
      }
      return a.delete(e), a.delete(t), d
    },
    yr = Pt($, 'DataView'),
    gr = Pt($, 'Promise'),
    br = Pt($, 'Set'),
    vr = Pt($, 'WeakMap'),
    xr = '[object Map]',
    wr = '[object Promise]',
    Er = '[object Set]',
    Pr = '[object WeakMap]',
    Sr = '[object DataView]',
    Tr = ft(yr),
    Cr = ft(St),
    Ar = ft(gr),
    Rr = ft(br),
    kr = ft(vr),
    Nr = te
  ;((yr && Nr(new yr(new ArrayBuffer(1))) != Sr) ||
    (St && Nr(new St()) != xr) ||
    (gr && Nr(gr.resolve()) != wr) ||
    (br && Nr(new br()) != Er) ||
    (vr && Nr(new vr()) != Pr)) &&
    (Nr = function (e) {
      var t = te(e),
        r = '[object Object]' == t ? e.constructor : void 0,
        n = r ? ft(r) : ''
      if (n)
        switch (n) {
          case Tr:
            return Sr
          case Cr:
            return xr
          case Ar:
            return wr
          case Rr:
            return Er
          case kr:
            return Pr
        }
      return t
    })
  var Or = Nr,
    Ir = '[object Arguments]',
    Fr = '[object Array]',
    jr = '[object Object]',
    _r = Object.prototype.hasOwnProperty
  var Mr = function (e, t, r, n, i, a) {
    var s = re(e),
      o = re(t),
      l = s ? Fr : Or(e),
      c = o ? Fr : Or(t),
      u = (l = l == Ir ? jr : l) == jr,
      p = (c = c == Ir ? jr : c) == jr,
      h = l == c
    if (h && me(e)) {
      if (!me(t)) return !1
      ;(s = !0), (u = !1)
    }
    if (h && !u)
      return (
        a || (a = new qt()),
        s || Se(e) ? Zt(e, t, r, n, i, a) : ar(e, t, l, r, n, i, a)
      )
    if (!(1 & r)) {
      var d = u && _r.call(e, '__wrapped__'),
        f = p && _r.call(t, '__wrapped__')
      if (d || f) {
        var m = d ? e.value() : e,
          y = f ? t.value() : t
        return a || (a = new qt()), i(m, y, r, n, a)
      }
    }
    return !!h && (a || (a = new qt()), mr(e, t, r, n, i, a))
  }
  var Dr = function e(t, r, n, i, a) {
    return (
      t === r ||
      (null == t || null == r || (!ne(t) && !ne(r))
        ? t != t && r != r
        : Mr(t, r, n, i, e, a))
    )
  }
  var Lr = function (e, t, r, n) {
    var i = r.length,
      a = i,
      s = !n
    if (null == e) return !a
    for (e = Object(e); i--; ) {
      var o = r[i]
      if (s && o[2] ? o[1] !== e[o[0]] : !(o[0] in e)) return !1
    }
    for (; ++i < a; ) {
      var l = (o = r[i])[0],
        c = e[l],
        u = o[1]
      if (s && o[2]) {
        if (void 0 === c && !(l in e)) return !1
      } else {
        var p = new qt()
        if (n) var h = n(c, u, l, e, t, p)
        if (!(void 0 === h ? Dr(u, c, 3, n, p) : h)) return !1
      }
    }
    return !0
  }
  var Br = function (e) {
    return e == e && !Fe(e)
  }
  var zr = function (e) {
    for (var t = Me(e), r = t.length; r--; ) {
      var n = t[r],
        i = e[n]
      t[r] = [n, i, Br(i)]
    }
    return t
  }
  var Ur = function (e, t) {
    return function (r) {
      return null != r && r[e] === t && (void 0 !== t || e in Object(r))
    }
  }
  var Wr = function (e) {
    var t = zr(e)
    return 1 == t.length && t[0][2]
      ? Ur(t[0][0], t[0][1])
      : function (r) {
          return r === e || Lr(r, e, t)
        }
  }
  var Hr = function (e) {
      return 'symbol' == typeof e || (ne(e) && '[object Symbol]' == te(e))
    },
    Vr = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    $r = /^\w*$/
  var qr = function (e, t) {
    if (re(e)) return !1
    var r = typeof e
    return (
      !(
        'number' != r &&
        'symbol' != r &&
        'boolean' != r &&
        null != e &&
        !Hr(e)
      ) ||
      $r.test(e) ||
      !Vr.test(e) ||
      (null != t && e in Object(t))
    )
  }
  function Kr(e, t) {
    if ('function' != typeof e || (null != t && 'function' != typeof t))
      throw new TypeError('Expected a function')
    var r = function () {
      var n = arguments,
        i = t ? t.apply(this, n) : n[0],
        a = r.cache
      if (a.has(i)) return a.get(i)
      var s = e.apply(this, n)
      return (r.cache = a.set(i, s) || a), s
    }
    return (r.cache = new (Kr.Cache || Ht)()), r
  }
  Kr.Cache = Ht
  var Gr = Kr
  var Xr = function (e) {
      var t = Gr(e, function (e) {
          return 500 === r.size && r.clear(), e
        }),
        r = t.cache
      return t
    },
    Yr =
      /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
    Jr = /\\(\\)?/g,
    Qr = Xr(function (e) {
      var t = []
      return (
        46 === e.charCodeAt(0) && t.push(''),
        e.replace(Yr, function (e, r, n, i) {
          t.push(n ? i.replace(Jr, '$1') : r || e)
        }),
        t
      )
    }),
    Zr = q ? q.prototype : void 0,
    en = Zr ? Zr.toString : void 0
  var tn = function e(t) {
    if ('string' == typeof t) return t
    if (re(t)) return Ge(t, e) + ''
    if (Hr(t)) return en ? en.call(t) : ''
    var r = t + ''
    return '0' == r && 1 / t == -Infinity ? '-0' : r
  }
  var rn = function (e) {
    return null == e ? '' : tn(e)
  }
  var nn = function (e, t) {
    return re(e) ? e : qr(e, t) ? [e] : Qr(rn(e))
  }
  var an = function (e) {
    if ('string' == typeof e || Hr(e)) return e
    var t = e + ''
    return '0' == t && 1 / e == -Infinity ? '-0' : t
  }
  var sn = function (e, t) {
    for (var r = 0, n = (t = nn(t, e)).length; null != e && r < n; )
      e = e[an(t[r++])]
    return r && r == n ? e : void 0
  }
  var on = function (e, t, r) {
    var n = null == e ? void 0 : sn(e, t)
    return void 0 === n ? r : n
  }
  var ln = function (e, t) {
    return null != e && t in Object(e)
  }
  var cn = function (e, t, r) {
    for (var n = -1, i = (t = nn(t, e)).length, a = !1; ++n < i; ) {
      var s = an(t[n])
      if (!(a = null != e && r(e, s))) break
      e = e[s]
    }
    return a || ++n != i
      ? a
      : !!(i = null == e ? 0 : e.length) &&
          be(i) &&
          ge(s, i) &&
          (re(e) || de(e))
  }
  var un = function (e, t) {
    return null != e && cn(e, t, ln)
  }
  var pn = function (e, t) {
    return qr(e) && Br(t)
      ? Ur(an(e), t)
      : function (r) {
          var n = on(r, e)
          return void 0 === n && n === t ? un(r, e) : Dr(t, n, 3)
        }
  }
  var hn = function (e) {
    return function (t) {
      return null == t ? void 0 : t[e]
    }
  }
  var dn = function (e) {
    return function (t) {
      return sn(t, e)
    }
  }
  var fn = function (e) {
    return qr(e) ? hn(an(e)) : dn(e)
  }
  var mn = function (e) {
    return 'function' == typeof e
      ? e
      : null == e
      ? Le
      : 'object' == typeof e
      ? re(e)
        ? pn(e[0], e[1])
        : Wr(e)
      : fn(e)
  }
  var yn = function (e, t) {
      return function (r, n) {
        if (null == r) return r
        if (!_e(r)) return e(r, n)
        for (
          var i = r.length, a = t ? i : -1, s = Object(r);
          (t ? a-- : ++a < i) && !1 !== n(s[a], a, s);

        );
        return r
      }
    },
    gn = yn(De)
  var bn = function (e, t) {
    var r = -1,
      n = _e(e) ? Array(e.length) : []
    return (
      gn(e, function (e, i, a) {
        n[++r] = t(e, i, a)
      }),
      n
    )
  }
  var vn = function (e, t) {
      return (re(e) ? Ge : bn)(e, mn(t))
    },
    xn = W(function (e, t) {
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.flattenNames = void 0)
      var r = s(ie),
        n = s(ze),
        i = s(Ke),
        a = s(vn)
      function s(e) {
        return e && e.__esModule ? e : { default: e }
      }
      var o = (t.flattenNames = function e() {
        var t =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
          s = []
        return (
          (0, a.default)(t, function (t) {
            Array.isArray(t)
              ? e(t).map(function (e) {
                  return s.push(e)
                })
              : (0, i.default)(t)
              ? (0, n.default)(t, function (e, t) {
                  !0 === e && s.push(t), s.push(t + '-' + e)
                })
              : (0, r.default)(t) && s.push(t)
          }),
          s
        )
      })
      t.default = o
    })
  var wn = function (e, t) {
      for (
        var r = -1, n = null == e ? 0 : e.length;
        ++r < n && !1 !== t(e[r], r, e);

      );
      return e
    },
    En = (function () {
      try {
        var e = Pt(Object, 'defineProperty')
        return e({}, '', {}), e
      } catch (e) {}
    })(),
    Pn = En
  var Sn = function (e, t, r) {
      '__proto__' == t && Pn
        ? Pn(e, t, { configurable: !0, enumerable: !0, value: r, writable: !0 })
        : (e[t] = r)
    },
    Tn = Object.prototype.hasOwnProperty
  var Cn = function (e, t, r) {
    var n = e[t]
    ;(Tn.call(e, t) && Ye(n, r) && (void 0 !== r || t in e)) || Sn(e, t, r)
  }
  var An = function (e, t, r, n) {
    var i = !r
    r || (r = {})
    for (var a = -1, s = t.length; ++a < s; ) {
      var o = t[a],
        l = n ? n(r[o], e[o], o, r, e) : void 0
      void 0 === l && (l = e[o]), i ? Sn(r, o, l) : Cn(r, o, l)
    }
    return r
  }
  var Rn = function (e, t) {
    return e && An(t, Me(t), e)
  }
  var kn = function (e) {
      var t = []
      if (null != e) for (var r in Object(e)) t.push(r)
      return t
    },
    Nn = Object.prototype.hasOwnProperty
  var On = function (e) {
    if (!Fe(e)) return kn(e)
    var t = Re(e),
      r = []
    for (var n in e) ('constructor' != n || (!t && Nn.call(e, n))) && r.push(n)
    return r
  }
  var In = function (e) {
    return _e(e) ? Ce(e, !0) : On(e)
  }
  var Fn = function (e, t) {
      return e && An(t, In(t), e)
    },
    jn = W(function (e, t) {
      var r = t && !t.nodeType && t,
        n = r && e && !e.nodeType && e,
        i = n && n.exports === r ? $.Buffer : void 0,
        a = i ? i.allocUnsafe : void 0
      e.exports = function (e, t) {
        if (t) return e.slice()
        var r = e.length,
          n = a ? a(r) : new e.constructor(r)
        return e.copy(n), n
      }
    })
  var _n = function (e, t) {
    var r = -1,
      n = e.length
    for (t || (t = Array(n)); ++r < n; ) t[r] = e[r]
    return t
  }
  var Mn = function (e, t) {
      return An(e, hr(e), t)
    },
    Dn = Object.getOwnPropertySymbols
      ? function (e) {
          for (var t = []; e; ) sr(t, hr(e)), (e = Ue(e))
          return t
        }
      : cr
  var Ln = function (e, t) {
    return An(e, Dn(e), t)
  }
  var Bn = function (e) {
      return or(e, In, Dn)
    },
    zn = Object.prototype.hasOwnProperty
  var Un = function (e) {
    var t = e.length,
      r = new e.constructor(t)
    return (
      t &&
        'string' == typeof e[0] &&
        zn.call(e, 'index') &&
        ((r.index = e.index), (r.input = e.input)),
      r
    )
  }
  var Wn = function (e) {
    var t = new e.constructor(e.byteLength)
    return new er(t).set(new er(e)), t
  }
  var Hn = function (e, t) {
      var r = t ? Wn(e.buffer) : e.buffer
      return new e.constructor(r, e.byteOffset, e.byteLength)
    },
    Vn = /\w*$/
  var $n = function (e) {
      var t = new e.constructor(e.source, Vn.exec(e))
      return (t.lastIndex = e.lastIndex), t
    },
    qn = q ? q.prototype : void 0,
    Kn = qn ? qn.valueOf : void 0
  var Gn = function (e) {
    return Kn ? Object(Kn.call(e)) : {}
  }
  var Xn = function (e, t) {
    var r = t ? Wn(e.buffer) : e.buffer
    return new e.constructor(r, e.byteOffset, e.length)
  }
  var Yn = function (e, t, r) {
      var n = e.constructor
      switch (t) {
        case '[object ArrayBuffer]':
          return Wn(e)
        case '[object Boolean]':
        case '[object Date]':
          return new n(+e)
        case '[object DataView]':
          return Hn(e, r)
        case '[object Float32Array]':
        case '[object Float64Array]':
        case '[object Int8Array]':
        case '[object Int16Array]':
        case '[object Int32Array]':
        case '[object Uint8Array]':
        case '[object Uint8ClampedArray]':
        case '[object Uint16Array]':
        case '[object Uint32Array]':
          return Xn(e, r)
        case '[object Map]':
        case '[object Set]':
          return new n()
        case '[object Number]':
        case '[object String]':
          return new n(e)
        case '[object RegExp]':
          return $n(e)
        case '[object Symbol]':
          return Gn(e)
      }
    },
    Jn = Object.create,
    Qn = (function () {
      function e() {}
      return function (t) {
        if (!Fe(t)) return {}
        if (Jn) return Jn(t)
        e.prototype = t
        var r = new e()
        return (e.prototype = void 0), r
      }
    })()
  var Zn = function (e) {
    return 'function' != typeof e.constructor || Re(e) ? {} : Qn(Ue(e))
  }
  var ei = function (e) {
      return ne(e) && '[object Map]' == Or(e)
    },
    ti = Ee && Ee.isMap,
    ri = ti ? we(ti) : ei
  var ni = function (e) {
      return ne(e) && '[object Set]' == Or(e)
    },
    ii = Ee && Ee.isSet,
    ai = ii ? we(ii) : ni,
    si = '[object Arguments]',
    oi = '[object Function]',
    li = '[object Object]',
    ci = {}
  ;(ci[si] =
    ci['[object Array]'] =
    ci['[object ArrayBuffer]'] =
    ci['[object DataView]'] =
    ci['[object Boolean]'] =
    ci['[object Date]'] =
    ci['[object Float32Array]'] =
    ci['[object Float64Array]'] =
    ci['[object Int8Array]'] =
    ci['[object Int16Array]'] =
    ci['[object Int32Array]'] =
    ci['[object Map]'] =
    ci['[object Number]'] =
    ci[li] =
    ci['[object RegExp]'] =
    ci['[object Set]'] =
    ci['[object String]'] =
    ci['[object Symbol]'] =
    ci['[object Uint8Array]'] =
    ci['[object Uint8ClampedArray]'] =
    ci['[object Uint16Array]'] =
    ci['[object Uint32Array]'] =
      !0),
    (ci['[object Error]'] = ci[oi] = ci['[object WeakMap]'] = !1)
  var ui = function e(t, r, n, i, a, s) {
    var o,
      l = 1 & r,
      c = 2 & r,
      u = 4 & r
    if ((n && (o = a ? n(t, i, a, s) : n(t)), void 0 !== o)) return o
    if (!Fe(t)) return t
    var p = re(t)
    if (p) {
      if (((o = Un(t)), !l)) return _n(t, o)
    } else {
      var h = Or(t),
        d = h == oi || '[object GeneratorFunction]' == h
      if (me(t)) return jn(t, l)
      if (h == li || h == si || (d && !a)) {
        if (((o = c || d ? {} : Zn(t)), !l))
          return c ? Ln(t, Fn(o, t)) : Mn(t, Rn(o, t))
      } else {
        if (!ci[h]) return a ? t : {}
        o = Yn(t, h, l)
      }
    }
    s || (s = new qt())
    var f = s.get(t)
    if (f) return f
    s.set(t, o),
      ai(t)
        ? t.forEach(function (i) {
            o.add(e(i, r, n, i, t, s))
          })
        : ri(t) &&
          t.forEach(function (i, a) {
            o.set(a, e(i, r, n, a, t, s))
          })
    var m = p ? void 0 : (u ? (c ? Bn : dr) : c ? In : Me)(t)
    return (
      wn(m || t, function (i, a) {
        m && (i = t[(a = i)]), Cn(o, a, e(i, r, n, a, t, s))
      }),
      o
    )
  }
  var pi = function (e) {
      return ui(e, 5)
    },
    hi = W(function (e, t) {
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.mergeClasses = void 0)
      var r = a(ze),
        n = a(pi),
        i =
          Object.assign ||
          function (e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = arguments[t]
              for (var n in r)
                Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
            }
            return e
          }
      function a(e) {
        return e && e.__esModule ? e : { default: e }
      }
      var s = (t.mergeClasses = function (e) {
        var t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
          a = (e.default && (0, n.default)(e.default)) || {}
        return (
          t.map(function (t) {
            var n = e[t]
            return (
              n &&
                (0, r.default)(n, function (e, t) {
                  a[t] || (a[t] = {}), (a[t] = i({}, a[t], n[t]))
                }),
              t
            )
          }),
          a
        )
      })
      t.default = s
    }),
    di = W(function (e, t) {
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.autoprefix = void 0)
      var r,
        n = (r = ze) && r.__esModule ? r : { default: r },
        i =
          Object.assign ||
          function (e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = arguments[t]
              for (var n in r)
                Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
            }
            return e
          }
      var a = {
          borderRadius: function (e) {
            return {
              msBorderRadius: e,
              MozBorderRadius: e,
              OBorderRadius: e,
              WebkitBorderRadius: e,
              borderRadius: e,
            }
          },
          boxShadow: function (e) {
            return {
              msBoxShadow: e,
              MozBoxShadow: e,
              OBoxShadow: e,
              WebkitBoxShadow: e,
              boxShadow: e,
            }
          },
          userSelect: function (e) {
            return {
              WebkitTouchCallout: e,
              KhtmlUserSelect: e,
              MozUserSelect: e,
              msUserSelect: e,
              WebkitUserSelect: e,
              userSelect: e,
            }
          },
          flex: function (e) {
            return {
              WebkitBoxFlex: e,
              MozBoxFlex: e,
              WebkitFlex: e,
              msFlex: e,
              flex: e,
            }
          },
          flexBasis: function (e) {
            return { WebkitFlexBasis: e, flexBasis: e }
          },
          justifyContent: function (e) {
            return { WebkitJustifyContent: e, justifyContent: e }
          },
          transition: function (e) {
            return {
              msTransition: e,
              MozTransition: e,
              OTransition: e,
              WebkitTransition: e,
              transition: e,
            }
          },
          transform: function (e) {
            return {
              msTransform: e,
              MozTransform: e,
              OTransform: e,
              WebkitTransform: e,
              transform: e,
            }
          },
          absolute: function (e) {
            var t = e && e.split(' ')
            return {
              position: 'absolute',
              top: t && t[0],
              right: t && t[1],
              bottom: t && t[2],
              left: t && t[3],
            }
          },
          extend: function (e, t) {
            var r = t[e]
            return r || { extend: e }
          },
        },
        s = (t.autoprefix = function (e) {
          var t = {}
          return (
            (0, n.default)(e, function (e, r) {
              var s = {}
              ;(0, n.default)(e, function (e, t) {
                var r = a[t]
                r ? (s = i({}, s, r(e))) : (s[t] = e)
              }),
                (t[r] = s)
            }),
            t
          )
        })
      t.default = s
    }),
    fi = Object.getOwnPropertySymbols,
    mi = Object.prototype.hasOwnProperty,
    yi = Object.prototype.propertyIsEnumerable
  function gi(e) {
    if (null == e)
      throw new TypeError(
        'Object.assign cannot be called with null or undefined'
      )
    return Object(e)
  }
  var bi = (function () {
      try {
        if (!Object.assign) return !1
        var e = new String('abc')
        if (((e[5] = 'de'), '5' === Object.getOwnPropertyNames(e)[0])) return !1
        for (var t = {}, r = 0; r < 10; r++) t['_' + String.fromCharCode(r)] = r
        var n = Object.getOwnPropertyNames(t).map(function (e) {
          return t[e]
        })
        if ('0123456789' !== n.join('')) return !1
        var i = {}
        return (
          'abcdefghijklmnopqrst'.split('').forEach(function (e) {
            i[e] = e
          }),
          'abcdefghijklmnopqrst' === Object.keys(Object.assign({}, i)).join('')
        )
      } catch (e) {
        return !1
      }
    })()
      ? Object.assign
      : function (e, t) {
          for (var r, n, i = gi(e), a = 1; a < arguments.length; a++) {
            for (var s in (r = Object(arguments[a])))
              mi.call(r, s) && (i[s] = r[s])
            if (fi) {
              n = fi(r)
              for (var o = 0; o < n.length; o++)
                yi.call(r, n[o]) && (i[n[o]] = r[n[o]])
            }
          }
          return i
        },
    vi = W(function (e, t) {
      var r = 60103,
        n = 60106
      ;(t.Fragment = 60107), (t.StrictMode = 60108), (t.Profiler = 60114)
      var i = 60109,
        a = 60110,
        s = 60112
      t.Suspense = 60113
      var o = 60115,
        l = 60116
      if ('function' == typeof Symbol && Symbol.for) {
        var c = Symbol.for
        ;(r = c('react.element')),
          (n = c('react.portal')),
          (t.Fragment = c('react.fragment')),
          (t.StrictMode = c('react.strict_mode')),
          (t.Profiler = c('react.profiler')),
          (i = c('react.provider')),
          (a = c('react.context')),
          (s = c('react.forward_ref')),
          (t.Suspense = c('react.suspense')),
          (o = c('react.memo')),
          (l = c('react.lazy'))
      }
      var u = 'function' == typeof Symbol && Symbol.iterator
      function p(e) {
        for (
          var t = 'https://reactjs.org/docs/error-decoder.html?invariant=' + e,
            r = 1;
          r < arguments.length;
          r++
        )
          t += '&args[]=' + encodeURIComponent(arguments[r])
        return (
          'Minified React error #' +
          e +
          '; visit ' +
          t +
          ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings.'
        )
      }
      var h = {
          isMounted: function () {
            return !1
          },
          enqueueForceUpdate: function () {},
          enqueueReplaceState: function () {},
          enqueueSetState: function () {},
        },
        d = {}
      function f(e, t, r) {
        ;(this.props = e),
          (this.context = t),
          (this.refs = d),
          (this.updater = r || h)
      }
      function m() {}
      function y(e, t, r) {
        ;(this.props = e),
          (this.context = t),
          (this.refs = d),
          (this.updater = r || h)
      }
      ;(f.prototype.isReactComponent = {}),
        (f.prototype.setState = function (e, t) {
          if ('object' != typeof e && 'function' != typeof e && null != e)
            throw Error(p(85))
          this.updater.enqueueSetState(this, e, t, 'setState')
        }),
        (f.prototype.forceUpdate = function (e) {
          this.updater.enqueueForceUpdate(this, e, 'forceUpdate')
        }),
        (m.prototype = f.prototype)
      var g = (y.prototype = new m())
      ;(g.constructor = y), bi(g, f.prototype), (g.isPureReactComponent = !0)
      var b = { current: null },
        v = Object.prototype.hasOwnProperty,
        x = { key: !0, ref: !0, __self: !0, __source: !0 }
      function w(e, t, n) {
        var i,
          a = {},
          s = null,
          o = null
        if (null != t)
          for (i in (void 0 !== t.ref && (o = t.ref),
          void 0 !== t.key && (s = '' + t.key),
          t))
            v.call(t, i) && !x.hasOwnProperty(i) && (a[i] = t[i])
        var l = arguments.length - 2
        if (1 === l) a.children = n
        else if (1 < l) {
          for (var c = Array(l), u = 0; u < l; u++) c[u] = arguments[u + 2]
          a.children = c
        }
        if (e && e.defaultProps)
          for (i in (l = e.defaultProps)) void 0 === a[i] && (a[i] = l[i])
        return {
          $$typeof: r,
          type: e,
          key: s,
          ref: o,
          props: a,
          _owner: b.current,
        }
      }
      function E(e) {
        return 'object' == typeof e && null !== e && e.$$typeof === r
      }
      var P = /\/+/g
      function S(e, t) {
        return 'object' == typeof e && null !== e && null != e.key
          ? (function (e) {
              var t = { '=': '=0', ':': '=2' }
              return (
                '$' +
                e.replace(/[=:]/g, function (e) {
                  return t[e]
                })
              )
            })('' + e.key)
          : t.toString(36)
      }
      function T(e, t, i, a, s) {
        var o = typeof e
        ;('undefined' !== o && 'boolean' !== o) || (e = null)
        var l = !1
        if (null === e) l = !0
        else
          switch (o) {
            case 'string':
            case 'number':
              l = !0
              break
            case 'object':
              switch (e.$$typeof) {
                case r:
                case n:
                  l = !0
              }
          }
        if (l)
          return (
            (s = s((l = e))),
            (e = '' === a ? '.' + S(l, 0) : a),
            Array.isArray(s)
              ? ((i = ''),
                null != e && (i = e.replace(P, '$&/') + '/'),
                T(s, t, i, '', function (e) {
                  return e
                }))
              : null != s &&
                (E(s) &&
                  (s = (function (e, t) {
                    return {
                      $$typeof: r,
                      type: e.type,
                      key: t,
                      ref: e.ref,
                      props: e.props,
                      _owner: e._owner,
                    }
                  })(
                    s,
                    i +
                      (!s.key || (l && l.key === s.key)
                        ? ''
                        : ('' + s.key).replace(P, '$&/') + '/') +
                      e
                  )),
                t.push(s)),
            1
          )
        if (((l = 0), (a = '' === a ? '.' : a + ':'), Array.isArray(e)))
          for (var c = 0; c < e.length; c++) {
            var h = a + S((o = e[c]), c)
            l += T(o, t, i, h, s)
          }
        else if (
          ((h = (function (e) {
            return null === e || 'object' != typeof e
              ? null
              : 'function' == typeof (e = (u && e[u]) || e['@@iterator'])
              ? e
              : null
          })(e)),
          'function' == typeof h)
        )
          for (e = h.call(e), c = 0; !(o = e.next()).done; )
            l += T((o = o.value), t, i, (h = a + S(o, c++)), s)
        else if ('object' === o)
          throw (
            ((t = '' + e),
            Error(
              p(
                31,
                '[object Object]' === t
                  ? 'object with keys {' + Object.keys(e).join(', ') + '}'
                  : t
              )
            ))
          )
        return l
      }
      function C(e, t, r) {
        if (null == e) return e
        var n = [],
          i = 0
        return (
          T(e, n, '', '', function (e) {
            return t.call(r, e, i++)
          }),
          n
        )
      }
      function A(e) {
        if (-1 === e._status) {
          var t = e._result
          ;(t = t()),
            (e._status = 0),
            (e._result = t),
            t.then(
              function (t) {
                0 === e._status &&
                  ((t = t.default), (e._status = 1), (e._result = t))
              },
              function (t) {
                0 === e._status && ((e._status = 2), (e._result = t))
              }
            )
        }
        if (1 === e._status) return e._result
        throw e._result
      }
      var R = { current: null }
      function k() {
        var e = R.current
        if (null === e) throw Error(p(321))
        return e
      }
      var N = {
        ReactCurrentDispatcher: R,
        ReactCurrentBatchConfig: { transition: 0 },
        ReactCurrentOwner: b,
        IsSomeRendererActing: { current: !1 },
        assign: bi,
      }
      ;(t.Children = {
        map: C,
        forEach: function (e, t, r) {
          C(
            e,
            function () {
              t.apply(this, arguments)
            },
            r
          )
        },
        count: function (e) {
          var t = 0
          return (
            C(e, function () {
              t++
            }),
            t
          )
        },
        toArray: function (e) {
          return (
            C(e, function (e) {
              return e
            }) || []
          )
        },
        only: function (e) {
          if (!E(e)) throw Error(p(143))
          return e
        },
      }),
        (t.Component = f),
        (t.PureComponent = y),
        (t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = N),
        (t.cloneElement = function (e, t, n) {
          if (null == e) throw Error(p(267, e))
          var i = bi({}, e.props),
            a = e.key,
            s = e.ref,
            o = e._owner
          if (null != t) {
            if (
              (void 0 !== t.ref && ((s = t.ref), (o = b.current)),
              void 0 !== t.key && (a = '' + t.key),
              e.type && e.type.defaultProps)
            )
              var l = e.type.defaultProps
            for (c in t)
              v.call(t, c) &&
                !x.hasOwnProperty(c) &&
                (i[c] = void 0 === t[c] && void 0 !== l ? l[c] : t[c])
          }
          var c = arguments.length - 2
          if (1 === c) i.children = n
          else if (1 < c) {
            l = Array(c)
            for (var u = 0; u < c; u++) l[u] = arguments[u + 2]
            i.children = l
          }
          return {
            $$typeof: r,
            type: e.type,
            key: a,
            ref: s,
            props: i,
            _owner: o,
          }
        }),
        (t.createContext = function (e, t) {
          return (
            void 0 === t && (t = null),
            ((e = {
              $$typeof: a,
              _calculateChangedBits: t,
              _currentValue: e,
              _currentValue2: e,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
            }).Provider = { $$typeof: i, _context: e }),
            (e.Consumer = e)
          )
        }),
        (t.createElement = w),
        (t.createFactory = function (e) {
          var t = w.bind(null, e)
          return (t.type = e), t
        }),
        (t.createRef = function () {
          return { current: null }
        }),
        (t.forwardRef = function (e) {
          return { $$typeof: s, render: e }
        }),
        (t.isValidElement = E),
        (t.lazy = function (e) {
          return {
            $$typeof: l,
            _payload: { _status: -1, _result: e },
            _init: A,
          }
        }),
        (t.memo = function (e, t) {
          return { $$typeof: o, type: e, compare: void 0 === t ? null : t }
        }),
        (t.useCallback = function (e, t) {
          return k().useCallback(e, t)
        }),
        (t.useContext = function (e, t) {
          return k().useContext(e, t)
        }),
        (t.useDebugValue = function () {}),
        (t.useEffect = function (e, t) {
          return k().useEffect(e, t)
        }),
        (t.useImperativeHandle = function (e, t, r) {
          return k().useImperativeHandle(e, t, r)
        }),
        (t.useLayoutEffect = function (e, t) {
          return k().useLayoutEffect(e, t)
        }),
        (t.useMemo = function (e, t) {
          return k().useMemo(e, t)
        }),
        (t.useReducer = function (e, t, r) {
          return k().useReducer(e, t, r)
        }),
        (t.useRef = function (e) {
          return k().useRef(e)
        }),
        (t.useState = function (e) {
          return k().useState(e)
        }),
        (t.version = '17.0.2')
    }),
    xi = W(function (e, t) {
      'production' !== process.env.NODE_ENV &&
        (function () {
          var e = bi,
            r = 60103,
            n = 60106
          ;(t.Fragment = 60107), (t.StrictMode = 60108), (t.Profiler = 60114)
          var i = 60109,
            a = 60110,
            s = 60112
          t.Suspense = 60113
          var o = 60120,
            l = 60115,
            c = 60116,
            u = 60121,
            p = 60122,
            h = 60117,
            d = 60129,
            f = 60131
          if ('function' == typeof Symbol && Symbol.for) {
            var m = Symbol.for
            ;(r = m('react.element')),
              (n = m('react.portal')),
              (t.Fragment = m('react.fragment')),
              (t.StrictMode = m('react.strict_mode')),
              (t.Profiler = m('react.profiler')),
              (i = m('react.provider')),
              (a = m('react.context')),
              (s = m('react.forward_ref')),
              (t.Suspense = m('react.suspense')),
              (o = m('react.suspense_list')),
              (l = m('react.memo')),
              (c = m('react.lazy')),
              (u = m('react.block')),
              (p = m('react.server.block')),
              (h = m('react.fundamental')),
              m('react.scope'),
              m('react.opaque.id'),
              (d = m('react.debug_trace_mode')),
              m('react.offscreen'),
              (f = m('react.legacy_hidden'))
          }
          var y = 'function' == typeof Symbol && Symbol.iterator
          function g(e) {
            if (null === e || 'object' != typeof e) return null
            var t = (y && e[y]) || e['@@iterator']
            return 'function' == typeof t ? t : null
          }
          var b = { current: null },
            v = { current: null },
            x = {},
            w = null
          function E(e) {
            w = e
          }
          ;(x.setExtraStackFrame = function (e) {
            w = e
          }),
            (x.getCurrentStack = null),
            (x.getStackAddendum = function () {
              var e = ''
              w && (e += w)
              var t = x.getCurrentStack
              return t && (e += t() || ''), e
            })
          var P = {
            ReactCurrentDispatcher: b,
            ReactCurrentBatchConfig: { transition: 0 },
            ReactCurrentOwner: v,
            IsSomeRendererActing: { current: !1 },
            assign: e,
          }
          function S(e) {
            for (
              var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1;
              n < t;
              n++
            )
              r[n - 1] = arguments[n]
            C('warn', e, r)
          }
          function T(e) {
            for (
              var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1;
              n < t;
              n++
            )
              r[n - 1] = arguments[n]
            C('error', e, r)
          }
          function C(e, t, r) {
            var n = P.ReactDebugCurrentFrame.getStackAddendum()
            '' !== n && ((t += '%s'), (r = r.concat([n])))
            var i = r.map(function (e) {
              return '' + e
            })
            i.unshift('Warning: ' + t),
              Function.prototype.apply.call(console[e], console, i)
          }
          P.ReactDebugCurrentFrame = x
          var A = {}
          function R(e, t) {
            var r = e.constructor,
              n = (r && (r.displayName || r.name)) || 'ReactClass',
              i = n + '.' + t
            A[i] ||
              (T(
                "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
                t,
                n
              ),
              (A[i] = !0))
          }
          var k = {
              isMounted: function (e) {
                return !1
              },
              enqueueForceUpdate: function (e, t, r) {
                R(e, 'forceUpdate')
              },
              enqueueReplaceState: function (e, t, r, n) {
                R(e, 'replaceState')
              },
              enqueueSetState: function (e, t, r, n) {
                R(e, 'setState')
              },
            },
            N = {}
          function O(e, t, r) {
            ;(this.props = e),
              (this.context = t),
              (this.refs = N),
              (this.updater = r || k)
          }
          Object.freeze(N),
            (O.prototype.isReactComponent = {}),
            (O.prototype.setState = function (e, t) {
              if ('object' != typeof e && 'function' != typeof e && null != e)
                throw Error(
                  'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'
                )
              this.updater.enqueueSetState(this, e, t, 'setState')
            }),
            (O.prototype.forceUpdate = function (e) {
              this.updater.enqueueForceUpdate(this, e, 'forceUpdate')
            })
          var I = {
              isMounted: [
                'isMounted',
                'Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.',
              ],
              replaceState: [
                'replaceState',
                'Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).',
              ],
            },
            F = function (e, t) {
              Object.defineProperty(O.prototype, e, {
                get: function () {
                  S(
                    '%s(...) is deprecated in plain JavaScript React classes. %s',
                    t[0],
                    t[1]
                  )
                },
              })
            }
          for (var j in I) I.hasOwnProperty(j) && F(j, I[j])
          function _() {}
          function M(e, t, r) {
            ;(this.props = e),
              (this.context = t),
              (this.refs = N),
              (this.updater = r || k)
          }
          _.prototype = O.prototype
          var D = (M.prototype = new _())
          function L(e) {
            return e.displayName || 'Context'
          }
          function B(e) {
            if (null == e) return null
            if (
              ('number' == typeof e.tag &&
                T(
                  'Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.'
                ),
              'function' == typeof e)
            )
              return e.displayName || e.name || null
            if ('string' == typeof e) return e
            switch (e) {
              case t.Fragment:
                return 'Fragment'
              case n:
                return 'Portal'
              case t.Profiler:
                return 'Profiler'
              case t.StrictMode:
                return 'StrictMode'
              case t.Suspense:
                return 'Suspense'
              case o:
                return 'SuspenseList'
            }
            if ('object' == typeof e)
              switch (e.$$typeof) {
                case a:
                  return L(e) + '.Consumer'
                case i:
                  return L(e._context) + '.Provider'
                case s:
                  return (
                    (d = e),
                    (f = e.render),
                    (m = 'ForwardRef'),
                    (y = f.displayName || f.name || ''),
                    d.displayName || ('' !== y ? m + '(' + y + ')' : m)
                  )
                case l:
                  return B(e.type)
                case u:
                  return B(e._render)
                case c:
                  var r = e,
                    p = r._payload,
                    h = r._init
                  try {
                    return B(h(p))
                  } catch (e) {
                    return null
                  }
              }
            var d, f, m, y
            return null
          }
          ;(D.constructor = M), e(D, O.prototype), (D.isPureReactComponent = !0)
          var z,
            U,
            W,
            H = Object.prototype.hasOwnProperty,
            V = { key: !0, ref: !0, __self: !0, __source: !0 }
          function $(e) {
            if (H.call(e, 'ref')) {
              var t = Object.getOwnPropertyDescriptor(e, 'ref').get
              if (t && t.isReactWarning) return !1
            }
            return void 0 !== e.ref
          }
          function q(e) {
            if (H.call(e, 'key')) {
              var t = Object.getOwnPropertyDescriptor(e, 'key').get
              if (t && t.isReactWarning) return !1
            }
            return void 0 !== e.key
          }
          function K(e, t) {
            var r = function () {
              z ||
                ((z = !0),
                T(
                  '%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)',
                  t
                ))
            }
            ;(r.isReactWarning = !0),
              Object.defineProperty(e, 'key', { get: r, configurable: !0 })
          }
          function G(e, t) {
            var r = function () {
              U ||
                ((U = !0),
                T(
                  '%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)',
                  t
                ))
            }
            ;(r.isReactWarning = !0),
              Object.defineProperty(e, 'ref', { get: r, configurable: !0 })
          }
          function X(e) {
            if (
              'string' == typeof e.ref &&
              v.current &&
              e.__self &&
              v.current.stateNode !== e.__self
            ) {
              var t = B(v.current.type)
              W[t] ||
                (T(
                  'Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
                  t,
                  e.ref
                ),
                (W[t] = !0))
            }
          }
          W = {}
          var Y = function (e, t, n, i, a, s, o) {
            var l = {
              $$typeof: r,
              type: e,
              key: t,
              ref: n,
              props: o,
              _owner: s,
              _store: {},
            }
            return (
              Object.defineProperty(l._store, 'validated', {
                configurable: !1,
                enumerable: !1,
                writable: !0,
                value: !1,
              }),
              Object.defineProperty(l, '_self', {
                configurable: !1,
                enumerable: !1,
                writable: !1,
                value: i,
              }),
              Object.defineProperty(l, '_source', {
                configurable: !1,
                enumerable: !1,
                writable: !1,
                value: a,
              }),
              Object.freeze && (Object.freeze(l.props), Object.freeze(l)),
              l
            )
          }
          function J(e, t, r) {
            var n,
              i = {},
              a = null,
              s = null,
              o = null,
              l = null
            if (null != t)
              for (n in ($(t) && ((s = t.ref), X(t)),
              q(t) && (a = '' + t.key),
              (o = void 0 === t.__self ? null : t.__self),
              (l = void 0 === t.__source ? null : t.__source),
              t))
                H.call(t, n) && !V.hasOwnProperty(n) && (i[n] = t[n])
            var c = arguments.length - 2
            if (1 === c) i.children = r
            else if (c > 1) {
              for (var u = Array(c), p = 0; p < c; p++) u[p] = arguments[p + 2]
              Object.freeze && Object.freeze(u), (i.children = u)
            }
            if (e && e.defaultProps) {
              var h = e.defaultProps
              for (n in h) void 0 === i[n] && (i[n] = h[n])
            }
            if (a || s) {
              var d =
                'function' == typeof e
                  ? e.displayName || e.name || 'Unknown'
                  : e
              a && K(i, d), s && G(i, d)
            }
            return Y(e, a, s, o, l, v.current, i)
          }
          function Q(t, r, n) {
            if (null == t)
              throw Error(
                'React.cloneElement(...): The argument must be a React element, but you passed ' +
                  t +
                  '.'
              )
            var i,
              a,
              s = e({}, t.props),
              o = t.key,
              l = t.ref,
              c = t._self,
              u = t._source,
              p = t._owner
            if (null != r)
              for (i in ($(r) && ((l = r.ref), (p = v.current)),
              q(r) && (o = '' + r.key),
              t.type && t.type.defaultProps && (a = t.type.defaultProps),
              r))
                H.call(r, i) &&
                  !V.hasOwnProperty(i) &&
                  (void 0 === r[i] && void 0 !== a
                    ? (s[i] = a[i])
                    : (s[i] = r[i]))
            var h = arguments.length - 2
            if (1 === h) s.children = n
            else if (h > 1) {
              for (var d = Array(h), f = 0; f < h; f++) d[f] = arguments[f + 2]
              s.children = d
            }
            return Y(t.type, o, l, c, u, p, s)
          }
          function Z(e) {
            return 'object' == typeof e && null !== e && e.$$typeof === r
          }
          var ee = !1,
            te = /\/+/g
          function re(e) {
            return e.replace(te, '$&/')
          }
          function ne(e, t) {
            return 'object' == typeof e && null !== e && null != e.key
              ? ((r = '' + e.key),
                (n = { '=': '=0', ':': '=2' }),
                '$' +
                  r.replace(/[=:]/g, function (e) {
                    return n[e]
                  }))
              : t.toString(36)
            var r, n
          }
          function ie(e, t, i, a, s) {
            var o = typeof e
            ;('undefined' !== o && 'boolean' !== o) || (e = null)
            var l,
              c,
              u,
              p = !1
            if (null === e) p = !0
            else
              switch (o) {
                case 'string':
                case 'number':
                  p = !0
                  break
                case 'object':
                  switch (e.$$typeof) {
                    case r:
                    case n:
                      p = !0
                  }
              }
            if (p) {
              var h = e,
                d = s(h),
                f = '' === a ? '.' + ne(h, 0) : a
              if (Array.isArray(d)) {
                var m = ''
                null != f && (m = re(f) + '/'),
                  ie(d, t, m, '', function (e) {
                    return e
                  })
              } else
                null != d &&
                  (Z(d) &&
                    ((l = d),
                    (c =
                      i +
                      (!d.key || (h && h.key === d.key)
                        ? ''
                        : re('' + d.key) + '/') +
                      f),
                    (d = Y(
                      l.type,
                      c,
                      l.ref,
                      l._self,
                      l._source,
                      l._owner,
                      l.props
                    ))),
                  t.push(d))
              return 1
            }
            var y = 0,
              b = '' === a ? '.' : a + ':'
            if (Array.isArray(e))
              for (var v = 0; v < e.length; v++)
                y += ie((u = e[v]), t, i, b + ne(u, v), s)
            else {
              var x = g(e)
              if ('function' == typeof x) {
                var w = e
                x === w.entries &&
                  (ee ||
                    S(
                      'Using Maps as children is not supported. Use an array of keyed ReactElements instead.'
                    ),
                  (ee = !0))
                for (var E, P = x.call(w), T = 0; !(E = P.next()).done; )
                  y += ie((u = E.value), t, i, b + ne(u, T++), s)
              } else if ('object' === o) {
                var C = '' + e
                throw Error(
                  'Objects are not valid as a React child (found: ' +
                    ('[object Object]' === C
                      ? 'object with keys {' + Object.keys(e).join(', ') + '}'
                      : C) +
                    '). If you meant to render a collection of children, use an array instead.'
                )
              }
            }
            return y
          }
          function ae(e, t, r) {
            if (null == e) return e
            var n = [],
              i = 0
            return (
              ie(e, n, '', '', function (e) {
                return t.call(r, e, i++)
              }),
              n
            )
          }
          function se(e) {
            if (-1 === e._status) {
              var t = (0, e._result)(),
                r = e
              ;(r._status = 0),
                (r._result = t),
                t.then(
                  function (t) {
                    if (0 === e._status) {
                      var r = t.default
                      void 0 === r &&
                        T(
                          "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
                          t
                        )
                      var n = e
                      ;(n._status = 1), (n._result = r)
                    }
                  },
                  function (t) {
                    if (0 === e._status) {
                      var r = e
                      ;(r._status = 2), (r._result = t)
                    }
                  }
                )
            }
            if (1 === e._status) return e._result
            throw e._result
          }
          function oe(e) {
            return (
              'string' == typeof e ||
              'function' == typeof e ||
              e === t.Fragment ||
              e === t.Profiler ||
              e === d ||
              e === t.StrictMode ||
              e === t.Suspense ||
              e === o ||
              e === f ||
              ('object' == typeof e &&
                null !== e &&
                (e.$$typeof === c ||
                  e.$$typeof === l ||
                  e.$$typeof === i ||
                  e.$$typeof === a ||
                  e.$$typeof === s ||
                  e.$$typeof === h ||
                  e.$$typeof === u ||
                  e[0] === p))
            )
          }
          function le() {
            var e = b.current
            if (null === e)
              throw Error(
                'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.'
              )
            return e
          }
          var ce,
            ue,
            pe,
            he,
            de,
            fe,
            me,
            ye = 0
          function ge() {}
          ge.__reactDisabledLog = !0
          var be,
            ve = P.ReactCurrentDispatcher
          function xe(e, t, r) {
            if (void 0 === be)
              try {
                throw Error()
              } catch (e) {
                var n = e.stack.trim().match(/\n( *(at )?)/)
                be = (n && n[1]) || ''
              }
            return '\n' + be + e
          }
          var we,
            Ee = !1,
            Pe = 'function' == typeof WeakMap ? WeakMap : Map
          function Se(t, r) {
            if (!t || Ee) return ''
            var n,
              i = we.get(t)
            if (void 0 !== i) return i
            Ee = !0
            var a,
              s = Error.prepareStackTrace
            ;(Error.prepareStackTrace = void 0),
              (a = ve.current),
              (ve.current = null),
              (function () {
                if (0 === ye) {
                  ;(ce = console.log),
                    (ue = console.info),
                    (pe = console.warn),
                    (he = console.error),
                    (de = console.group),
                    (fe = console.groupCollapsed),
                    (me = console.groupEnd)
                  var e = {
                    configurable: !0,
                    enumerable: !0,
                    value: ge,
                    writable: !0,
                  }
                  Object.defineProperties(console, {
                    info: e,
                    log: e,
                    warn: e,
                    error: e,
                    group: e,
                    groupCollapsed: e,
                    groupEnd: e,
                  })
                }
                ye++
              })()
            try {
              if (r) {
                var o = function () {
                  throw Error()
                }
                if (
                  (Object.defineProperty(o.prototype, 'props', {
                    set: function () {
                      throw Error()
                    },
                  }),
                  'object' == typeof Reflect && Reflect.construct)
                ) {
                  try {
                    Reflect.construct(o, [])
                  } catch (e) {
                    n = e
                  }
                  Reflect.construct(t, [], o)
                } else {
                  try {
                    o.call()
                  } catch (e) {
                    n = e
                  }
                  t.call(o.prototype)
                }
              } else {
                try {
                  throw Error()
                } catch (e) {
                  n = e
                }
                t()
              }
            } catch (e) {
              if (e && n && 'string' == typeof e.stack) {
                for (
                  var l = e.stack.split('\n'),
                    c = n.stack.split('\n'),
                    u = l.length - 1,
                    p = c.length - 1;
                  u >= 1 && p >= 0 && l[u] !== c[p];

                )
                  p--
                for (; u >= 1 && p >= 0; u--, p--)
                  if (l[u] !== c[p]) {
                    if (1 !== u || 1 !== p)
                      do {
                        if ((u--, --p < 0 || l[u] !== c[p])) {
                          var h = '\n' + l[u].replace(' at new ', ' at ')
                          return 'function' == typeof t && we.set(t, h), h
                        }
                      } while (u >= 1 && p >= 0)
                    break
                  }
              }
            } finally {
              ;(Ee = !1),
                (ve.current = a),
                (function () {
                  if (0 == --ye) {
                    var t = { configurable: !0, enumerable: !0, writable: !0 }
                    Object.defineProperties(console, {
                      log: e({}, t, { value: ce }),
                      info: e({}, t, { value: ue }),
                      warn: e({}, t, { value: pe }),
                      error: e({}, t, { value: he }),
                      group: e({}, t, { value: de }),
                      groupCollapsed: e({}, t, { value: fe }),
                      groupEnd: e({}, t, { value: me }),
                    })
                  }
                  ye < 0 &&
                    T(
                      'disabledDepth fell below zero. This is a bug in React. Please file an issue.'
                    )
                })(),
                (Error.prepareStackTrace = s)
            }
            var d = t ? t.displayName || t.name : '',
              f = d ? xe(d) : ''
            return 'function' == typeof t && we.set(t, f), f
          }
          function Te(e, t, r) {
            return Se(e, !1)
          }
          function Ce(e, r, n) {
            if (null == e) return ''
            if ('function' == typeof e)
              return Se(
                e,
                (function (e) {
                  var t = e.prototype
                  return !(!t || !t.isReactComponent)
                })(e)
              )
            if ('string' == typeof e) return xe(e)
            switch (e) {
              case t.Suspense:
                return xe('Suspense')
              case o:
                return xe('SuspenseList')
            }
            if ('object' == typeof e)
              switch (e.$$typeof) {
                case s:
                  return Te(e.render)
                case l:
                  return Ce(e.type, r, n)
                case u:
                  return Te(e._render)
                case c:
                  var i = e,
                    a = i._payload,
                    p = i._init
                  try {
                    return Ce(p(a), r, n)
                  } catch (e) {}
              }
            return ''
          }
          we = new Pe()
          var Ae,
            Re = {},
            ke = P.ReactDebugCurrentFrame
          function Ne(e) {
            if (e) {
              var t = e._owner,
                r = Ce(e.type, e._source, t ? t.type : null)
              ke.setExtraStackFrame(r)
            } else ke.setExtraStackFrame(null)
          }
          function Oe(e) {
            if (e) {
              var t = e._owner
              E(Ce(e.type, e._source, t ? t.type : null))
            } else E(null)
          }
          function Ie() {
            if (v.current) {
              var e = B(v.current.type)
              if (e) return '\n\nCheck the render method of `' + e + '`.'
            }
            return ''
          }
          function Fe(e) {
            return null != e && void 0 !== (t = e.__source)
              ? '\n\nCheck your code at ' +
                  t.fileName.replace(/^.*[\\\/]/, '') +
                  ':' +
                  t.lineNumber +
                  '.'
              : ''
            var t
          }
          Ae = !1
          var je = {}
          function _e(e, t) {
            if (e._store && !e._store.validated && null == e.key) {
              e._store.validated = !0
              var r = (function (e) {
                var t = Ie()
                if (!t) {
                  var r = 'string' == typeof e ? e : e.displayName || e.name
                  r &&
                    (t =
                      '\n\nCheck the top-level render call using <' + r + '>.')
                }
                return t
              })(t)
              if (!je[r]) {
                je[r] = !0
                var n = ''
                e &&
                  e._owner &&
                  e._owner !== v.current &&
                  (n = ' It was passed a child from ' + B(e._owner.type) + '.'),
                  Oe(e),
                  T(
                    'Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',
                    r,
                    n
                  ),
                  Oe(null)
              }
            }
          }
          function Me(e, t) {
            if ('object' == typeof e)
              if (Array.isArray(e))
                for (var r = 0; r < e.length; r++) {
                  var n = e[r]
                  Z(n) && _e(n, t)
                }
              else if (Z(e)) e._store && (e._store.validated = !0)
              else if (e) {
                var i = g(e)
                if ('function' == typeof i && i !== e.entries)
                  for (var a, s = i.call(e); !(a = s.next()).done; )
                    Z(a.value) && _e(a.value, t)
              }
          }
          function De(e) {
            var t,
              r = e.type
            if (null != r && 'string' != typeof r) {
              if ('function' == typeof r) t = r.propTypes
              else {
                if (
                  'object' != typeof r ||
                  (r.$$typeof !== s && r.$$typeof !== l)
                )
                  return
                t = r.propTypes
              }
              if (t) {
                var n = B(r)
                !(function (e, t, r, n, i) {
                  var a = Function.call.bind(Object.prototype.hasOwnProperty)
                  for (var s in e)
                    if (a(e, s)) {
                      var o = void 0
                      try {
                        if ('function' != typeof e[s]) {
                          var l = Error(
                            (n || 'React class') +
                              ': ' +
                              r +
                              ' type `' +
                              s +
                              '` is invalid; it must be a function, usually from the `prop-types` package, but received `' +
                              typeof e[s] +
                              '`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
                          )
                          throw ((l.name = 'Invariant Violation'), l)
                        }
                        o = e[s](
                          t,
                          s,
                          n,
                          r,
                          null,
                          'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'
                        )
                      } catch (e) {
                        o = e
                      }
                      !o ||
                        o instanceof Error ||
                        (Ne(i),
                        T(
                          '%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).',
                          n || 'React class',
                          r,
                          s,
                          typeof o
                        ),
                        Ne(null)),
                        o instanceof Error &&
                          !(o.message in Re) &&
                          ((Re[o.message] = !0),
                          Ne(i),
                          T('Failed %s type: %s', r, o.message),
                          Ne(null))
                    }
                })(t, e.props, 'prop', n, e)
              } else if (void 0 !== r.PropTypes && !Ae) {
                ;(Ae = !0),
                  T(
                    'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',
                    B(r) || 'Unknown'
                  )
              }
              'function' != typeof r.getDefaultProps ||
                r.getDefaultProps.isReactClassApproved ||
                T(
                  'getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.'
                )
            }
          }
          function Le(e) {
            for (var t = Object.keys(e.props), r = 0; r < t.length; r++) {
              var n = t[r]
              if ('children' !== n && 'key' !== n) {
                Oe(e),
                  T(
                    'Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.',
                    n
                  ),
                  Oe(null)
                break
              }
            }
            null !== e.ref &&
              (Oe(e),
              T('Invalid attribute `ref` supplied to `React.Fragment`.'),
              Oe(null))
          }
          function Be(e, n, i) {
            var a = oe(e)
            if (!a) {
              var s = ''
              ;(void 0 === e ||
                ('object' == typeof e &&
                  null !== e &&
                  0 === Object.keys(e).length)) &&
                (s +=
                  " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.")
              var o,
                l = Fe(n)
              ;(s += l || Ie()),
                null === e
                  ? (o = 'null')
                  : Array.isArray(e)
                  ? (o = 'array')
                  : void 0 !== e && e.$$typeof === r
                  ? ((o = '<' + (B(e.type) || 'Unknown') + ' />'),
                    (s =
                      ' Did you accidentally export a JSX literal instead of a component?'))
                  : (o = typeof e),
                T(
                  'React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s',
                  o,
                  s
                )
            }
            var c = J.apply(this, arguments)
            if (null == c) return c
            if (a)
              for (var u = 2; u < arguments.length; u++) Me(arguments[u], e)
            return e === t.Fragment ? Le(c) : De(c), c
          }
          var ze = !1
          try {
            var Ue = Object.freeze({})
            new Map([[Ue, null]]), new Set([Ue])
          } catch (e) {}
          var We = Be,
            He = function (e, t, r) {
              for (
                var n = Q.apply(this, arguments), i = 2;
                i < arguments.length;
                i++
              )
                Me(arguments[i], n.type)
              return De(n), n
            },
            Ve = function (e) {
              var t = Be.bind(null, e)
              return (
                (t.type = e),
                ze ||
                  ((ze = !0),
                  S(
                    'React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.'
                  )),
                Object.defineProperty(t, 'type', {
                  enumerable: !1,
                  get: function () {
                    return (
                      S(
                        'Factory.type is deprecated. Access the class directly before passing it to createFactory.'
                      ),
                      Object.defineProperty(this, 'type', { value: e }),
                      e
                    )
                  },
                }),
                t
              )
            },
            $e = {
              map: ae,
              forEach: function (e, t, r) {
                ae(
                  e,
                  function () {
                    t.apply(this, arguments)
                  },
                  r
                )
              },
              count: function (e) {
                var t = 0
                return (
                  ae(e, function () {
                    t++
                  }),
                  t
                )
              },
              toArray: function (e) {
                return (
                  ae(e, function (e) {
                    return e
                  }) || []
                )
              },
              only: function (e) {
                if (!Z(e))
                  throw Error(
                    'React.Children.only expected to receive a single React element child.'
                  )
                return e
              },
            }
          ;(t.Children = $e),
            (t.Component = O),
            (t.PureComponent = M),
            (t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = P),
            (t.cloneElement = He),
            (t.createContext = function (e, t) {
              void 0 === t
                ? (t = null)
                : null !== t &&
                  'function' != typeof t &&
                  T(
                    'createContext: Expected the optional second argument to be a function. Instead received: %s',
                    t
                  )
              var r = {
                $$typeof: a,
                _calculateChangedBits: t,
                _currentValue: e,
                _currentValue2: e,
                _threadCount: 0,
                Provider: null,
                Consumer: null,
              }
              r.Provider = { $$typeof: i, _context: r }
              var n = !1,
                s = !1,
                o = !1,
                l = {
                  $$typeof: a,
                  _context: r,
                  _calculateChangedBits: r._calculateChangedBits,
                }
              return (
                Object.defineProperties(l, {
                  Provider: {
                    get: function () {
                      return (
                        s ||
                          ((s = !0),
                          T(
                            'Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?'
                          )),
                        r.Provider
                      )
                    },
                    set: function (e) {
                      r.Provider = e
                    },
                  },
                  _currentValue: {
                    get: function () {
                      return r._currentValue
                    },
                    set: function (e) {
                      r._currentValue = e
                    },
                  },
                  _currentValue2: {
                    get: function () {
                      return r._currentValue2
                    },
                    set: function (e) {
                      r._currentValue2 = e
                    },
                  },
                  _threadCount: {
                    get: function () {
                      return r._threadCount
                    },
                    set: function (e) {
                      r._threadCount = e
                    },
                  },
                  Consumer: {
                    get: function () {
                      return (
                        n ||
                          ((n = !0),
                          T(
                            'Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?'
                          )),
                        r.Consumer
                      )
                    },
                  },
                  displayName: {
                    get: function () {
                      return r.displayName
                    },
                    set: function (e) {
                      o ||
                        (S(
                          "Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",
                          e
                        ),
                        (o = !0))
                    },
                  },
                }),
                (r.Consumer = l),
                (r._currentRenderer = null),
                (r._currentRenderer2 = null),
                r
              )
            }),
            (t.createElement = We),
            (t.createFactory = Ve),
            (t.createRef = function () {
              var e = { current: null }
              return Object.seal(e), e
            }),
            (t.forwardRef = function (e) {
              null != e && e.$$typeof === l
                ? T(
                    'forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).'
                  )
                : 'function' != typeof e
                ? T(
                    'forwardRef requires a render function but was given %s.',
                    null === e ? 'null' : typeof e
                  )
                : 0 !== e.length &&
                  2 !== e.length &&
                  T(
                    'forwardRef render functions accept exactly two parameters: props and ref. %s',
                    1 === e.length
                      ? 'Did you forget to use the ref parameter?'
                      : 'Any additional parameter will be undefined.'
                  ),
                null != e &&
                  ((null == e.defaultProps && null == e.propTypes) ||
                    T(
                      'forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?'
                    ))
              var t,
                r = { $$typeof: s, render: e }
              return (
                Object.defineProperty(r, 'displayName', {
                  enumerable: !1,
                  configurable: !0,
                  get: function () {
                    return t
                  },
                  set: function (r) {
                    ;(t = r), null == e.displayName && (e.displayName = r)
                  },
                }),
                r
              )
            }),
            (t.isValidElement = Z),
            (t.lazy = function (e) {
              var t,
                r,
                n = {
                  $$typeof: c,
                  _payload: { _status: -1, _result: e },
                  _init: se,
                }
              return (
                Object.defineProperties(n, {
                  defaultProps: {
                    configurable: !0,
                    get: function () {
                      return t
                    },
                    set: function (e) {
                      T(
                        'React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.'
                      ),
                        (t = e),
                        Object.defineProperty(n, 'defaultProps', {
                          enumerable: !0,
                        })
                    },
                  },
                  propTypes: {
                    configurable: !0,
                    get: function () {
                      return r
                    },
                    set: function (e) {
                      T(
                        'React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.'
                      ),
                        (r = e),
                        Object.defineProperty(n, 'propTypes', {
                          enumerable: !0,
                        })
                    },
                  },
                }),
                n
              )
            }),
            (t.memo = function (e, t) {
              oe(e) ||
                T(
                  'memo: The first argument must be a component. Instead received: %s',
                  null === e ? 'null' : typeof e
                )
              var r,
                n = { $$typeof: l, type: e, compare: void 0 === t ? null : t }
              return (
                Object.defineProperty(n, 'displayName', {
                  enumerable: !1,
                  configurable: !0,
                  get: function () {
                    return r
                  },
                  set: function (t) {
                    ;(r = t), null == e.displayName && (e.displayName = t)
                  },
                }),
                n
              )
            }),
            (t.useCallback = function (e, t) {
              return le().useCallback(e, t)
            }),
            (t.useContext = function (e, t) {
              var r = le()
              if (
                (void 0 !== t &&
                  T(
                    'useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s',
                    t,
                    'number' == typeof t && Array.isArray(arguments[2])
                      ? '\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks'
                      : ''
                  ),
                void 0 !== e._context)
              ) {
                var n = e._context
                n.Consumer === e
                  ? T(
                      'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?'
                    )
                  : n.Provider === e &&
                    T(
                      'Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?'
                    )
              }
              return r.useContext(e, t)
            }),
            (t.useDebugValue = function (e, t) {
              return le().useDebugValue(e, t)
            }),
            (t.useEffect = function (e, t) {
              return le().useEffect(e, t)
            }),
            (t.useImperativeHandle = function (e, t, r) {
              return le().useImperativeHandle(e, t, r)
            }),
            (t.useLayoutEffect = function (e, t) {
              return le().useLayoutEffect(e, t)
            }),
            (t.useMemo = function (e, t) {
              return le().useMemo(e, t)
            }),
            (t.useReducer = function (e, t, r) {
              return le().useReducer(e, t, r)
            }),
            (t.useRef = function (e) {
              return le().useRef(e)
            }),
            (t.useState = function (e) {
              return le().useState(e)
            }),
            (t.version = '17.0.2')
        })()
    }),
    wi = W(function (e) {
      'production' === process.env.NODE_ENV
        ? (e.exports = vi)
        : (e.exports = xi)
    }),
    Ei = W(function (e, t) {
      Object.defineProperty(t, '__esModule', { value: !0 }), (t.hover = void 0)
      var r,
        n =
          Object.assign ||
          function (e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = arguments[t]
              for (var n in r)
                Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
            }
            return e
          },
        i = (r = wi) && r.__esModule ? r : { default: r }
      function a(e, t) {
        if (!(e instanceof t))
          throw new TypeError('Cannot call a class as a function')
      }
      function s(e, t) {
        if (!e)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        return !t || ('object' != typeof t && 'function' != typeof t) ? e : t
      }
      function o(e, t) {
        if ('function' != typeof t && null !== t)
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof t
          )
        ;(e.prototype = Object.create(t && t.prototype, {
          constructor: {
            value: e,
            enumerable: !1,
            writable: !0,
            configurable: !0,
          },
        })),
          t &&
            (Object.setPrototypeOf
              ? Object.setPrototypeOf(e, t)
              : (e.__proto__ = t))
      }
      var l = (t.hover = function (e) {
        var t =
          arguments.length > 1 && void 0 !== arguments[1]
            ? arguments[1]
            : 'span'
        return (function (r) {
          function l() {
            var r, o, c
            a(this, l)
            for (var u = arguments.length, p = Array(u), h = 0; h < u; h++)
              p[h] = arguments[h]
            return (
              (o = c =
                s(
                  this,
                  (r = l.__proto__ || Object.getPrototypeOf(l)).call.apply(
                    r,
                    [this].concat(p)
                  )
                )),
              (c.state = { hover: !1 }),
              (c.handleMouseOver = function () {
                return c.setState({ hover: !0 })
              }),
              (c.handleMouseOut = function () {
                return c.setState({ hover: !1 })
              }),
              (c.render = function () {
                return i.default.createElement(
                  t,
                  {
                    onMouseOver: c.handleMouseOver,
                    onMouseOut: c.handleMouseOut,
                  },
                  i.default.createElement(e, n({}, c.props, c.state))
                )
              }),
              s(c, o)
            )
          }
          return o(l, r), l
        })(i.default.Component)
      })
      t.default = l
    }),
    Pi = W(function (e, t) {
      Object.defineProperty(t, '__esModule', { value: !0 }), (t.active = void 0)
      var r,
        n =
          Object.assign ||
          function (e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = arguments[t]
              for (var n in r)
                Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
            }
            return e
          },
        i = (r = wi) && r.__esModule ? r : { default: r }
      function a(e, t) {
        if (!(e instanceof t))
          throw new TypeError('Cannot call a class as a function')
      }
      function s(e, t) {
        if (!e)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        return !t || ('object' != typeof t && 'function' != typeof t) ? e : t
      }
      function o(e, t) {
        if ('function' != typeof t && null !== t)
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof t
          )
        ;(e.prototype = Object.create(t && t.prototype, {
          constructor: {
            value: e,
            enumerable: !1,
            writable: !0,
            configurable: !0,
          },
        })),
          t &&
            (Object.setPrototypeOf
              ? Object.setPrototypeOf(e, t)
              : (e.__proto__ = t))
      }
      var l = (t.active = function (e) {
        var t =
          arguments.length > 1 && void 0 !== arguments[1]
            ? arguments[1]
            : 'span'
        return (function (r) {
          function l() {
            var r, o, c
            a(this, l)
            for (var u = arguments.length, p = Array(u), h = 0; h < u; h++)
              p[h] = arguments[h]
            return (
              (o = c =
                s(
                  this,
                  (r = l.__proto__ || Object.getPrototypeOf(l)).call.apply(
                    r,
                    [this].concat(p)
                  )
                )),
              (c.state = { active: !1 }),
              (c.handleMouseDown = function () {
                return c.setState({ active: !0 })
              }),
              (c.handleMouseUp = function () {
                return c.setState({ active: !1 })
              }),
              (c.render = function () {
                return i.default.createElement(
                  t,
                  {
                    onMouseDown: c.handleMouseDown,
                    onMouseUp: c.handleMouseUp,
                  },
                  i.default.createElement(e, n({}, c.props, c.state))
                )
              }),
              s(c, o)
            )
          }
          return o(l, r), l
        })(i.default.Component)
      })
      t.default = l
    }),
    Si = function (e, t) {
      var r = {},
        n = function (e) {
          var t =
            !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
          r[e] = t
        }
      return (
        0 === e && n('first-child'),
        e === t - 1 && n('last-child'),
        (0 === e || e % 2 == 0) && n('even'),
        1 === Math.abs(e % 2) && n('odd'),
        n('nth-child', e),
        r
      )
    },
    Ti = Object.defineProperty({ default: Si }, '__esModule', { value: !0 }),
    Ci = W(function (e, t) {
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.ReactCSS =
          t.loop =
          t.handleActive =
          t.handleHover =
          t.hover =
            void 0)
      var r = l(xn),
        n = l(hi),
        i = l(di),
        a = l(Ei),
        s = l(Pi),
        o = l(Ti)
      function l(e) {
        return e && e.__esModule ? e : { default: e }
      }
      ;(t.hover = a.default),
        (t.handleHover = a.default),
        (t.handleActive = s.default),
        (t.loop = o.default)
      var c = (t.ReactCSS = function (e) {
        for (
          var t = arguments.length, a = Array(t > 1 ? t - 1 : 0), s = 1;
          s < t;
          s++
        )
          a[s - 1] = arguments[s]
        var o = (0, r.default)(a),
          l = (0, n.default)(e, o)
        return (0, i.default)(l)
      })
      t.default = c
    }),
    Ai = U(Ci),
    Ri = function (e, t, r, n, i) {
      var a = i.clientWidth,
        s = i.clientHeight,
        o = 'number' == typeof e.pageX ? e.pageX : e.touches[0].pageX,
        l = 'number' == typeof e.pageY ? e.pageY : e.touches[0].pageY,
        c = o - (i.getBoundingClientRect().left + window.pageXOffset),
        u = l - (i.getBoundingClientRect().top + window.pageYOffset)
      if ('vertical' === r) {
        var p = void 0
        if (
          ((p = u < 0 ? 0 : u > s ? 1 : Math.round((100 * u) / s) / 100),
          t.a !== p)
        )
          return { h: t.h, s: t.s, l: t.l, a: p, source: 'rgb' }
      } else {
        var h = void 0
        if (n !== (h = c < 0 ? 0 : c > a ? 1 : Math.round((100 * c) / a) / 100))
          return { h: t.h, s: t.s, l: t.l, a: h, source: 'rgb' }
      }
      return null
    },
    ki = {},
    Ni = function (e, t, r, n) {
      var i = e + '-' + t + '-' + r + (n ? '-server' : '')
      if (ki[i]) return ki[i]
      var a = (function (e, t, r, n) {
        if ('undefined' == typeof document && !n) return null
        var i = n ? new n() : document.createElement('canvas')
        ;(i.width = 2 * r), (i.height = 2 * r)
        var a = i.getContext('2d')
        return a
          ? ((a.fillStyle = e),
            a.fillRect(0, 0, i.width, i.height),
            (a.fillStyle = t),
            a.fillRect(0, 0, r, r),
            a.translate(r, r),
            a.fillRect(0, 0, r, r),
            i.toDataURL())
          : null
      })(e, t, r, n)
      return (ki[i] = a), a
    },
    Oi =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    Ii = function (e) {
      var t = e.white,
        r = e.grey,
        n = e.size,
        i = e.renderers,
        a = e.borderRadius,
        s = e.boxShadow,
        o = e.children,
        l = Ai({
          default: {
            grid: {
              borderRadius: a,
              boxShadow: s,
              absolute: '0px 0px 0px 0px',
              background: 'url(' + Ni(t, r, n, i.canvas) + ') center left',
            },
          },
        })
      return React.isValidElement(o)
        ? React.cloneElement(
            o,
            Oi({}, o.props, { style: Oi({}, o.props.style, l.grid) })
          )
        : React.createElement('div', { style: l.grid })
    }
  /** @license React v17.0.2
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */ Ii.defaultProps = {
    size: 8,
    white: 'transparent',
    grey: 'rgba(0,0,0,.08)',
    renderers: {},
  }
  var Fi =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    ji = (function () {
      function e(e, t) {
        for (var r = 0; r < t.length; r++) {
          var n = t[r]
          ;(n.enumerable = n.enumerable || !1),
            (n.configurable = !0),
            'value' in n && (n.writable = !0),
            Object.defineProperty(e, n.key, n)
        }
      }
      return function (t, r, n) {
        return r && e(t.prototype, r), n && e(t, n), t
      }
    })()
  function _i(e, t) {
    if (!(e instanceof t))
      throw new TypeError('Cannot call a class as a function')
  }
  function Mi(e, t) {
    if (!e)
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      )
    return !t || ('object' != typeof t && 'function' != typeof t) ? e : t
  }
  var Di = (function (e) {
      function t() {
        var e, r, n
        _i(this, t)
        for (var i = arguments.length, a = Array(i), s = 0; s < i; s++)
          a[s] = arguments[s]
        return (
          (r = n =
            Mi(
              this,
              (e = t.__proto__ || Object.getPrototypeOf(t)).call.apply(
                e,
                [this].concat(a)
              )
            )),
          (n.handleChange = function (e) {
            var t = Ri(
              e,
              n.props.hsl,
              n.props.direction,
              n.props.a,
              n.container
            )
            t && 'function' == typeof n.props.onChange && n.props.onChange(t, e)
          }),
          (n.handleMouseDown = function (e) {
            n.handleChange(e),
              window.addEventListener('mousemove', n.handleChange),
              window.addEventListener('mouseup', n.handleMouseUp)
          }),
          (n.handleMouseUp = function () {
            n.unbindEventListeners()
          }),
          (n.unbindEventListeners = function () {
            window.removeEventListener('mousemove', n.handleChange),
              window.removeEventListener('mouseup', n.handleMouseUp)
          }),
          Mi(n, r)
        )
      }
      return (
        (function (e, t) {
          if ('function' != typeof t && null !== t)
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof t
            )
          ;(e.prototype = Object.create(t && t.prototype, {
            constructor: {
              value: e,
              enumerable: !1,
              writable: !0,
              configurable: !0,
            },
          })),
            t &&
              (Object.setPrototypeOf
                ? Object.setPrototypeOf(e, t)
                : (e.__proto__ = t))
        })(t, React.PureComponent || React.Component),
        ji(t, [
          {
            key: 'componentWillUnmount',
            value: function () {
              this.unbindEventListeners()
            },
          },
          {
            key: 'render',
            value: function () {
              var e = this,
                t = this.props.rgb,
                r = Ai(
                  {
                    default: {
                      alpha: {
                        absolute: '0px 0px 0px 0px',
                        borderRadius: this.props.radius,
                      },
                      checkboard: {
                        absolute: '0px 0px 0px 0px',
                        overflow: 'hidden',
                        borderRadius: this.props.radius,
                      },
                      gradient: {
                        absolute: '0px 0px 0px 0px',
                        background:
                          'linear-gradient(to right, rgba(' +
                          t.r +
                          ',' +
                          t.g +
                          ',' +
                          t.b +
                          ', 0) 0%,\n           rgba(' +
                          t.r +
                          ',' +
                          t.g +
                          ',' +
                          t.b +
                          ', 1) 100%)',
                        boxShadow: this.props.shadow,
                        borderRadius: this.props.radius,
                      },
                      container: {
                        position: 'relative',
                        height: '100%',
                        margin: '0 3px',
                      },
                      pointer: { position: 'absolute', left: 100 * t.a + '%' },
                      slider: {
                        width: '4px',
                        borderRadius: '1px',
                        height: '8px',
                        boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
                        background: '#fff',
                        marginTop: '1px',
                        transform: 'translateX(-2px)',
                      },
                    },
                    vertical: {
                      gradient: {
                        background:
                          'linear-gradient(to bottom, rgba(' +
                          t.r +
                          ',' +
                          t.g +
                          ',' +
                          t.b +
                          ', 0) 0%,\n           rgba(' +
                          t.r +
                          ',' +
                          t.g +
                          ',' +
                          t.b +
                          ', 1) 100%)',
                      },
                      pointer: { left: 0, top: 100 * t.a + '%' },
                    },
                    overwrite: Fi({}, this.props.style),
                  },
                  {
                    vertical: 'vertical' === this.props.direction,
                    overwrite: !0,
                  }
                )
              return React.createElement(
                'div',
                { style: r.alpha },
                React.createElement(
                  'div',
                  { style: r.checkboard },
                  React.createElement(Ii, { renderers: this.props.renderers })
                ),
                React.createElement('div', { style: r.gradient }),
                React.createElement(
                  'div',
                  {
                    style: r.container,
                    ref: function (t) {
                      return (e.container = t)
                    },
                    onMouseDown: this.handleMouseDown,
                    onTouchMove: this.handleChange,
                    onTouchStart: this.handleChange,
                  },
                  React.createElement(
                    'div',
                    { style: r.pointer },
                    this.props.pointer
                      ? React.createElement(this.props.pointer, this.props)
                      : React.createElement('div', { style: r.slider })
                  )
                )
              )
            },
          },
        ]),
        t
      )
    })(),
    Li = (function () {
      function e(e, t) {
        for (var r = 0; r < t.length; r++) {
          var n = t[r]
          ;(n.enumerable = n.enumerable || !1),
            (n.configurable = !0),
            'value' in n && (n.writable = !0),
            Object.defineProperty(e, n.key, n)
        }
      }
      return function (t, r, n) {
        return r && e(t.prototype, r), n && e(t, n), t
      }
    })()
  var Bi = [38, 40],
    zi = 1,
    Ui = (function (e) {
      function t(e) {
        !(function (e, t) {
          if (!(e instanceof t))
            throw new TypeError('Cannot call a class as a function')
        })(this, t)
        var r = (function (e, t) {
          if (!e)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            )
          return !t || ('object' != typeof t && 'function' != typeof t) ? e : t
        })(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this))
        return (
          (r.handleBlur = function () {
            r.state.blurValue &&
              r.setState({ value: r.state.blurValue, blurValue: null })
          }),
          (r.handleChange = function (e) {
            r.setUpdatedValue(e.target.value, e)
          }),
          (r.handleKeyDown = function (e) {
            var t,
              n = (function (e) {
                return Number(String(e).replace(/%/g, ''))
              })(e.target.value)
            if (!isNaN(n) && ((t = e.keyCode), Bi.indexOf(t) > -1)) {
              var i = r.getArrowOffset(),
                a = 38 === e.keyCode ? n + i : n - i
              r.setUpdatedValue(a, e)
            }
          }),
          (r.handleDrag = function (e) {
            if (r.props.dragLabel) {
              var t = Math.round(r.props.value + e.movementX)
              t >= 0 &&
                t <= r.props.dragMax &&
                r.props.onChange &&
                r.props.onChange(r.getValueObjectWithLabel(t), e)
            }
          }),
          (r.handleMouseDown = function (e) {
            r.props.dragLabel &&
              (e.preventDefault(),
              r.handleDrag(e),
              window.addEventListener('mousemove', r.handleDrag),
              window.addEventListener('mouseup', r.handleMouseUp))
          }),
          (r.handleMouseUp = function () {
            r.unbindEventListeners()
          }),
          (r.unbindEventListeners = function () {
            window.removeEventListener('mousemove', r.handleDrag),
              window.removeEventListener('mouseup', r.handleMouseUp)
          }),
          (r.state = {
            value: String(e.value).toUpperCase(),
            blurValue: String(e.value).toUpperCase(),
          }),
          (r.inputId = 'rc-editable-input-' + zi++),
          r
        )
      }
      return (
        (function (e, t) {
          if ('function' != typeof t && null !== t)
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof t
            )
          ;(e.prototype = Object.create(t && t.prototype, {
            constructor: {
              value: e,
              enumerable: !1,
              writable: !0,
              configurable: !0,
            },
          })),
            t &&
              (Object.setPrototypeOf
                ? Object.setPrototypeOf(e, t)
                : (e.__proto__ = t))
        })(t, React.PureComponent || React.Component),
        Li(t, [
          {
            key: 'componentDidUpdate',
            value: function (e, t) {
              this.props.value === this.state.value ||
                (e.value === this.props.value &&
                  t.value === this.state.value) ||
                (this.input === document.activeElement
                  ? this.setState({
                      blurValue: String(this.props.value).toUpperCase(),
                    })
                  : this.setState({
                      value: String(this.props.value).toUpperCase(),
                      blurValue:
                        !this.state.blurValue &&
                        String(this.props.value).toUpperCase(),
                    }))
            },
          },
          {
            key: 'componentWillUnmount',
            value: function () {
              this.unbindEventListeners()
            },
          },
          {
            key: 'getValueObjectWithLabel',
            value: function (e) {
              return (function (e, t, r) {
                return (
                  t in e
                    ? Object.defineProperty(e, t, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                      })
                    : (e[t] = r),
                  e
                )
              })({}, this.props.label, e)
            },
          },
          {
            key: 'getArrowOffset',
            value: function () {
              return this.props.arrowOffset || 1
            },
          },
          {
            key: 'setUpdatedValue',
            value: function (e, t) {
              var r = this.props.label ? this.getValueObjectWithLabel(e) : e
              this.props.onChange && this.props.onChange(r, t),
                this.setState({ value: e })
            },
          },
          {
            key: 'render',
            value: function () {
              var e = this,
                t = Ai(
                  {
                    default: { wrap: { position: 'relative' } },
                    'user-override': {
                      wrap:
                        this.props.style && this.props.style.wrap
                          ? this.props.style.wrap
                          : {},
                      input:
                        this.props.style && this.props.style.input
                          ? this.props.style.input
                          : {},
                      label:
                        this.props.style && this.props.style.label
                          ? this.props.style.label
                          : {},
                    },
                    'dragLabel-true': { label: { cursor: 'ew-resize' } },
                  },
                  { 'user-override': !0 },
                  this.props
                )
              return React.createElement(
                'div',
                { style: t.wrap },
                React.createElement('input', {
                  id: this.inputId,
                  style: t.input,
                  ref: function (t) {
                    return (e.input = t)
                  },
                  value: this.state.value,
                  onKeyDown: this.handleKeyDown,
                  onChange: this.handleChange,
                  onBlur: this.handleBlur,
                  placeholder: this.props.placeholder,
                  spellCheck: 'false',
                }),
                this.props.label && !this.props.hideLabel
                  ? React.createElement(
                      'label',
                      {
                        htmlFor: this.inputId,
                        style: t.label,
                        onMouseDown: this.handleMouseDown,
                      },
                      this.props.label
                    )
                  : null
              )
            },
          },
        ]),
        t
      )
    })(),
    Wi = function (e, t, r, n) {
      var i = n.clientWidth,
        a = n.clientHeight,
        s = 'number' == typeof e.pageX ? e.pageX : e.touches[0].pageX,
        o = 'number' == typeof e.pageY ? e.pageY : e.touches[0].pageY,
        l = s - (n.getBoundingClientRect().left + window.pageXOffset),
        c = o - (n.getBoundingClientRect().top + window.pageYOffset)
      if ('vertical' === t) {
        var u = void 0
        if (c < 0) u = 359
        else if (c > a) u = 0
        else {
          u = (360 * ((-100 * c) / a + 100)) / 100
        }
        if (r.h !== u) return { h: u, s: r.s, l: r.l, a: r.a, source: 'hsl' }
      } else {
        var p = void 0
        if (l < 0) p = 0
        else if (l > i) p = 359
        else {
          p = (360 * ((100 * l) / i)) / 100
        }
        if (r.h !== p) return { h: p, s: r.s, l: r.l, a: r.a, source: 'hsl' }
      }
      return null
    },
    Hi = (function () {
      function e(e, t) {
        for (var r = 0; r < t.length; r++) {
          var n = t[r]
          ;(n.enumerable = n.enumerable || !1),
            (n.configurable = !0),
            'value' in n && (n.writable = !0),
            Object.defineProperty(e, n.key, n)
        }
      }
      return function (t, r, n) {
        return r && e(t.prototype, r), n && e(t, n), t
      }
    })()
  function Vi(e, t) {
    if (!(e instanceof t))
      throw new TypeError('Cannot call a class as a function')
  }
  function $i(e, t) {
    if (!e)
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      )
    return !t || ('object' != typeof t && 'function' != typeof t) ? e : t
  }
  var qi = (function (e) {
      function t() {
        var e, r, n
        Vi(this, t)
        for (var i = arguments.length, a = Array(i), s = 0; s < i; s++)
          a[s] = arguments[s]
        return (
          (r = n =
            $i(
              this,
              (e = t.__proto__ || Object.getPrototypeOf(t)).call.apply(
                e,
                [this].concat(a)
              )
            )),
          (n.handleChange = function (e) {
            var t = Wi(e, n.props.direction, n.props.hsl, n.container)
            t && 'function' == typeof n.props.onChange && n.props.onChange(t, e)
          }),
          (n.handleMouseDown = function (e) {
            n.handleChange(e),
              window.addEventListener('mousemove', n.handleChange),
              window.addEventListener('mouseup', n.handleMouseUp)
          }),
          (n.handleMouseUp = function () {
            n.unbindEventListeners()
          }),
          $i(n, r)
        )
      }
      return (
        (function (e, t) {
          if ('function' != typeof t && null !== t)
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof t
            )
          ;(e.prototype = Object.create(t && t.prototype, {
            constructor: {
              value: e,
              enumerable: !1,
              writable: !0,
              configurable: !0,
            },
          })),
            t &&
              (Object.setPrototypeOf
                ? Object.setPrototypeOf(e, t)
                : (e.__proto__ = t))
        })(t, React.PureComponent || React.Component),
        Hi(t, [
          {
            key: 'componentWillUnmount',
            value: function () {
              this.unbindEventListeners()
            },
          },
          {
            key: 'unbindEventListeners',
            value: function () {
              window.removeEventListener('mousemove', this.handleChange),
                window.removeEventListener('mouseup', this.handleMouseUp)
            },
          },
          {
            key: 'render',
            value: function () {
              var e = this,
                t = this.props.direction,
                r = void 0 === t ? 'horizontal' : t,
                n = Ai(
                  {
                    default: {
                      hue: {
                        absolute: '0px 0px 0px 0px',
                        borderRadius: this.props.radius,
                        boxShadow: this.props.shadow,
                      },
                      container: {
                        padding: '0 2px',
                        position: 'relative',
                        height: '100%',
                        borderRadius: this.props.radius,
                      },
                      pointer: {
                        position: 'absolute',
                        left: (100 * this.props.hsl.h) / 360 + '%',
                      },
                      slider: {
                        marginTop: '1px',
                        width: '4px',
                        borderRadius: '1px',
                        height: '8px',
                        boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
                        background: '#fff',
                        transform: 'translateX(-2px)',
                      },
                    },
                    vertical: {
                      pointer: {
                        left: '0px',
                        top: (-100 * this.props.hsl.h) / 360 + 100 + '%',
                      },
                    },
                  },
                  { vertical: 'vertical' === r }
                )
              return React.createElement(
                'div',
                { style: n.hue },
                React.createElement(
                  'div',
                  {
                    className: 'hue-' + r,
                    style: n.container,
                    ref: function (t) {
                      return (e.container = t)
                    },
                    onMouseDown: this.handleMouseDown,
                    onTouchMove: this.handleChange,
                    onTouchStart: this.handleChange,
                  },
                  React.createElement(
                    'style',
                    null,
                    '\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          '
                  ),
                  React.createElement(
                    'div',
                    { style: n.pointer },
                    this.props.pointer
                      ? React.createElement(this.props.pointer, this.props)
                      : React.createElement('div', { style: n.slider })
                  )
                )
              )
            },
          },
        ]),
        t
      )
    })(),
    Ki = 'function' == typeof Symbol && Symbol.for,
    Gi = Ki ? Symbol.for('react.element') : 60103,
    Xi = Ki ? Symbol.for('react.portal') : 60106,
    Yi = Ki ? Symbol.for('react.fragment') : 60107,
    Ji = Ki ? Symbol.for('react.strict_mode') : 60108,
    Qi = Ki ? Symbol.for('react.profiler') : 60114,
    Zi = Ki ? Symbol.for('react.provider') : 60109,
    ea = Ki ? Symbol.for('react.context') : 60110,
    ta = Ki ? Symbol.for('react.async_mode') : 60111,
    ra = Ki ? Symbol.for('react.concurrent_mode') : 60111,
    na = Ki ? Symbol.for('react.forward_ref') : 60112,
    ia = Ki ? Symbol.for('react.suspense') : 60113,
    aa = Ki ? Symbol.for('react.suspense_list') : 60120,
    sa = Ki ? Symbol.for('react.memo') : 60115,
    oa = Ki ? Symbol.for('react.lazy') : 60116,
    la = Ki ? Symbol.for('react.block') : 60121,
    ca = Ki ? Symbol.for('react.fundamental') : 60117,
    ua = Ki ? Symbol.for('react.responder') : 60118,
    pa = Ki ? Symbol.for('react.scope') : 60119
  /** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */ function ha(e) {
    if ('object' == typeof e && null !== e) {
      var t = e.$$typeof
      switch (t) {
        case Gi:
          switch ((e = e.type)) {
            case ta:
            case ra:
            case Yi:
            case Qi:
            case Ji:
            case ia:
              return e
            default:
              switch ((e = e && e.$$typeof)) {
                case ea:
                case na:
                case oa:
                case sa:
                case Zi:
                  return e
                default:
                  return t
              }
          }
        case Xi:
          return t
      }
    }
  }
  function da(e) {
    return ha(e) === ra
  }
  var fa = {
      AsyncMode: ta,
      ConcurrentMode: ra,
      ContextConsumer: ea,
      ContextProvider: Zi,
      Element: Gi,
      ForwardRef: na,
      Fragment: Yi,
      Lazy: oa,
      Memo: sa,
      Portal: Xi,
      Profiler: Qi,
      StrictMode: Ji,
      Suspense: ia,
      isAsyncMode: function (e) {
        return da(e) || ha(e) === ta
      },
      isConcurrentMode: da,
      isContextConsumer: function (e) {
        return ha(e) === ea
      },
      isContextProvider: function (e) {
        return ha(e) === Zi
      },
      isElement: function (e) {
        return 'object' == typeof e && null !== e && e.$$typeof === Gi
      },
      isForwardRef: function (e) {
        return ha(e) === na
      },
      isFragment: function (e) {
        return ha(e) === Yi
      },
      isLazy: function (e) {
        return ha(e) === oa
      },
      isMemo: function (e) {
        return ha(e) === sa
      },
      isPortal: function (e) {
        return ha(e) === Xi
      },
      isProfiler: function (e) {
        return ha(e) === Qi
      },
      isStrictMode: function (e) {
        return ha(e) === Ji
      },
      isSuspense: function (e) {
        return ha(e) === ia
      },
      isValidElementType: function (e) {
        return (
          'string' == typeof e ||
          'function' == typeof e ||
          e === Yi ||
          e === ra ||
          e === Qi ||
          e === Ji ||
          e === ia ||
          e === aa ||
          ('object' == typeof e &&
            null !== e &&
            (e.$$typeof === oa ||
              e.$$typeof === sa ||
              e.$$typeof === Zi ||
              e.$$typeof === ea ||
              e.$$typeof === na ||
              e.$$typeof === ca ||
              e.$$typeof === ua ||
              e.$$typeof === pa ||
              e.$$typeof === la))
        )
      },
      typeOf: ha,
    },
    ma = W(function (e, t) {
      'production' !== process.env.NODE_ENV &&
        (function () {
          var e = 'function' == typeof Symbol && Symbol.for,
            r = e ? Symbol.for('react.element') : 60103,
            n = e ? Symbol.for('react.portal') : 60106,
            i = e ? Symbol.for('react.fragment') : 60107,
            a = e ? Symbol.for('react.strict_mode') : 60108,
            s = e ? Symbol.for('react.profiler') : 60114,
            o = e ? Symbol.for('react.provider') : 60109,
            l = e ? Symbol.for('react.context') : 60110,
            c = e ? Symbol.for('react.async_mode') : 60111,
            u = e ? Symbol.for('react.concurrent_mode') : 60111,
            p = e ? Symbol.for('react.forward_ref') : 60112,
            h = e ? Symbol.for('react.suspense') : 60113,
            d = e ? Symbol.for('react.suspense_list') : 60120,
            f = e ? Symbol.for('react.memo') : 60115,
            m = e ? Symbol.for('react.lazy') : 60116,
            y = e ? Symbol.for('react.block') : 60121,
            g = e ? Symbol.for('react.fundamental') : 60117,
            b = e ? Symbol.for('react.responder') : 60118,
            v = e ? Symbol.for('react.scope') : 60119
          function x(e) {
            if ('object' == typeof e && null !== e) {
              var t = e.$$typeof
              switch (t) {
                case r:
                  var d = e.type
                  switch (d) {
                    case c:
                    case u:
                    case i:
                    case s:
                    case a:
                    case h:
                      return d
                    default:
                      var y = d && d.$$typeof
                      switch (y) {
                        case l:
                        case p:
                        case m:
                        case f:
                        case o:
                          return y
                        default:
                          return t
                      }
                  }
                case n:
                  return t
              }
            }
          }
          var w = c,
            E = u,
            P = l,
            S = o,
            T = r,
            C = p,
            A = i,
            R = m,
            k = f,
            N = n,
            O = s,
            I = a,
            F = h,
            j = !1
          function _(e) {
            return x(e) === u
          }
          ;(t.AsyncMode = w),
            (t.ConcurrentMode = E),
            (t.ContextConsumer = P),
            (t.ContextProvider = S),
            (t.Element = T),
            (t.ForwardRef = C),
            (t.Fragment = A),
            (t.Lazy = R),
            (t.Memo = k),
            (t.Portal = N),
            (t.Profiler = O),
            (t.StrictMode = I),
            (t.Suspense = F),
            (t.isAsyncMode = function (e) {
              return (
                j ||
                  ((j = !0),
                  console.warn(
                    'The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.'
                  )),
                _(e) || x(e) === c
              )
            }),
            (t.isConcurrentMode = _),
            (t.isContextConsumer = function (e) {
              return x(e) === l
            }),
            (t.isContextProvider = function (e) {
              return x(e) === o
            }),
            (t.isElement = function (e) {
              return 'object' == typeof e && null !== e && e.$$typeof === r
            }),
            (t.isForwardRef = function (e) {
              return x(e) === p
            }),
            (t.isFragment = function (e) {
              return x(e) === i
            }),
            (t.isLazy = function (e) {
              return x(e) === m
            }),
            (t.isMemo = function (e) {
              return x(e) === f
            }),
            (t.isPortal = function (e) {
              return x(e) === n
            }),
            (t.isProfiler = function (e) {
              return x(e) === s
            }),
            (t.isStrictMode = function (e) {
              return x(e) === a
            }),
            (t.isSuspense = function (e) {
              return x(e) === h
            }),
            (t.isValidElementType = function (e) {
              return (
                'string' == typeof e ||
                'function' == typeof e ||
                e === i ||
                e === u ||
                e === s ||
                e === a ||
                e === h ||
                e === d ||
                ('object' == typeof e &&
                  null !== e &&
                  (e.$$typeof === m ||
                    e.$$typeof === f ||
                    e.$$typeof === o ||
                    e.$$typeof === l ||
                    e.$$typeof === p ||
                    e.$$typeof === g ||
                    e.$$typeof === b ||
                    e.$$typeof === v ||
                    e.$$typeof === y))
              )
            }),
            (t.typeOf = x)
        })()
    }),
    ya = W(function (e) {
      'production' === process.env.NODE_ENV
        ? (e.exports = fa)
        : (e.exports = ma)
    }),
    ga = Function.call.bind(Object.prototype.hasOwnProperty),
    ba = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',
    va = function () {}
  if ('production' !== process.env.NODE_ENV) {
    var xa = ba,
      wa = {},
      Ea = ga
    va = function (e) {
      var t = 'Warning: ' + e
      'undefined' != typeof console && console.error(t)
      try {
        throw new Error(t)
      } catch (e) {}
    }
  }
  function Pa(e, t, r, n, i) {
    if ('production' !== process.env.NODE_ENV)
      for (var a in e)
        if (Ea(e, a)) {
          var s
          try {
            if ('function' != typeof e[a]) {
              var o = Error(
                (n || 'React class') +
                  ': ' +
                  r +
                  ' type `' +
                  a +
                  '` is invalid; it must be a function, usually from the `prop-types` package, but received `' +
                  typeof e[a] +
                  '`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
              )
              throw ((o.name = 'Invariant Violation'), o)
            }
            s = e[a](t, a, n, r, null, xa)
          } catch (e) {
            s = e
          }
          if (
            (!s ||
              s instanceof Error ||
              va(
                (n || 'React class') +
                  ': type specification of ' +
                  r +
                  ' `' +
                  a +
                  '` is invalid; the type checker function must return `null` or an `Error` but returned a ' +
                  typeof s +
                  '. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).'
              ),
            s instanceof Error && !(s.message in wa))
          ) {
            wa[s.message] = !0
            var l = i ? i() : ''
            va('Failed ' + r + ' type: ' + s.message + (null != l ? l : ''))
          }
        }
  }
  Pa.resetWarningCache = function () {
    'production' !== process.env.NODE_ENV && (wa = {})
  }
  var Sa = Pa,
    Ta = function () {}
  function Ca() {
    return null
  }
  'production' !== process.env.NODE_ENV &&
    (Ta = function (e) {
      var t = 'Warning: ' + e
      'undefined' != typeof console && console.error(t)
      try {
        throw new Error(t)
      } catch (e) {}
    })
  function Aa() {}
  function Ra() {}
  Ra.resetWarningCache = Aa
  var ka = function (e, t) {
      var r = 'function' == typeof Symbol && Symbol.iterator
      var n = '<<anonymous>>',
        i = {
          array: l('array'),
          bigint: l('bigint'),
          bool: l('boolean'),
          func: l('function'),
          number: l('number'),
          object: l('object'),
          string: l('string'),
          symbol: l('symbol'),
          any: o(Ca),
          arrayOf: function (e) {
            return o(function (t, r, n, i, a) {
              if ('function' != typeof e)
                return new s(
                  'Property `' +
                    a +
                    '` of component `' +
                    n +
                    '` has invalid PropType notation inside arrayOf.'
                )
              var o = t[r]
              if (!Array.isArray(o))
                return new s(
                  'Invalid ' +
                    i +
                    ' `' +
                    a +
                    '` of type `' +
                    p(o) +
                    '` supplied to `' +
                    n +
                    '`, expected an array.'
                )
              for (var l = 0; l < o.length; l++) {
                var c = e(o, l, n, i, a + '[' + l + ']', ba)
                if (c instanceof Error) return c
              }
              return null
            })
          },
          element: o(function (t, r, n, i, a) {
            var o = t[r]
            return e(o)
              ? null
              : new s(
                  'Invalid ' +
                    i +
                    ' `' +
                    a +
                    '` of type `' +
                    p(o) +
                    '` supplied to `' +
                    n +
                    '`, expected a single ReactElement.'
                )
          }),
          elementType: o(function (e, t, r, n, i) {
            var a = e[t]
            return ya.isValidElementType(a)
              ? null
              : new s(
                  'Invalid ' +
                    n +
                    ' `' +
                    i +
                    '` of type `' +
                    p(a) +
                    '` supplied to `' +
                    r +
                    '`, expected a single ReactElement type.'
                )
          }),
          instanceOf: function (e) {
            return o(function (t, r, i, a, o) {
              if (!(t[r] instanceof e)) {
                var l = e.name || n
                return new s(
                  'Invalid ' +
                    a +
                    ' `' +
                    o +
                    '` of type `' +
                    (((c = t[r]).constructor && c.constructor.name
                      ? c.constructor.name
                      : n) +
                      '` supplied to `') +
                    i +
                    '`, expected instance of `' +
                    l +
                    '`.'
                )
              }
              var c
              return null
            })
          },
          node: o(function (e, t, r, n, i) {
            return u(e[t])
              ? null
              : new s(
                  'Invalid ' +
                    n +
                    ' `' +
                    i +
                    '` supplied to `' +
                    r +
                    '`, expected a ReactNode.'
                )
          }),
          objectOf: function (e) {
            return o(function (t, r, n, i, a) {
              if ('function' != typeof e)
                return new s(
                  'Property `' +
                    a +
                    '` of component `' +
                    n +
                    '` has invalid PropType notation inside objectOf.'
                )
              var o = t[r],
                l = p(o)
              if ('object' !== l)
                return new s(
                  'Invalid ' +
                    i +
                    ' `' +
                    a +
                    '` of type `' +
                    l +
                    '` supplied to `' +
                    n +
                    '`, expected an object.'
                )
              for (var c in o)
                if (ga(o, c)) {
                  var u = e(o, c, n, i, a + '.' + c, ba)
                  if (u instanceof Error) return u
                }
              return null
            })
          },
          oneOf: function (e) {
            if (!Array.isArray(e))
              return (
                'production' !== process.env.NODE_ENV &&
                  Ta(
                    arguments.length > 1
                      ? 'Invalid arguments supplied to oneOf, expected an array, got ' +
                          arguments.length +
                          ' arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
                      : 'Invalid argument supplied to oneOf, expected an array.'
                  ),
                Ca
              )
            function t(t, r, n, i, o) {
              for (var l = t[r], c = 0; c < e.length; c++)
                if (a(l, e[c])) return null
              var u = JSON.stringify(e, function (e, t) {
                return 'symbol' === h(t) ? String(t) : t
              })
              return new s(
                'Invalid ' +
                  i +
                  ' `' +
                  o +
                  '` of value `' +
                  String(l) +
                  '` supplied to `' +
                  n +
                  '`, expected one of ' +
                  u +
                  '.'
              )
            }
            return o(t)
          },
          oneOfType: function (e) {
            if (!Array.isArray(e))
              return (
                'production' !== process.env.NODE_ENV &&
                  Ta(
                    'Invalid argument supplied to oneOfType, expected an instance of array.'
                  ),
                Ca
              )
            for (var t = 0; t < e.length; t++) {
              var r = e[t]
              if ('function' != typeof r)
                return (
                  Ta(
                    'Invalid argument supplied to oneOfType. Expected an array of check functions, but received ' +
                      d(r) +
                      ' at index ' +
                      t +
                      '.'
                  ),
                  Ca
                )
            }
            return o(function (t, r, n, i, a) {
              for (var o = [], l = 0; l < e.length; l++) {
                var c = (0, e[l])(t, r, n, i, a, ba)
                if (null == c) return null
                c.data &&
                  ga(c.data, 'expectedType') &&
                  o.push(c.data.expectedType)
              }
              return new s(
                'Invalid ' +
                  i +
                  ' `' +
                  a +
                  '` supplied to `' +
                  n +
                  '`' +
                  (o.length > 0
                    ? ', expected one of type [' + o.join(', ') + ']'
                    : '') +
                  '.'
              )
            })
          },
          shape: function (e) {
            return o(function (t, r, n, i, a) {
              var o = t[r],
                l = p(o)
              if ('object' !== l)
                return new s(
                  'Invalid ' +
                    i +
                    ' `' +
                    a +
                    '` of type `' +
                    l +
                    '` supplied to `' +
                    n +
                    '`, expected `object`.'
                )
              for (var u in e) {
                var d = e[u]
                if ('function' != typeof d) return c(n, i, a, u, h(d))
                var f = d(o, u, n, i, a + '.' + u, ba)
                if (f) return f
              }
              return null
            })
          },
          exact: function (e) {
            return o(function (t, r, n, i, a) {
              var o = t[r],
                l = p(o)
              if ('object' !== l)
                return new s(
                  'Invalid ' +
                    i +
                    ' `' +
                    a +
                    '` of type `' +
                    l +
                    '` supplied to `' +
                    n +
                    '`, expected `object`.'
                )
              var u = bi({}, t[r], e)
              for (var d in u) {
                var f = e[d]
                if (ga(e, d) && 'function' != typeof f)
                  return c(n, i, a, d, h(f))
                if (!f)
                  return new s(
                    'Invalid ' +
                      i +
                      ' `' +
                      a +
                      '` key `' +
                      d +
                      '` supplied to `' +
                      n +
                      '`.\nBad object: ' +
                      JSON.stringify(t[r], null, '  ') +
                      '\nValid keys: ' +
                      JSON.stringify(Object.keys(e), null, '  ')
                  )
                var m = f(o, d, n, i, a + '.' + d, ba)
                if (m) return m
              }
              return null
            })
          },
        }
      function a(e, t) {
        return e === t ? 0 !== e || 1 / e == 1 / t : e != e && t != t
      }
      function s(e, t) {
        ;(this.message = e),
          (this.data = t && 'object' == typeof t ? t : {}),
          (this.stack = '')
      }
      function o(e) {
        if ('production' !== process.env.NODE_ENV)
          var r = {},
            i = 0
        function a(a, o, l, c, u, p, h) {
          if (((c = c || n), (p = p || l), h !== ba)) {
            if (t) {
              var d = new Error(
                'Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types'
              )
              throw ((d.name = 'Invariant Violation'), d)
            }
            if (
              'production' !== process.env.NODE_ENV &&
              'undefined' != typeof console
            ) {
              var f = c + ':' + l
              !r[f] &&
                i < 3 &&
                (Ta(
                  'You are manually calling a React.PropTypes validation function for the `' +
                    p +
                    '` prop on `' +
                    c +
                    '`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.'
                ),
                (r[f] = !0),
                i++)
            }
          }
          return null == o[l]
            ? a
              ? null === o[l]
                ? new s(
                    'The ' +
                      u +
                      ' `' +
                      p +
                      '` is marked as required in `' +
                      c +
                      '`, but its value is `null`.'
                  )
                : new s(
                    'The ' +
                      u +
                      ' `' +
                      p +
                      '` is marked as required in `' +
                      c +
                      '`, but its value is `undefined`.'
                  )
              : null
            : e(o, l, c, u, p)
        }
        var o = a.bind(null, !1)
        return (o.isRequired = a.bind(null, !0)), o
      }
      function l(e) {
        return o(function (t, r, n, i, a, o) {
          var l = t[r]
          return p(l) !== e
            ? new s(
                'Invalid ' +
                  i +
                  ' `' +
                  a +
                  '` of type `' +
                  h(l) +
                  '` supplied to `' +
                  n +
                  '`, expected `' +
                  e +
                  '`.',
                { expectedType: e }
              )
            : null
        })
      }
      function c(e, t, r, n, i) {
        return new s(
          (e || 'React class') +
            ': ' +
            t +
            ' type `' +
            r +
            '.' +
            n +
            '` is invalid; it must be a function, usually from the `prop-types` package, but received `' +
            i +
            '`.'
        )
      }
      function u(t) {
        switch (typeof t) {
          case 'number':
          case 'string':
          case 'undefined':
            return !0
          case 'boolean':
            return !t
          case 'object':
            if (Array.isArray(t)) return t.every(u)
            if (null === t || e(t)) return !0
            var n = (function (e) {
              var t = e && ((r && e[r]) || e['@@iterator'])
              if ('function' == typeof t) return t
            })(t)
            if (!n) return !1
            var i,
              a = n.call(t)
            if (n !== t.entries) {
              for (; !(i = a.next()).done; ) if (!u(i.value)) return !1
            } else
              for (; !(i = a.next()).done; ) {
                var s = i.value
                if (s && !u(s[1])) return !1
              }
            return !0
          default:
            return !1
        }
      }
      function p(e) {
        var t = typeof e
        return Array.isArray(e)
          ? 'array'
          : e instanceof RegExp
          ? 'object'
          : (function (e, t) {
              return (
                'symbol' === e ||
                (!!t &&
                  ('Symbol' === t['@@toStringTag'] ||
                    ('function' == typeof Symbol && t instanceof Symbol)))
              )
            })(t, e)
          ? 'symbol'
          : t
      }
      function h(e) {
        if (null == e) return '' + e
        var t = p(e)
        if ('object' === t) {
          if (e instanceof Date) return 'date'
          if (e instanceof RegExp) return 'regexp'
        }
        return t
      }
      function d(e) {
        var t = h(e)
        switch (t) {
          case 'array':
          case 'object':
            return 'an ' + t
          case 'boolean':
          case 'date':
          case 'regexp':
            return 'a ' + t
          default:
            return t
        }
      }
      return (
        (s.prototype = Error.prototype),
        (i.checkPropTypes = Sa),
        (i.resetWarningCache = Sa.resetWarningCache),
        (i.PropTypes = i),
        i
      )
    },
    Na = W(function (e) {
      if ('production' !== process.env.NODE_ENV) {
        var t = ya
        e.exports = ka(t.isElement, !0)
      } else
        e.exports = (function () {
          function e(e, t, r, n, i, a) {
            if (a !== ba) {
              var s = new Error(
                'Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types'
              )
              throw ((s.name = 'Invariant Violation'), s)
            }
          }
          function t() {
            return e
          }
          e.isRequired = e
          var r = {
            array: e,
            bigint: e,
            bool: e,
            func: e,
            number: e,
            object: e,
            string: e,
            symbol: e,
            any: e,
            arrayOf: t,
            element: e,
            elementType: e,
            instanceOf: t,
            node: e,
            objectOf: t,
            oneOf: t,
            oneOfType: t,
            shape: t,
            exact: t,
            checkPropTypes: Ra,
            resetWarningCache: Aa,
          }
          return (r.PropTypes = r), r
        })()
    })
  function Oa(e, t) {
    return e === t || (e != e && t != t)
  }
  function Ia(e, t) {
    for (var r = e.length; r--; ) if (Oa(e[r][0], t)) return r
    return -1
  }
  var Fa = Array.prototype.splice
  function ja(e) {
    var t = -1,
      r = null == e ? 0 : e.length
    for (this.clear(); ++t < r; ) {
      var n = e[t]
      this.set(n[0], n[1])
    }
  }
  ;(ja.prototype.clear = function () {
    ;(this.__data__ = []), (this.size = 0)
  }),
    (ja.prototype.delete = function (e) {
      var t = this.__data__,
        r = Ia(t, e)
      return (
        !(r < 0) &&
        (r == t.length - 1 ? t.pop() : Fa.call(t, r, 1), --this.size, !0)
      )
    }),
    (ja.prototype.get = function (e) {
      var t = this.__data__,
        r = Ia(t, e)
      return r < 0 ? void 0 : t[r][1]
    }),
    (ja.prototype.has = function (e) {
      return Ia(this.__data__, e) > -1
    }),
    (ja.prototype.set = function (e, t) {
      var r = this.__data__,
        n = Ia(r, e)
      return n < 0 ? (++this.size, r.push([e, t])) : (r[n][1] = t), this
    })
  var _a =
      'object' == typeof global && global && global.Object === Object && global,
    Ma = 'object' == typeof self && self && self.Object === Object && self,
    Da = _a || Ma || Function('return this')(),
    La = Da.Symbol,
    Ba = Object.prototype,
    za = Ba.hasOwnProperty,
    Ua = Ba.toString,
    Wa = La ? La.toStringTag : void 0
  var Ha = Object.prototype.toString
  var Va = La ? La.toStringTag : void 0
  function $a(e) {
    return null == e
      ? void 0 === e
        ? '[object Undefined]'
        : '[object Null]'
      : Va && Va in Object(e)
      ? (function (e) {
          var t = za.call(e, Wa),
            r = e[Wa]
          try {
            e[Wa] = void 0
            var n = !0
          } catch (e) {}
          var i = Ua.call(e)
          return n && (t ? (e[Wa] = r) : delete e[Wa]), i
        })(e)
      : (function (e) {
          return Ha.call(e)
        })(e)
  }
  function qa(e) {
    var t = typeof e
    return null != e && ('object' == t || 'function' == t)
  }
  function Ka(e) {
    if (!qa(e)) return !1
    var t = $a(e)
    return (
      '[object Function]' == t ||
      '[object GeneratorFunction]' == t ||
      '[object AsyncFunction]' == t ||
      '[object Proxy]' == t
    )
  }
  var Ga = Da['__core-js_shared__'],
    Xa = (function () {
      var e = /[^.]+$/.exec((Ga && Ga.keys && Ga.keys.IE_PROTO) || '')
      return e ? 'Symbol(src)_1.' + e : ''
    })()
  var Ya = Function.prototype.toString
  function Ja(e) {
    if (null != e) {
      try {
        return Ya.call(e)
      } catch (e) {}
      try {
        return e + ''
      } catch (e) {}
    }
    return ''
  }
  var Qa = /^\[object .+?Constructor\]$/,
    Za = Function.prototype,
    es = Object.prototype,
    ts = Za.toString,
    rs = es.hasOwnProperty,
    ns = RegExp(
      '^' +
        ts
          .call(rs)
          .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
          .replace(
            /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
            '$1.*?'
          ) +
        '$'
    )
  function is(e) {
    return (
      !(!qa(e) || ((t = e), Xa && Xa in t)) && (Ka(e) ? ns : Qa).test(Ja(e))
    )
    var t
  }
  function as(e, t) {
    var r = (function (e, t) {
      return null == e ? void 0 : e[t]
    })(e, t)
    return is(r) ? r : void 0
  }
  var ss = as(Da, 'Map'),
    os = as(Object, 'create')
  var ls = Object.prototype.hasOwnProperty
  var cs = Object.prototype.hasOwnProperty
  function us(e) {
    var t = -1,
      r = null == e ? 0 : e.length
    for (this.clear(); ++t < r; ) {
      var n = e[t]
      this.set(n[0], n[1])
    }
  }
  function ps(e, t) {
    var r = e.__data__
    return (function (e) {
      var t = typeof e
      return 'string' == t || 'number' == t || 'symbol' == t || 'boolean' == t
        ? '__proto__' !== e
        : null === e
    })(t)
      ? r['string' == typeof t ? 'string' : 'hash']
      : r.map
  }
  function hs(e) {
    var t = -1,
      r = null == e ? 0 : e.length
    for (this.clear(); ++t < r; ) {
      var n = e[t]
      this.set(n[0], n[1])
    }
  }
  ;(us.prototype.clear = function () {
    ;(this.__data__ = os ? os(null) : {}), (this.size = 0)
  }),
    (us.prototype.delete = function (e) {
      var t = this.has(e) && delete this.__data__[e]
      return (this.size -= t ? 1 : 0), t
    }),
    (us.prototype.get = function (e) {
      var t = this.__data__
      if (os) {
        var r = t[e]
        return '__lodash_hash_undefined__' === r ? void 0 : r
      }
      return ls.call(t, e) ? t[e] : void 0
    }),
    (us.prototype.has = function (e) {
      var t = this.__data__
      return os ? void 0 !== t[e] : cs.call(t, e)
    }),
    (us.prototype.set = function (e, t) {
      var r = this.__data__
      return (
        (this.size += this.has(e) ? 0 : 1),
        (r[e] = os && void 0 === t ? '__lodash_hash_undefined__' : t),
        this
      )
    }),
    (hs.prototype.clear = function () {
      ;(this.size = 0),
        (this.__data__ = {
          hash: new us(),
          map: new (ss || ja)(),
          string: new us(),
        })
    }),
    (hs.prototype.delete = function (e) {
      var t = ps(this, e).delete(e)
      return (this.size -= t ? 1 : 0), t
    }),
    (hs.prototype.get = function (e) {
      return ps(this, e).get(e)
    }),
    (hs.prototype.has = function (e) {
      return ps(this, e).has(e)
    }),
    (hs.prototype.set = function (e, t) {
      var r = ps(this, e),
        n = r.size
      return r.set(e, t), (this.size += r.size == n ? 0 : 1), this
    })
  function ds(e) {
    var t = (this.__data__ = new ja(e))
    this.size = t.size
  }
  ;(ds.prototype.clear = function () {
    ;(this.__data__ = new ja()), (this.size = 0)
  }),
    (ds.prototype.delete = function (e) {
      var t = this.__data__,
        r = t.delete(e)
      return (this.size = t.size), r
    }),
    (ds.prototype.get = function (e) {
      return this.__data__.get(e)
    }),
    (ds.prototype.has = function (e) {
      return this.__data__.has(e)
    }),
    (ds.prototype.set = function (e, t) {
      var r = this.__data__
      if (r instanceof ja) {
        var n = r.__data__
        if (!ss || n.length < 199)
          return n.push([e, t]), (this.size = ++r.size), this
        r = this.__data__ = new hs(n)
      }
      return r.set(e, t), (this.size = r.size), this
    })
  var fs = (function () {
      try {
        var e = as(Object, 'defineProperty')
        return e({}, '', {}), e
      } catch (e) {}
    })(),
    ms = fs
  function ys(e, t, r) {
    '__proto__' == t && ms
      ? ms(e, t, { configurable: !0, enumerable: !0, value: r, writable: !0 })
      : (e[t] = r)
  }
  function gs(e, t, r) {
    ;((void 0 !== r && !Oa(e[t], r)) || (void 0 === r && !(t in e))) &&
      ys(e, t, r)
  }
  var bs,
    vs = function (e, t, r) {
      for (var n = -1, i = Object(e), a = r(e), s = a.length; s--; ) {
        var o = a[bs ? s : ++n]
        if (!1 === t(i[o], o, i)) break
      }
      return e
    },
    xs = vs,
    ws = 'object' == typeof e && e && !e.nodeType && e,
    Es =
      ws && 'object' == typeof module && module && !module.nodeType && module,
    Ps = Es && Es.exports === ws ? Da.Buffer : void 0,
    Ss = Ps ? Ps.allocUnsafe : void 0
  var Ts = Da.Uint8Array
  function Cs(e, t) {
    var r,
      n,
      i = t
        ? ((r = e.buffer),
          (n = new r.constructor(r.byteLength)),
          new Ts(n).set(new Ts(r)),
          n)
        : e.buffer
    return new e.constructor(i, e.byteOffset, e.length)
  }
  var As = Object.create,
    Rs = (function () {
      function e() {}
      return function (t) {
        if (!qa(t)) return {}
        if (As) return As(t)
        e.prototype = t
        var r = new e()
        return (e.prototype = void 0), r
      }
    })()
  function ks(e, t) {
    return function (r) {
      return e(t(r))
    }
  }
  var Ns = ks(Object.getPrototypeOf, Object),
    Os = Object.prototype
  function Is(e) {
    var t = e && e.constructor
    return e === (('function' == typeof t && t.prototype) || Os)
  }
  function Fs(e) {
    return null != e && 'object' == typeof e
  }
  function js(e) {
    return Fs(e) && '[object Arguments]' == $a(e)
  }
  var _s = Object.prototype,
    Ms = _s.hasOwnProperty,
    Ds = _s.propertyIsEnumerable,
    Ls = js(
      (function () {
        return arguments
      })()
    )
      ? js
      : function (e) {
          return Fs(e) && Ms.call(e, 'callee') && !Ds.call(e, 'callee')
        },
    Bs = Ls,
    zs = Array.isArray
  function Us(e) {
    return 'number' == typeof e && e > -1 && e % 1 == 0 && e <= 9007199254740991
  }
  function Ws(e) {
    return null != e && Us(e.length) && !Ka(e)
  }
  var Hs = 'object' == typeof e && e && !e.nodeType && e,
    Vs =
      Hs && 'object' == typeof module && module && !module.nodeType && module,
    $s = Vs && Vs.exports === Hs ? Da.Buffer : void 0,
    qs =
      ($s ? $s.isBuffer : void 0) ||
      function () {
        return !1
      },
    Ks = Function.prototype,
    Gs = Object.prototype,
    Xs = Ks.toString,
    Ys = Gs.hasOwnProperty,
    Js = Xs.call(Object)
  var Qs = {}
  ;(Qs['[object Float32Array]'] =
    Qs['[object Float64Array]'] =
    Qs['[object Int8Array]'] =
    Qs['[object Int16Array]'] =
    Qs['[object Int32Array]'] =
    Qs['[object Uint8Array]'] =
    Qs['[object Uint8ClampedArray]'] =
    Qs['[object Uint16Array]'] =
    Qs['[object Uint32Array]'] =
      !0),
    (Qs['[object Arguments]'] =
      Qs['[object Array]'] =
      Qs['[object ArrayBuffer]'] =
      Qs['[object Boolean]'] =
      Qs['[object DataView]'] =
      Qs['[object Date]'] =
      Qs['[object Error]'] =
      Qs['[object Function]'] =
      Qs['[object Map]'] =
      Qs['[object Number]'] =
      Qs['[object Object]'] =
      Qs['[object RegExp]'] =
      Qs['[object Set]'] =
      Qs['[object String]'] =
      Qs['[object WeakMap]'] =
        !1)
  var Zs,
    eo = 'object' == typeof e && e && !e.nodeType && e,
    to =
      eo && 'object' == typeof module && module && !module.nodeType && module,
    ro = to && to.exports === eo && _a.process,
    no = (function () {
      try {
        var e = to && to.require && to.require('util').types
        return e || (ro && ro.binding && ro.binding('util'))
      } catch (e) {}
    })(),
    io = no && no.isTypedArray,
    ao = io
      ? ((Zs = io),
        function (e) {
          return Zs(e)
        })
      : function (e) {
          return Fs(e) && Us(e.length) && !!Qs[$a(e)]
        }
  function so(e, t) {
    if (('constructor' !== t || 'function' != typeof e[t]) && '__proto__' != t)
      return e[t]
  }
  var oo = Object.prototype.hasOwnProperty
  function lo(e, t, r) {
    var n = e[t]
    ;(oo.call(e, t) && Oa(n, r) && (void 0 !== r || t in e)) || ys(e, t, r)
  }
  var co = /^(?:0|[1-9]\d*)$/
  function uo(e, t) {
    var r = typeof e
    return (
      !!(t = null == t ? 9007199254740991 : t) &&
      ('number' == r || ('symbol' != r && co.test(e))) &&
      e > -1 &&
      e % 1 == 0 &&
      e < t
    )
  }
  var po = Object.prototype.hasOwnProperty
  function ho(e, t) {
    var r = zs(e),
      n = !r && Bs(e),
      i = !r && !n && qs(e),
      a = !r && !n && !i && ao(e),
      s = r || n || i || a,
      o = s
        ? (function (e, t) {
            for (var r = -1, n = Array(e); ++r < e; ) n[r] = t(r)
            return n
          })(e.length, String)
        : [],
      l = o.length
    for (var c in e)
      (!t && !po.call(e, c)) ||
        (s &&
          ('length' == c ||
            (i && ('offset' == c || 'parent' == c)) ||
            (a && ('buffer' == c || 'byteLength' == c || 'byteOffset' == c)) ||
            uo(c, l))) ||
        o.push(c)
    return o
  }
  var fo = Object.prototype.hasOwnProperty
  function mo(e) {
    if (!qa(e))
      return (function (e) {
        var t = []
        if (null != e) for (var r in Object(e)) t.push(r)
        return t
      })(e)
    var t = Is(e),
      r = []
    for (var n in e) ('constructor' != n || (!t && fo.call(e, n))) && r.push(n)
    return r
  }
  function yo(e) {
    return Ws(e) ? ho(e, !0) : mo(e)
  }
  function go(e) {
    return (function (e, t, r, n) {
      var i = !r
      r || (r = {})
      for (var a = -1, s = t.length; ++a < s; ) {
        var o = t[a],
          l = n ? n(r[o], e[o], o, r, e) : void 0
        void 0 === l && (l = e[o]), i ? ys(r, o, l) : lo(r, o, l)
      }
      return r
    })(e, yo(e))
  }
  function bo(e, t, r, n, i, a, s) {
    var o = so(e, r),
      l = so(t, r),
      c = s.get(l)
    if (c) gs(e, r, c)
    else {
      var u = a ? a(o, l, r + '', e, t, s) : void 0,
        p = void 0 === u
      if (p) {
        var h = zs(l),
          d = !h && qs(l),
          f = !h && !d && ao(l)
        ;(u = l),
          h || d || f
            ? zs(o)
              ? (u = o)
              : !(function (e) {
                  return Fs(e) && Ws(e)
                })(o)
              ? d
                ? ((p = !1),
                  (u = (function (e, t) {
                    if (t) return e.slice()
                    var r = e.length,
                      n = Ss ? Ss(r) : new e.constructor(r)
                    return e.copy(n), n
                  })(l, !0)))
                : f
                ? ((p = !1), (u = Cs(l, !0)))
                : (u = [])
              : (u = (function (e, t) {
                  var r = -1,
                    n = e.length
                  for (t || (t = Array(n)); ++r < n; ) t[r] = e[r]
                  return t
                })(o))
            : (function (e) {
                if (!Fs(e) || '[object Object]' != $a(e)) return !1
                var t = Ns(e)
                if (null === t) return !0
                var r = Ys.call(t, 'constructor') && t.constructor
                return (
                  'function' == typeof r && r instanceof r && Xs.call(r) == Js
                )
              })(l) || Bs(l)
            ? ((u = o),
              Bs(o)
                ? (u = go(o))
                : (qa(o) && !Ka(o)) ||
                  (u = (function (e) {
                    return 'function' != typeof e.constructor || Is(e)
                      ? {}
                      : Rs(Ns(e))
                  })(l)))
            : (p = !1)
      }
      p && (s.set(l, u), i(u, l, n, a, s), s.delete(l)), gs(e, r, u)
    }
  }
  function vo(e, t, r, n, i) {
    e !== t &&
      xs(
        t,
        function (a, s) {
          if ((i || (i = new ds()), qa(a))) bo(e, t, s, r, vo, n, i)
          else {
            var o = n ? n(so(e, s), a, s + '', e, t, i) : void 0
            void 0 === o && (o = a), gs(e, s, o)
          }
        },
        yo
      )
  }
  function xo(e) {
    return e
  }
  function wo(e, t, r) {
    switch (r.length) {
      case 0:
        return e.call(t)
      case 1:
        return e.call(t, r[0])
      case 2:
        return e.call(t, r[0], r[1])
      case 3:
        return e.call(t, r[0], r[1], r[2])
    }
    return e.apply(t, r)
  }
  var Eo = Math.max
  function Po(e) {
    return function () {
      return e
    }
  }
  var So = ms
      ? function (e, t) {
          return ms(e, 'toString', {
            configurable: !0,
            enumerable: !1,
            value: Po(t),
            writable: !0,
          })
        }
      : xo,
    To = So,
    Co = Date.now
  var Ao = (function (e) {
      var t = 0,
        r = 0
      return function () {
        var n = Co(),
          i = 16 - (n - r)
        if (((r = n), i > 0)) {
          if (++t >= 800) return arguments[0]
        } else t = 0
        return e.apply(void 0, arguments)
      }
    })(To),
    Ro = Ao
  function ko(e, t) {
    return Ro(
      (function (e, t, r) {
        return (
          (t = Eo(void 0 === t ? e.length - 1 : t, 0)),
          function () {
            for (
              var n = arguments, i = -1, a = Eo(n.length - t, 0), s = Array(a);
              ++i < a;

            )
              s[i] = n[t + i]
            i = -1
            for (var o = Array(t + 1); ++i < t; ) o[i] = n[i]
            return (o[t] = r(s)), wo(e, this, o)
          }
        )
      })(e, t, xo),
      e + ''
    )
  }
  var No,
    Oo =
      ((No = function (e, t, r) {
        vo(e, t, r)
      }),
      ko(function (e, t) {
        var r = -1,
          n = t.length,
          i = n > 1 ? t[n - 1] : void 0,
          a = n > 2 ? t[2] : void 0
        for (
          i = No.length > 3 && 'function' == typeof i ? (n--, i) : void 0,
            a &&
              (function (e, t, r) {
                if (!qa(r)) return !1
                var n = typeof t
                return (
                  !!('number' == n
                    ? Ws(r) && uo(t, r.length)
                    : 'string' == n && (t in r)) && Oa(r[t], e)
                )
              })(t[0], t[1], a) &&
              ((i = n < 3 ? void 0 : i), (n = 1)),
            e = Object(e);
          ++r < n;

        ) {
          var s = t[r]
          s && No(e, s, r, i)
        }
        return e
      })),
    Io = Oo,
    Fo = function (e) {
      var t = e.zDepth,
        r = e.radius,
        n = e.background,
        i = e.children,
        a = e.styles,
        s = Ai(
          Io(
            {
              default: {
                wrap: { position: 'relative', display: 'inline-block' },
                content: { position: 'relative' },
                bg: {
                  absolute: '0px 0px 0px 0px',
                  boxShadow: '0 ' + t + 'px ' + 4 * t + 'px rgba(0,0,0,.24)',
                  borderRadius: r,
                  background: n,
                },
              },
              'zDepth-0': { bg: { boxShadow: 'none' } },
              'zDepth-1': {
                bg: {
                  boxShadow:
                    '0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)',
                },
              },
              'zDepth-2': {
                bg: {
                  boxShadow:
                    '0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)',
                },
              },
              'zDepth-3': {
                bg: {
                  boxShadow:
                    '0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)',
                },
              },
              'zDepth-4': {
                bg: {
                  boxShadow:
                    '0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)',
                },
              },
              'zDepth-5': {
                bg: {
                  boxShadow:
                    '0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)',
                },
              },
              square: { bg: { borderRadius: '0' } },
              circle: { bg: { borderRadius: '50%' } },
            },
            void 0 === a ? {} : a
          ),
          { 'zDepth-1': 1 === t }
        )
      return React.createElement(
        'div',
        { style: s.wrap },
        React.createElement('div', { style: s.bg }),
        React.createElement('div', { style: s.content }, i)
      )
    }
  ;(Fo.propTypes = {
    background: Na.string,
    zDepth: Na.oneOf([0, 1, 2, 3, 4, 5]),
    radius: Na.number,
    styles: Na.object,
  }),
    (Fo.defaultProps = { background: '#fff', zDepth: 1, radius: 2, styles: {} })
  var jo = function () {
      return Da.Date.now()
    },
    _o = /\s/
  var Mo = /^\s+/
  function Do(e) {
    return e
      ? e
          .slice(
            0,
            (function (e) {
              for (var t = e.length; t-- && _o.test(e.charAt(t)); );
              return t
            })(e) + 1
          )
          .replace(Mo, '')
      : e
  }
  function Lo(e) {
    return 'symbol' == typeof e || (Fs(e) && '[object Symbol]' == $a(e))
  }
  var Bo = /^[-+]0x[0-9a-f]+$/i,
    zo = /^0b[01]+$/i,
    Uo = /^0o[0-7]+$/i,
    Wo = parseInt
  function Ho(e) {
    if ('number' == typeof e) return e
    if (Lo(e)) return NaN
    if (qa(e)) {
      var t = 'function' == typeof e.valueOf ? e.valueOf() : e
      e = qa(t) ? t + '' : t
    }
    if ('string' != typeof e) return 0 === e ? e : +e
    e = Do(e)
    var r = zo.test(e)
    return r || Uo.test(e) ? Wo(e.slice(2), r ? 2 : 8) : Bo.test(e) ? NaN : +e
  }
  var Vo = Math.max,
    $o = Math.min
  function qo(e, t, r) {
    var n,
      i,
      a,
      s,
      o,
      l,
      c = 0,
      u = !1,
      p = !1,
      h = !0
    if ('function' != typeof e) throw new TypeError('Expected a function')
    function d(t) {
      var r = n,
        a = i
      return (n = i = void 0), (c = t), (s = e.apply(a, r))
    }
    function f(e) {
      return (c = e), (o = setTimeout(y, t)), u ? d(e) : s
    }
    function m(e) {
      var r = e - l
      return void 0 === l || r >= t || r < 0 || (p && e - c >= a)
    }
    function y() {
      var e = jo()
      if (m(e)) return g(e)
      o = setTimeout(
        y,
        (function (e) {
          var r = t - (e - l)
          return p ? $o(r, a - (e - c)) : r
        })(e)
      )
    }
    function g(e) {
      return (o = void 0), h && n ? d(e) : ((n = i = void 0), s)
    }
    function b() {
      var e = jo(),
        r = m(e)
      if (((n = arguments), (i = this), (l = e), r)) {
        if (void 0 === o) return f(l)
        if (p) return clearTimeout(o), (o = setTimeout(y, t)), d(l)
      }
      return void 0 === o && (o = setTimeout(y, t)), s
    }
    return (
      (t = Ho(t) || 0),
      qa(r) &&
        ((u = !!r.leading),
        (a = (p = 'maxWait' in r) ? Vo(Ho(r.maxWait) || 0, t) : a),
        (h = 'trailing' in r ? !!r.trailing : h)),
      (b.cancel = function () {
        void 0 !== o && clearTimeout(o), (c = 0), (n = l = i = o = void 0)
      }),
      (b.flush = function () {
        return void 0 === o ? s : g(jo())
      }),
      b
    )
  }
  var Ko = (function () {
    function e(e, t) {
      for (var r = 0; r < t.length; r++) {
        var n = t[r]
        ;(n.enumerable = n.enumerable || !1),
          (n.configurable = !0),
          'value' in n && (n.writable = !0),
          Object.defineProperty(e, n.key, n)
      }
    }
    return function (t, r, n) {
      return r && e(t.prototype, r), n && e(t, n), t
    }
  })()
  var Go = (function (e) {
    function t(e) {
      !(function (e, t) {
        if (!(e instanceof t))
          throw new TypeError('Cannot call a class as a function')
      })(this, t)
      var r = (function (e, t) {
        if (!e)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        return !t || ('object' != typeof t && 'function' != typeof t) ? e : t
      })(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e))
      return (
        (r.handleChange = function (e) {
          'function' == typeof r.props.onChange &&
            r.throttle(
              r.props.onChange,
              (function (e, t, r) {
                var n = r.getBoundingClientRect(),
                  i = n.width,
                  a = n.height,
                  s = 'number' == typeof e.pageX ? e.pageX : e.touches[0].pageX,
                  o = 'number' == typeof e.pageY ? e.pageY : e.touches[0].pageY,
                  l = s - (r.getBoundingClientRect().left + window.pageXOffset),
                  c = o - (r.getBoundingClientRect().top + window.pageYOffset)
                l < 0 ? (l = 0) : l > i && (l = i),
                  c < 0 ? (c = 0) : c > a && (c = a)
                var u = l / i,
                  p = 1 - c / a
                return { h: t.h, s: u, v: p, a: t.a, source: 'hsv' }
              })(e, r.props.hsl, r.container),
              e
            )
        }),
        (r.handleMouseDown = function (e) {
          r.handleChange(e)
          var t = r.getContainerRenderWindow()
          t.addEventListener('mousemove', r.handleChange),
            t.addEventListener('mouseup', r.handleMouseUp)
        }),
        (r.handleMouseUp = function () {
          r.unbindEventListeners()
        }),
        (r.throttle = (function (e, t, r) {
          var n = !0,
            i = !0
          if ('function' != typeof e) throw new TypeError('Expected a function')
          return (
            qa(r) &&
              ((n = 'leading' in r ? !!r.leading : n),
              (i = 'trailing' in r ? !!r.trailing : i)),
            qo(e, t, { leading: n, maxWait: t, trailing: i })
          )
        })(function (e, t, r) {
          e(t, r)
        }, 50)),
        r
      )
    }
    return (
      (function (e, t) {
        if ('function' != typeof t && null !== t)
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof t
          )
        ;(e.prototype = Object.create(t && t.prototype, {
          constructor: {
            value: e,
            enumerable: !1,
            writable: !0,
            configurable: !0,
          },
        })),
          t &&
            (Object.setPrototypeOf
              ? Object.setPrototypeOf(e, t)
              : (e.__proto__ = t))
      })(t, React.PureComponent || React.Component),
      Ko(t, [
        {
          key: 'componentWillUnmount',
          value: function () {
            this.throttle.cancel(), this.unbindEventListeners()
          },
        },
        {
          key: 'getContainerRenderWindow',
          value: function () {
            for (
              var e = this.container, t = window;
              !t.document.contains(e) && t.parent !== t;

            )
              t = t.parent
            return t
          },
        },
        {
          key: 'unbindEventListeners',
          value: function () {
            var e = this.getContainerRenderWindow()
            e.removeEventListener('mousemove', this.handleChange),
              e.removeEventListener('mouseup', this.handleMouseUp)
          },
        },
        {
          key: 'render',
          value: function () {
            var e = this,
              t = this.props.style || {},
              r = t.color,
              n = t.white,
              i = t.black,
              a = t.pointer,
              s = t.circle,
              o = Ai(
                {
                  default: {
                    color: {
                      absolute: '0px 0px 0px 0px',
                      background: 'hsl(' + this.props.hsl.h + ',100%, 50%)',
                      borderRadius: this.props.radius,
                    },
                    white: {
                      absolute: '0px 0px 0px 0px',
                      borderRadius: this.props.radius,
                    },
                    black: {
                      absolute: '0px 0px 0px 0px',
                      boxShadow: this.props.shadow,
                      borderRadius: this.props.radius,
                    },
                    pointer: {
                      position: 'absolute',
                      top: -100 * this.props.hsv.v + 100 + '%',
                      left: 100 * this.props.hsv.s + '%',
                      cursor: 'default',
                    },
                    circle: {
                      width: '4px',
                      height: '4px',
                      boxShadow:
                        '0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)',
                      borderRadius: '50%',
                      cursor: 'hand',
                      transform: 'translate(-2px, -2px)',
                    },
                  },
                  custom: {
                    color: r,
                    white: n,
                    black: i,
                    pointer: a,
                    circle: s,
                  },
                },
                { custom: !!this.props.style }
              )
            return React.createElement(
              'div',
              {
                style: o.color,
                ref: function (t) {
                  return (e.container = t)
                },
                onMouseDown: this.handleMouseDown,
                onTouchMove: this.handleChange,
                onTouchStart: this.handleChange,
              },
              React.createElement(
                'style',
                null,
                '\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        '
              ),
              React.createElement(
                'div',
                { style: o.white, className: 'saturation-white' },
                React.createElement('div', {
                  style: o.black,
                  className: 'saturation-black',
                }),
                React.createElement(
                  'div',
                  { style: o.pointer },
                  this.props.pointer
                    ? React.createElement(this.props.pointer, this.props)
                    : React.createElement('div', { style: o.circle })
                )
              )
            )
          },
        },
      ]),
      t
    )
  })()
  function Xo(e, t) {
    for (
      var r = -1, n = null == e ? 0 : e.length;
      ++r < n && !1 !== t(e[r], r, e);

    );
    return e
  }
  var Yo = ks(Object.keys, Object),
    Jo = Object.prototype.hasOwnProperty
  function Qo(e) {
    return Ws(e)
      ? ho(e)
      : (function (e) {
          if (!Is(e)) return Yo(e)
          var t = []
          for (var r in Object(e))
            Jo.call(e, r) && 'constructor' != r && t.push(r)
          return t
        })(e)
  }
  var Zo = (function (e, t) {
      return function (r, n) {
        if (null == r) return r
        if (!Ws(r)) return e(r, n)
        for (
          var i = r.length, a = t ? i : -1, s = Object(r);
          (t ? a-- : ++a < i) && !1 !== n(s[a], a, s);

        );
        return r
      }
    })(function (e, t) {
      return e && xs(e, t, Qo)
    }),
    el = Zo
  function tl(e, t) {
    return (zs(e) ? Xo : el)(
      e,
      (function (e) {
        return 'function' == typeof e ? e : xo
      })(t)
    )
  }
  var rl = W(function (e) {
      !(function (t) {
        var r = /^\s+/,
          n = /\s+$/,
          i = 0,
          a = t.round,
          s = t.min,
          o = t.max,
          l = t.random
        function c(e, l) {
          if (((l = l || {}), (e = e || '') instanceof c)) return e
          if (!(this instanceof c)) return new c(e, l)
          var u = (function (e) {
            var i = { r: 0, g: 0, b: 0 },
              a = 1,
              l = null,
              c = null,
              u = null,
              p = !1,
              h = !1
            'string' == typeof e &&
              (e = (function (e) {
                e = e.replace(r, '').replace(n, '').toLowerCase()
                var t,
                  i = !1
                if (A[e]) (e = A[e]), (i = !0)
                else if ('transparent' == e)
                  return { r: 0, g: 0, b: 0, a: 0, format: 'name' }
                if ((t = z.rgb.exec(e))) return { r: t[1], g: t[2], b: t[3] }
                if ((t = z.rgba.exec(e)))
                  return { r: t[1], g: t[2], b: t[3], a: t[4] }
                if ((t = z.hsl.exec(e))) return { h: t[1], s: t[2], l: t[3] }
                if ((t = z.hsla.exec(e)))
                  return { h: t[1], s: t[2], l: t[3], a: t[4] }
                if ((t = z.hsv.exec(e))) return { h: t[1], s: t[2], v: t[3] }
                if ((t = z.hsva.exec(e)))
                  return { h: t[1], s: t[2], v: t[3], a: t[4] }
                if ((t = z.hex8.exec(e)))
                  return {
                    r: I(t[1]),
                    g: I(t[2]),
                    b: I(t[3]),
                    a: M(t[4]),
                    format: i ? 'name' : 'hex8',
                  }
                if ((t = z.hex6.exec(e)))
                  return {
                    r: I(t[1]),
                    g: I(t[2]),
                    b: I(t[3]),
                    format: i ? 'name' : 'hex',
                  }
                if ((t = z.hex4.exec(e)))
                  return {
                    r: I(t[1] + '' + t[1]),
                    g: I(t[2] + '' + t[2]),
                    b: I(t[3] + '' + t[3]),
                    a: M(t[4] + '' + t[4]),
                    format: i ? 'name' : 'hex8',
                  }
                if ((t = z.hex3.exec(e)))
                  return {
                    r: I(t[1] + '' + t[1]),
                    g: I(t[2] + '' + t[2]),
                    b: I(t[3] + '' + t[3]),
                    format: i ? 'name' : 'hex',
                  }
                return !1
              })(e))
            'object' == typeof e &&
              (U(e.r) && U(e.g) && U(e.b)
                ? ((i = (function (e, t, r) {
                    return {
                      r: 255 * N(e, 255),
                      g: 255 * N(t, 255),
                      b: 255 * N(r, 255),
                    }
                  })(e.r, e.g, e.b)),
                  (p = !0),
                  (h = '%' === String(e.r).substr(-1) ? 'prgb' : 'rgb'))
                : U(e.h) && U(e.s) && U(e.v)
                ? ((l = j(e.s)),
                  (c = j(e.v)),
                  (i = (function (e, r, n) {
                    ;(e = 6 * N(e, 360)), (r = N(r, 100)), (n = N(n, 100))
                    var i = t.floor(e),
                      a = e - i,
                      s = n * (1 - r),
                      o = n * (1 - a * r),
                      l = n * (1 - (1 - a) * r),
                      c = i % 6
                    return {
                      r: 255 * [n, o, s, s, l, n][c],
                      g: 255 * [l, n, n, o, s, s][c],
                      b: 255 * [s, s, l, n, n, o][c],
                    }
                  })(e.h, l, c)),
                  (p = !0),
                  (h = 'hsv'))
                : U(e.h) &&
                  U(e.s) &&
                  U(e.l) &&
                  ((l = j(e.s)),
                  (u = j(e.l)),
                  (i = (function (e, t, r) {
                    var n, i, a
                    function s(e, t, r) {
                      return (
                        r < 0 && (r += 1),
                        r > 1 && (r -= 1),
                        r < 1 / 6
                          ? e + 6 * (t - e) * r
                          : r < 0.5
                          ? t
                          : r < 2 / 3
                          ? e + (t - e) * (2 / 3 - r) * 6
                          : e
                      )
                    }
                    if (
                      ((e = N(e, 360)),
                      (t = N(t, 100)),
                      (r = N(r, 100)),
                      0 === t)
                    )
                      n = i = a = r
                    else {
                      var o = r < 0.5 ? r * (1 + t) : r + t - r * t,
                        l = 2 * r - o
                      ;(n = s(l, o, e + 1 / 3)),
                        (i = s(l, o, e)),
                        (a = s(l, o, e - 1 / 3))
                    }
                    return { r: 255 * n, g: 255 * i, b: 255 * a }
                  })(e.h, l, u)),
                  (p = !0),
                  (h = 'hsl')),
              e.hasOwnProperty('a') && (a = e.a))
            return (
              (a = k(a)),
              {
                ok: p,
                format: e.format || h,
                r: s(255, o(i.r, 0)),
                g: s(255, o(i.g, 0)),
                b: s(255, o(i.b, 0)),
                a: a,
              }
            )
          })(e)
          ;(this._originalInput = e),
            (this._r = u.r),
            (this._g = u.g),
            (this._b = u.b),
            (this._a = u.a),
            (this._roundA = a(100 * this._a) / 100),
            (this._format = l.format || u.format),
            (this._gradientType = l.gradientType),
            this._r < 1 && (this._r = a(this._r)),
            this._g < 1 && (this._g = a(this._g)),
            this._b < 1 && (this._b = a(this._b)),
            (this._ok = u.ok),
            (this._tc_id = i++)
        }
        function u(e, t, r) {
          ;(e = N(e, 255)), (t = N(t, 255)), (r = N(r, 255))
          var n,
            i,
            a = o(e, t, r),
            l = s(e, t, r),
            c = (a + l) / 2
          if (a == l) n = i = 0
          else {
            var u = a - l
            switch (((i = c > 0.5 ? u / (2 - a - l) : u / (a + l)), a)) {
              case e:
                n = (t - r) / u + (t < r ? 6 : 0)
                break
              case t:
                n = (r - e) / u + 2
                break
              case r:
                n = (e - t) / u + 4
            }
            n /= 6
          }
          return { h: n, s: i, l: c }
        }
        function p(e, t, r) {
          ;(e = N(e, 255)), (t = N(t, 255)), (r = N(r, 255))
          var n,
            i,
            a = o(e, t, r),
            l = s(e, t, r),
            c = a,
            u = a - l
          if (((i = 0 === a ? 0 : u / a), a == l)) n = 0
          else {
            switch (a) {
              case e:
                n = (t - r) / u + (t < r ? 6 : 0)
                break
              case t:
                n = (r - e) / u + 2
                break
              case r:
                n = (e - t) / u + 4
            }
            n /= 6
          }
          return { h: n, s: i, v: c }
        }
        function h(e, t, r, n) {
          var i = [
            F(a(e).toString(16)),
            F(a(t).toString(16)),
            F(a(r).toString(16)),
          ]
          return n &&
            i[0].charAt(0) == i[0].charAt(1) &&
            i[1].charAt(0) == i[1].charAt(1) &&
            i[2].charAt(0) == i[2].charAt(1)
            ? i[0].charAt(0) + i[1].charAt(0) + i[2].charAt(0)
            : i.join('')
        }
        function d(e, t, r, n) {
          return [
            F(_(n)),
            F(a(e).toString(16)),
            F(a(t).toString(16)),
            F(a(r).toString(16)),
          ].join('')
        }
        function f(e, t) {
          t = 0 === t ? 0 : t || 10
          var r = c(e).toHsl()
          return (r.s -= t / 100), (r.s = O(r.s)), c(r)
        }
        function m(e, t) {
          t = 0 === t ? 0 : t || 10
          var r = c(e).toHsl()
          return (r.s += t / 100), (r.s = O(r.s)), c(r)
        }
        function y(e) {
          return c(e).desaturate(100)
        }
        function g(e, t) {
          t = 0 === t ? 0 : t || 10
          var r = c(e).toHsl()
          return (r.l += t / 100), (r.l = O(r.l)), c(r)
        }
        function b(e, t) {
          t = 0 === t ? 0 : t || 10
          var r = c(e).toRgb()
          return (
            (r.r = o(0, s(255, r.r - a((-t / 100) * 255)))),
            (r.g = o(0, s(255, r.g - a((-t / 100) * 255)))),
            (r.b = o(0, s(255, r.b - a((-t / 100) * 255)))),
            c(r)
          )
        }
        function v(e, t) {
          t = 0 === t ? 0 : t || 10
          var r = c(e).toHsl()
          return (r.l -= t / 100), (r.l = O(r.l)), c(r)
        }
        function x(e, t) {
          var r = c(e).toHsl(),
            n = (r.h + t) % 360
          return (r.h = n < 0 ? 360 + n : n), c(r)
        }
        function w(e) {
          var t = c(e).toHsl()
          return (t.h = (t.h + 180) % 360), c(t)
        }
        function E(e) {
          var t = c(e).toHsl(),
            r = t.h
          return [
            c(e),
            c({ h: (r + 120) % 360, s: t.s, l: t.l }),
            c({ h: (r + 240) % 360, s: t.s, l: t.l }),
          ]
        }
        function P(e) {
          var t = c(e).toHsl(),
            r = t.h
          return [
            c(e),
            c({ h: (r + 90) % 360, s: t.s, l: t.l }),
            c({ h: (r + 180) % 360, s: t.s, l: t.l }),
            c({ h: (r + 270) % 360, s: t.s, l: t.l }),
          ]
        }
        function S(e) {
          var t = c(e).toHsl(),
            r = t.h
          return [
            c(e),
            c({ h: (r + 72) % 360, s: t.s, l: t.l }),
            c({ h: (r + 216) % 360, s: t.s, l: t.l }),
          ]
        }
        function T(e, t, r) {
          ;(t = t || 6), (r = r || 30)
          var n = c(e).toHsl(),
            i = 360 / r,
            a = [c(e)]
          for (n.h = (n.h - ((i * t) >> 1) + 720) % 360; --t; )
            (n.h = (n.h + i) % 360), a.push(c(n))
          return a
        }
        function C(e, t) {
          t = t || 6
          for (
            var r = c(e).toHsv(), n = r.h, i = r.s, a = r.v, s = [], o = 1 / t;
            t--;

          )
            s.push(c({ h: n, s: i, v: a })), (a = (a + o) % 1)
          return s
        }
        ;(c.prototype = {
          isDark: function () {
            return this.getBrightness() < 128
          },
          isLight: function () {
            return !this.isDark()
          },
          isValid: function () {
            return this._ok
          },
          getOriginalInput: function () {
            return this._originalInput
          },
          getFormat: function () {
            return this._format
          },
          getAlpha: function () {
            return this._a
          },
          getBrightness: function () {
            var e = this.toRgb()
            return (299 * e.r + 587 * e.g + 114 * e.b) / 1e3
          },
          getLuminance: function () {
            var e,
              r,
              n,
              i = this.toRgb()
            return (
              (e = i.r / 255),
              (r = i.g / 255),
              (n = i.b / 255),
              0.2126 *
                (e <= 0.03928 ? e / 12.92 : t.pow((e + 0.055) / 1.055, 2.4)) +
                0.7152 *
                  (r <= 0.03928 ? r / 12.92 : t.pow((r + 0.055) / 1.055, 2.4)) +
                0.0722 *
                  (n <= 0.03928 ? n / 12.92 : t.pow((n + 0.055) / 1.055, 2.4))
            )
          },
          setAlpha: function (e) {
            return (
              (this._a = k(e)), (this._roundA = a(100 * this._a) / 100), this
            )
          },
          toHsv: function () {
            var e = p(this._r, this._g, this._b)
            return { h: 360 * e.h, s: e.s, v: e.v, a: this._a }
          },
          toHsvString: function () {
            var e = p(this._r, this._g, this._b),
              t = a(360 * e.h),
              r = a(100 * e.s),
              n = a(100 * e.v)
            return 1 == this._a
              ? 'hsv(' + t + ', ' + r + '%, ' + n + '%)'
              : 'hsva(' + t + ', ' + r + '%, ' + n + '%, ' + this._roundA + ')'
          },
          toHsl: function () {
            var e = u(this._r, this._g, this._b)
            return { h: 360 * e.h, s: e.s, l: e.l, a: this._a }
          },
          toHslString: function () {
            var e = u(this._r, this._g, this._b),
              t = a(360 * e.h),
              r = a(100 * e.s),
              n = a(100 * e.l)
            return 1 == this._a
              ? 'hsl(' + t + ', ' + r + '%, ' + n + '%)'
              : 'hsla(' + t + ', ' + r + '%, ' + n + '%, ' + this._roundA + ')'
          },
          toHex: function (e) {
            return h(this._r, this._g, this._b, e)
          },
          toHexString: function (e) {
            return '#' + this.toHex(e)
          },
          toHex8: function (e) {
            return (function (e, t, r, n, i) {
              var s = [
                F(a(e).toString(16)),
                F(a(t).toString(16)),
                F(a(r).toString(16)),
                F(_(n)),
              ]
              if (
                i &&
                s[0].charAt(0) == s[0].charAt(1) &&
                s[1].charAt(0) == s[1].charAt(1) &&
                s[2].charAt(0) == s[2].charAt(1) &&
                s[3].charAt(0) == s[3].charAt(1)
              )
                return (
                  s[0].charAt(0) +
                  s[1].charAt(0) +
                  s[2].charAt(0) +
                  s[3].charAt(0)
                )
              return s.join('')
            })(this._r, this._g, this._b, this._a, e)
          },
          toHex8String: function (e) {
            return '#' + this.toHex8(e)
          },
          toRgb: function () {
            return { r: a(this._r), g: a(this._g), b: a(this._b), a: this._a }
          },
          toRgbString: function () {
            return 1 == this._a
              ? 'rgb(' +
                  a(this._r) +
                  ', ' +
                  a(this._g) +
                  ', ' +
                  a(this._b) +
                  ')'
              : 'rgba(' +
                  a(this._r) +
                  ', ' +
                  a(this._g) +
                  ', ' +
                  a(this._b) +
                  ', ' +
                  this._roundA +
                  ')'
          },
          toPercentageRgb: function () {
            return {
              r: a(100 * N(this._r, 255)) + '%',
              g: a(100 * N(this._g, 255)) + '%',
              b: a(100 * N(this._b, 255)) + '%',
              a: this._a,
            }
          },
          toPercentageRgbString: function () {
            return 1 == this._a
              ? 'rgb(' +
                  a(100 * N(this._r, 255)) +
                  '%, ' +
                  a(100 * N(this._g, 255)) +
                  '%, ' +
                  a(100 * N(this._b, 255)) +
                  '%)'
              : 'rgba(' +
                  a(100 * N(this._r, 255)) +
                  '%, ' +
                  a(100 * N(this._g, 255)) +
                  '%, ' +
                  a(100 * N(this._b, 255)) +
                  '%, ' +
                  this._roundA +
                  ')'
          },
          toName: function () {
            return 0 === this._a
              ? 'transparent'
              : !(this._a < 1) && (R[h(this._r, this._g, this._b, !0)] || !1)
          },
          toFilter: function (e) {
            var t = '#' + d(this._r, this._g, this._b, this._a),
              r = t,
              n = this._gradientType ? 'GradientType = 1, ' : ''
            if (e) {
              var i = c(e)
              r = '#' + d(i._r, i._g, i._b, i._a)
            }
            return (
              'progid:DXImageTransform.Microsoft.gradient(' +
              n +
              'startColorstr=' +
              t +
              ',endColorstr=' +
              r +
              ')'
            )
          },
          toString: function (e) {
            var t = !!e
            e = e || this._format
            var r = !1,
              n = this._a < 1 && this._a >= 0
            return t ||
              !n ||
              ('hex' !== e &&
                'hex6' !== e &&
                'hex3' !== e &&
                'hex4' !== e &&
                'hex8' !== e &&
                'name' !== e)
              ? ('rgb' === e && (r = this.toRgbString()),
                'prgb' === e && (r = this.toPercentageRgbString()),
                ('hex' !== e && 'hex6' !== e) || (r = this.toHexString()),
                'hex3' === e && (r = this.toHexString(!0)),
                'hex4' === e && (r = this.toHex8String(!0)),
                'hex8' === e && (r = this.toHex8String()),
                'name' === e && (r = this.toName()),
                'hsl' === e && (r = this.toHslString()),
                'hsv' === e && (r = this.toHsvString()),
                r || this.toHexString())
              : 'name' === e && 0 === this._a
              ? this.toName()
              : this.toRgbString()
          },
          clone: function () {
            return c(this.toString())
          },
          _applyModification: function (e, t) {
            var r = e.apply(null, [this].concat([].slice.call(t)))
            return (
              (this._r = r._r),
              (this._g = r._g),
              (this._b = r._b),
              this.setAlpha(r._a),
              this
            )
          },
          lighten: function () {
            return this._applyModification(g, arguments)
          },
          brighten: function () {
            return this._applyModification(b, arguments)
          },
          darken: function () {
            return this._applyModification(v, arguments)
          },
          desaturate: function () {
            return this._applyModification(f, arguments)
          },
          saturate: function () {
            return this._applyModification(m, arguments)
          },
          greyscale: function () {
            return this._applyModification(y, arguments)
          },
          spin: function () {
            return this._applyModification(x, arguments)
          },
          _applyCombination: function (e, t) {
            return e.apply(null, [this].concat([].slice.call(t)))
          },
          analogous: function () {
            return this._applyCombination(T, arguments)
          },
          complement: function () {
            return this._applyCombination(w, arguments)
          },
          monochromatic: function () {
            return this._applyCombination(C, arguments)
          },
          splitcomplement: function () {
            return this._applyCombination(S, arguments)
          },
          triad: function () {
            return this._applyCombination(E, arguments)
          },
          tetrad: function () {
            return this._applyCombination(P, arguments)
          },
        }),
          (c.fromRatio = function (e, t) {
            if ('object' == typeof e) {
              var r = {}
              for (var n in e)
                e.hasOwnProperty(n) && (r[n] = 'a' === n ? e[n] : j(e[n]))
              e = r
            }
            return c(e, t)
          }),
          (c.equals = function (e, t) {
            return !(!e || !t) && c(e).toRgbString() == c(t).toRgbString()
          }),
          (c.random = function () {
            return c.fromRatio({ r: l(), g: l(), b: l() })
          }),
          (c.mix = function (e, t, r) {
            r = 0 === r ? 0 : r || 50
            var n = c(e).toRgb(),
              i = c(t).toRgb(),
              a = r / 100
            return c({
              r: (i.r - n.r) * a + n.r,
              g: (i.g - n.g) * a + n.g,
              b: (i.b - n.b) * a + n.b,
              a: (i.a - n.a) * a + n.a,
            })
          }),
          (c.readability = function (e, r) {
            var n = c(e),
              i = c(r)
            return (
              (t.max(n.getLuminance(), i.getLuminance()) + 0.05) /
              (t.min(n.getLuminance(), i.getLuminance()) + 0.05)
            )
          }),
          (c.isReadable = function (e, t, r) {
            var n,
              i,
              a = c.readability(e, t)
            switch (
              ((i = !1),
              (n = (function (e) {
                var t, r
                ;(t = (
                  (e = e || { level: 'AA', size: 'small' }).level || 'AA'
                ).toUpperCase()),
                  (r = (e.size || 'small').toLowerCase()),
                  'AA' !== t && 'AAA' !== t && (t = 'AA')
                'small' !== r && 'large' !== r && (r = 'small')
                return { level: t, size: r }
              })(r)),
              n.level + n.size)
            ) {
              case 'AAsmall':
              case 'AAAlarge':
                i = a >= 4.5
                break
              case 'AAlarge':
                i = a >= 3
                break
              case 'AAAsmall':
                i = a >= 7
            }
            return i
          }),
          (c.mostReadable = function (e, t, r) {
            var n,
              i,
              a,
              s,
              o = null,
              l = 0
            ;(i = (r = r || {}).includeFallbackColors),
              (a = r.level),
              (s = r.size)
            for (var u = 0; u < t.length; u++)
              (n = c.readability(e, t[u])) > l && ((l = n), (o = c(t[u])))
            return c.isReadable(e, o, { level: a, size: s }) || !i
              ? o
              : ((r.includeFallbackColors = !1),
                c.mostReadable(e, ['#fff', '#000'], r))
          })
        var A = (c.names = {
            aliceblue: 'f0f8ff',
            antiquewhite: 'faebd7',
            aqua: '0ff',
            aquamarine: '7fffd4',
            azure: 'f0ffff',
            beige: 'f5f5dc',
            bisque: 'ffe4c4',
            black: '000',
            blanchedalmond: 'ffebcd',
            blue: '00f',
            blueviolet: '8a2be2',
            brown: 'a52a2a',
            burlywood: 'deb887',
            burntsienna: 'ea7e5d',
            cadetblue: '5f9ea0',
            chartreuse: '7fff00',
            chocolate: 'd2691e',
            coral: 'ff7f50',
            cornflowerblue: '6495ed',
            cornsilk: 'fff8dc',
            crimson: 'dc143c',
            cyan: '0ff',
            darkblue: '00008b',
            darkcyan: '008b8b',
            darkgoldenrod: 'b8860b',
            darkgray: 'a9a9a9',
            darkgreen: '006400',
            darkgrey: 'a9a9a9',
            darkkhaki: 'bdb76b',
            darkmagenta: '8b008b',
            darkolivegreen: '556b2f',
            darkorange: 'ff8c00',
            darkorchid: '9932cc',
            darkred: '8b0000',
            darksalmon: 'e9967a',
            darkseagreen: '8fbc8f',
            darkslateblue: '483d8b',
            darkslategray: '2f4f4f',
            darkslategrey: '2f4f4f',
            darkturquoise: '00ced1',
            darkviolet: '9400d3',
            deeppink: 'ff1493',
            deepskyblue: '00bfff',
            dimgray: '696969',
            dimgrey: '696969',
            dodgerblue: '1e90ff',
            firebrick: 'b22222',
            floralwhite: 'fffaf0',
            forestgreen: '228b22',
            fuchsia: 'f0f',
            gainsboro: 'dcdcdc',
            ghostwhite: 'f8f8ff',
            gold: 'ffd700',
            goldenrod: 'daa520',
            gray: '808080',
            green: '008000',
            greenyellow: 'adff2f',
            grey: '808080',
            honeydew: 'f0fff0',
            hotpink: 'ff69b4',
            indianred: 'cd5c5c',
            indigo: '4b0082',
            ivory: 'fffff0',
            khaki: 'f0e68c',
            lavender: 'e6e6fa',
            lavenderblush: 'fff0f5',
            lawngreen: '7cfc00',
            lemonchiffon: 'fffacd',
            lightblue: 'add8e6',
            lightcoral: 'f08080',
            lightcyan: 'e0ffff',
            lightgoldenrodyellow: 'fafad2',
            lightgray: 'd3d3d3',
            lightgreen: '90ee90',
            lightgrey: 'd3d3d3',
            lightpink: 'ffb6c1',
            lightsalmon: 'ffa07a',
            lightseagreen: '20b2aa',
            lightskyblue: '87cefa',
            lightslategray: '789',
            lightslategrey: '789',
            lightsteelblue: 'b0c4de',
            lightyellow: 'ffffe0',
            lime: '0f0',
            limegreen: '32cd32',
            linen: 'faf0e6',
            magenta: 'f0f',
            maroon: '800000',
            mediumaquamarine: '66cdaa',
            mediumblue: '0000cd',
            mediumorchid: 'ba55d3',
            mediumpurple: '9370db',
            mediumseagreen: '3cb371',
            mediumslateblue: '7b68ee',
            mediumspringgreen: '00fa9a',
            mediumturquoise: '48d1cc',
            mediumvioletred: 'c71585',
            midnightblue: '191970',
            mintcream: 'f5fffa',
            mistyrose: 'ffe4e1',
            moccasin: 'ffe4b5',
            navajowhite: 'ffdead',
            navy: '000080',
            oldlace: 'fdf5e6',
            olive: '808000',
            olivedrab: '6b8e23',
            orange: 'ffa500',
            orangered: 'ff4500',
            orchid: 'da70d6',
            palegoldenrod: 'eee8aa',
            palegreen: '98fb98',
            paleturquoise: 'afeeee',
            palevioletred: 'db7093',
            papayawhip: 'ffefd5',
            peachpuff: 'ffdab9',
            peru: 'cd853f',
            pink: 'ffc0cb',
            plum: 'dda0dd',
            powderblue: 'b0e0e6',
            purple: '800080',
            rebeccapurple: '663399',
            red: 'f00',
            rosybrown: 'bc8f8f',
            royalblue: '4169e1',
            saddlebrown: '8b4513',
            salmon: 'fa8072',
            sandybrown: 'f4a460',
            seagreen: '2e8b57',
            seashell: 'fff5ee',
            sienna: 'a0522d',
            silver: 'c0c0c0',
            skyblue: '87ceeb',
            slateblue: '6a5acd',
            slategray: '708090',
            slategrey: '708090',
            snow: 'fffafa',
            springgreen: '00ff7f',
            steelblue: '4682b4',
            tan: 'd2b48c',
            teal: '008080',
            thistle: 'd8bfd8',
            tomato: 'ff6347',
            turquoise: '40e0d0',
            violet: 'ee82ee',
            wheat: 'f5deb3',
            white: 'fff',
            whitesmoke: 'f5f5f5',
            yellow: 'ff0',
            yellowgreen: '9acd32',
          }),
          R = (c.hexNames = (function (e) {
            var t = {}
            for (var r in e) e.hasOwnProperty(r) && (t[e[r]] = r)
            return t
          })(A))
        function k(e) {
          return (e = parseFloat(e)), (isNaN(e) || e < 0 || e > 1) && (e = 1), e
        }
        function N(e, r) {
          ;(function (e) {
            return (
              'string' == typeof e &&
              -1 != e.indexOf('.') &&
              1 === parseFloat(e)
            )
          })(e) && (e = '100%')
          var n = (function (e) {
            return 'string' == typeof e && -1 != e.indexOf('%')
          })(e)
          return (
            (e = s(r, o(0, parseFloat(e)))),
            n && (e = parseInt(e * r, 10) / 100),
            t.abs(e - r) < 1e-6 ? 1 : (e % r) / parseFloat(r)
          )
        }
        function O(e) {
          return s(1, o(0, e))
        }
        function I(e) {
          return parseInt(e, 16)
        }
        function F(e) {
          return 1 == e.length ? '0' + e : '' + e
        }
        function j(e) {
          return e <= 1 && (e = 100 * e + '%'), e
        }
        function _(e) {
          return t.round(255 * parseFloat(e)).toString(16)
        }
        function M(e) {
          return I(e) / 255
        }
        var D,
          L,
          B,
          z =
            ((L =
              '[\\s|\\(]+(' +
              (D = '(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)') +
              ')[,|\\s]+(' +
              D +
              ')[,|\\s]+(' +
              D +
              ')\\s*\\)?'),
            (B =
              '[\\s|\\(]+(' +
              D +
              ')[,|\\s]+(' +
              D +
              ')[,|\\s]+(' +
              D +
              ')[,|\\s]+(' +
              D +
              ')\\s*\\)?'),
            {
              CSS_UNIT: new RegExp(D),
              rgb: new RegExp('rgb' + L),
              rgba: new RegExp('rgba' + B),
              hsl: new RegExp('hsl' + L),
              hsla: new RegExp('hsla' + B),
              hsv: new RegExp('hsv' + L),
              hsva: new RegExp('hsva' + B),
              hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
              hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
              hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
              hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
            })
        function U(e) {
          return !!z.CSS_UNIT.exec(e)
        }
        e.exports ? (e.exports = c) : (window.tinycolor = c)
      })(Math)
    }),
    nl = function (e) {
      var t = 0,
        r = 0
      return (
        tl(['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'], function (n) {
          if (
            e[n] &&
            ((t += 1), isNaN(e[n]) || (r += 1), 's' === n || 'l' === n)
          ) {
            ;/^\d+%$/.test(e[n]) && (r += 1)
          }
        }),
        t === r && e
      )
    },
    il = function (e, t) {
      var r = e.hex ? rl(e.hex) : rl(e),
        n = r.toHsl(),
        i = r.toHsv(),
        a = r.toRgb(),
        s = r.toHex()
      return (
        0 === n.s && ((n.h = t || 0), (i.h = t || 0)),
        {
          hsl: n,
          hex: '000000' === s && 0 === a.a ? 'transparent' : '#' + s,
          rgb: a,
          hsv: i,
          oldHue: e.h || t || n.h,
          source: e.source,
        }
      )
    },
    al = function (e) {
      if ('transparent' === e) return !0
      var t = '#' === String(e).charAt(0) ? 1 : 0
      return e.length !== 4 + t && e.length < 7 + t && rl(e).isValid()
    },
    sl = function (e) {
      if (!e) return '#fff'
      var t = il(e)
      return 'transparent' === t.hex
        ? 'rgba(0,0,0,0.4)'
        : (299 * t.rgb.r + 587 * t.rgb.g + 114 * t.rgb.b) / 1e3 >= 128
        ? '#000'
        : '#fff'
    },
    ol = function (e, t) {
      var r = e.replace('°', '')
      return rl(t + ' (' + r + ')')._ok
    },
    ll =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    cl = (function () {
      function e(e, t) {
        for (var r = 0; r < t.length; r++) {
          var n = t[r]
          ;(n.enumerable = n.enumerable || !1),
            (n.configurable = !0),
            'value' in n && (n.writable = !0),
            Object.defineProperty(e, n.key, n)
        }
      }
      return function (t, r, n) {
        return r && e(t.prototype, r), n && e(t, n), t
      }
    })()
  var ul = function (e) {
      var t = (function (t) {
        function r(e) {
          !(function (e, t) {
            if (!(e instanceof t))
              throw new TypeError('Cannot call a class as a function')
          })(this, r)
          var t = (function (e, t) {
            if (!e)
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              )
            return !t || ('object' != typeof t && 'function' != typeof t)
              ? e
              : t
          })(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this))
          return (
            (t.handleChange = function (e, r) {
              if (nl(e)) {
                var n = il(e, e.h || t.state.oldHue)
                t.setState(n),
                  t.props.onChangeComplete &&
                    t.debounce(t.props.onChangeComplete, n, r),
                  t.props.onChange && t.props.onChange(n, r)
              }
            }),
            (t.handleSwatchHover = function (e, r) {
              if (nl(e)) {
                var n = il(e, e.h || t.state.oldHue)
                t.props.onSwatchHover && t.props.onSwatchHover(n, r)
              }
            }),
            (t.state = ll({}, il(e.color, 0))),
            (t.debounce = qo(function (e, t, r) {
              e(t, r)
            }, 100)),
            t
          )
        }
        return (
          (function (e, t) {
            if ('function' != typeof t && null !== t)
              throw new TypeError(
                'Super expression must either be null or a function, not ' +
                  typeof t
              )
            ;(e.prototype = Object.create(t && t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0,
              },
            })),
              t &&
                (Object.setPrototypeOf
                  ? Object.setPrototypeOf(e, t)
                  : (e.__proto__ = t))
          })(r, React.PureComponent || React.Component),
          cl(
            r,
            [
              {
                key: 'render',
                value: function () {
                  var t = {}
                  return (
                    this.props.onSwatchHover &&
                      (t.onSwatchHover = this.handleSwatchHover),
                    React.createElement(
                      e,
                      ll(
                        {},
                        this.props,
                        this.state,
                        { onChange: this.handleChange },
                        t
                      )
                    )
                  )
                },
              },
            ],
            [
              {
                key: 'getDerivedStateFromProps',
                value: function (e, t) {
                  return ll({}, il(e.color, t.oldHue))
                },
              },
            ]
          ),
          r
        )
      })()
      return (
        (t.propTypes = ll({}, e.propTypes)),
        (t.defaultProps = ll({}, e.defaultProps, {
          color: { h: 250, s: 0.5, l: 0.2, a: 1 },
        })),
        t
      )
    },
    pl =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    hl = (function () {
      function e(e, t) {
        for (var r = 0; r < t.length; r++) {
          var n = t[r]
          ;(n.enumerable = n.enumerable || !1),
            (n.configurable = !0),
            'value' in n && (n.writable = !0),
            Object.defineProperty(e, n.key, n)
        }
      }
      return function (t, r, n) {
        return r && e(t.prototype, r), n && e(t, n), t
      }
    })()
  function dl(e, t) {
    if (!(e instanceof t))
      throw new TypeError('Cannot call a class as a function')
  }
  function fl(e, t) {
    if (!e)
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      )
    return !t || ('object' != typeof t && 'function' != typeof t) ? e : t
  }
  function ml(e, t) {
    if ('function' != typeof t && null !== t)
      throw new TypeError(
        'Super expression must either be null or a function, not ' + typeof t
      )
    ;(e.prototype = Object.create(t && t.prototype, {
      constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 },
    })),
      t &&
        (Object.setPrototypeOf
          ? Object.setPrototypeOf(e, t)
          : (e.__proto__ = t))
  }
  var yl =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    gl = (function (e) {
      var t =
        arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 'span'
      return (function (r) {
        function n() {
          var e, t, r
          dl(this, n)
          for (var i = arguments.length, a = Array(i), s = 0; s < i; s++)
            a[s] = arguments[s]
          return (
            (t = r =
              fl(
                this,
                (e = n.__proto__ || Object.getPrototypeOf(n)).call.apply(
                  e,
                  [this].concat(a)
                )
              )),
            (r.state = { focus: !1 }),
            (r.handleFocus = function () {
              return r.setState({ focus: !0 })
            }),
            (r.handleBlur = function () {
              return r.setState({ focus: !1 })
            }),
            fl(r, t)
          )
        }
        return (
          ml(n, React.Component),
          hl(n, [
            {
              key: 'render',
              value: function () {
                return React.createElement(
                  t,
                  { onFocus: this.handleFocus, onBlur: this.handleBlur },
                  React.createElement(e, pl({}, this.props, this.state))
                )
              },
            },
          ]),
          n
        )
      })()
    })(function (e) {
      var t = e.color,
        r = e.style,
        n = e.onClick,
        i = void 0 === n ? function () {} : n,
        a = e.onHover,
        s = e.title,
        o = void 0 === s ? t : s,
        l = e.children,
        c = e.focus,
        u = e.focusStyle,
        p = 'transparent' === t,
        h = Ai({
          default: {
            swatch: yl(
              {
                background: t,
                height: '100%',
                width: '100%',
                cursor: 'pointer',
                position: 'relative',
                outline: 'none',
              },
              r,
              c ? (void 0 === u ? {} : u) : {}
            ),
          },
        }),
        d = {}
      return (
        a &&
          (d.onMouseOver = function (e) {
            return a(t, e)
          }),
        React.createElement(
          'div',
          yl(
            {
              style: h.swatch,
              onClick: function (e) {
                return i(t, e)
              },
              title: o,
              tabIndex: 0,
              onKeyDown: function (e) {
                return 13 === e.keyCode && i(t, e)
              },
            },
            d
          ),
          l,
          p &&
            React.createElement(Ii, {
              borderRadius: h.swatch.borderRadius,
              boxShadow: 'inset 0 0 0 1px rgba(0,0,0,0.1)',
            })
        )
      )
    }),
    bl =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    vl = function (e) {
      var t = e.rgb,
        r = e.hsl,
        n = e.width,
        i = e.height,
        a = e.onChange,
        s = e.direction,
        o = e.style,
        l = e.renderers,
        c = e.pointer,
        u = e.className,
        p = void 0 === u ? '' : u,
        h = Ai({
          default: {
            picker: { position: 'relative', width: n, height: i },
            alpha: { radius: '2px', style: o },
          },
        })
      return React.createElement(
        'div',
        { style: h.picker, className: 'alpha-picker ' + p },
        React.createElement(
          Di,
          bl({}, h.alpha, {
            rgb: t,
            hsl: r,
            pointer: c,
            renderers: l,
            onChange: a,
            direction: s,
          })
        )
      )
    }
  function xl(e, t) {
    for (var r = -1, n = null == e ? 0 : e.length, i = Array(n); ++r < n; )
      i[r] = t(e[r], r, e)
    return i
  }
  ;(vl.defaultProps = {
    width: '316px',
    height: '16px',
    direction: 'horizontal',
    pointer: function (e) {
      var t = e.direction,
        r = Ai(
          {
            default: {
              picker: {
                width: '18px',
                height: '18px',
                borderRadius: '50%',
                transform: 'translate(-9px, -1px)',
                backgroundColor: 'rgb(248, 248, 248)',
                boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
              },
            },
            vertical: { picker: { transform: 'translate(-3px, -9px)' } },
          },
          { vertical: 'vertical' === t }
        )
      return React.createElement('div', { style: r.picker })
    },
  }),
    ul(vl)
  function wl(e) {
    var t = -1,
      r = null == e ? 0 : e.length
    for (this.__data__ = new hs(); ++t < r; ) this.add(e[t])
  }
  function El(e, t) {
    for (var r = -1, n = null == e ? 0 : e.length; ++r < n; )
      if (t(e[r], r, e)) return !0
    return !1
  }
  function Pl(e, t) {
    return e.has(t)
  }
  ;(wl.prototype.add = wl.prototype.push =
    function (e) {
      return this.__data__.set(e, '__lodash_hash_undefined__'), this
    }),
    (wl.prototype.has = function (e) {
      return this.__data__.has(e)
    })
  function Sl(e, t, r, n, i, a) {
    var s = 1 & r,
      o = e.length,
      l = t.length
    if (o != l && !(s && l > o)) return !1
    var c = a.get(e),
      u = a.get(t)
    if (c && u) return c == t && u == e
    var p = -1,
      h = !0,
      d = 2 & r ? new wl() : void 0
    for (a.set(e, t), a.set(t, e); ++p < o; ) {
      var f = e[p],
        m = t[p]
      if (n) var y = s ? n(m, f, p, t, e, a) : n(f, m, p, e, t, a)
      if (void 0 !== y) {
        if (y) continue
        h = !1
        break
      }
      if (d) {
        if (
          !El(t, function (e, t) {
            if (!Pl(d, t) && (f === e || i(f, e, r, n, a))) return d.push(t)
          })
        ) {
          h = !1
          break
        }
      } else if (f !== m && !i(f, m, r, n, a)) {
        h = !1
        break
      }
    }
    return a.delete(e), a.delete(t), h
  }
  function Tl(e) {
    var t = -1,
      r = Array(e.size)
    return (
      e.forEach(function (e, n) {
        r[++t] = [n, e]
      }),
      r
    )
  }
  function Cl(e) {
    var t = -1,
      r = Array(e.size)
    return (
      e.forEach(function (e) {
        r[++t] = e
      }),
      r
    )
  }
  var Al = La ? La.prototype : void 0,
    Rl = Al ? Al.valueOf : void 0
  var kl = Object.prototype.propertyIsEnumerable,
    Nl = Object.getOwnPropertySymbols,
    Ol = Nl
      ? function (e) {
          return null == e
            ? []
            : ((e = Object(e)),
              (function (e, t) {
                for (
                  var r = -1, n = null == e ? 0 : e.length, i = 0, a = [];
                  ++r < n;

                ) {
                  var s = e[r]
                  t(s, r, e) && (a[i++] = s)
                }
                return a
              })(Nl(e), function (t) {
                return kl.call(e, t)
              }))
        }
      : function () {
          return []
        },
    Il = Ol
  function Fl(e) {
    return (function (e, t, r) {
      var n = t(e)
      return zs(e)
        ? n
        : (function (e, t) {
            for (var r = -1, n = t.length, i = e.length; ++r < n; )
              e[i + r] = t[r]
            return e
          })(n, r(e))
    })(e, Qo, Il)
  }
  var jl = Object.prototype.hasOwnProperty
  var _l = as(Da, 'DataView'),
    Ml = as(Da, 'Promise'),
    Dl = as(Da, 'Set'),
    Ll = as(Da, 'WeakMap'),
    Bl = '[object Map]',
    zl = '[object Promise]',
    Ul = '[object Set]',
    Wl = '[object WeakMap]',
    Hl = '[object DataView]',
    Vl = Ja(_l),
    $l = Ja(ss),
    ql = Ja(Ml),
    Kl = Ja(Dl),
    Gl = Ja(Ll),
    Xl = $a
  ;((_l && Xl(new _l(new ArrayBuffer(1))) != Hl) ||
    (ss && Xl(new ss()) != Bl) ||
    (Ml && Xl(Ml.resolve()) != zl) ||
    (Dl && Xl(new Dl()) != Ul) ||
    (Ll && Xl(new Ll()) != Wl)) &&
    (Xl = function (e) {
      var t = $a(e),
        r = '[object Object]' == t ? e.constructor : void 0,
        n = r ? Ja(r) : ''
      if (n)
        switch (n) {
          case Vl:
            return Hl
          case $l:
            return Bl
          case ql:
            return zl
          case Kl:
            return Ul
          case Gl:
            return Wl
        }
      return t
    })
  var Yl = Xl,
    Jl = '[object Arguments]',
    Ql = '[object Array]',
    Zl = '[object Object]',
    ec = Object.prototype.hasOwnProperty
  function tc(e, t, r, n, i, a) {
    var s = zs(e),
      o = zs(t),
      l = s ? Ql : Yl(e),
      c = o ? Ql : Yl(t),
      u = (l = l == Jl ? Zl : l) == Zl,
      p = (c = c == Jl ? Zl : c) == Zl,
      h = l == c
    if (h && qs(e)) {
      if (!qs(t)) return !1
      ;(s = !0), (u = !1)
    }
    if (h && !u)
      return (
        a || (a = new ds()),
        s || ao(e)
          ? Sl(e, t, r, n, i, a)
          : (function (e, t, r, n, i, a, s) {
              switch (r) {
                case '[object DataView]':
                  if (
                    e.byteLength != t.byteLength ||
                    e.byteOffset != t.byteOffset
                  )
                    return !1
                  ;(e = e.buffer), (t = t.buffer)
                case '[object ArrayBuffer]':
                  return !(
                    e.byteLength != t.byteLength || !a(new Ts(e), new Ts(t))
                  )
                case '[object Boolean]':
                case '[object Date]':
                case '[object Number]':
                  return Oa(+e, +t)
                case '[object Error]':
                  return e.name == t.name && e.message == t.message
                case '[object RegExp]':
                case '[object String]':
                  return e == t + ''
                case '[object Map]':
                  var o = Tl
                case '[object Set]':
                  var l = 1 & n
                  if ((o || (o = Cl), e.size != t.size && !l)) return !1
                  var c = s.get(e)
                  if (c) return c == t
                  ;(n |= 2), s.set(e, t)
                  var u = Sl(o(e), o(t), n, i, a, s)
                  return s.delete(e), u
                case '[object Symbol]':
                  if (Rl) return Rl.call(e) == Rl.call(t)
              }
              return !1
            })(e, t, l, r, n, i, a)
      )
    if (!(1 & r)) {
      var d = u && ec.call(e, '__wrapped__'),
        f = p && ec.call(t, '__wrapped__')
      if (d || f) {
        var m = d ? e.value() : e,
          y = f ? t.value() : t
        return a || (a = new ds()), i(m, y, r, n, a)
      }
    }
    return (
      !!h &&
      (a || (a = new ds()),
      (function (e, t, r, n, i, a) {
        var s = 1 & r,
          o = Fl(e),
          l = o.length
        if (l != Fl(t).length && !s) return !1
        for (var c = l; c--; ) {
          var u = o[c]
          if (!(s ? u in t : jl.call(t, u))) return !1
        }
        var p = a.get(e),
          h = a.get(t)
        if (p && h) return p == t && h == e
        var d = !0
        a.set(e, t), a.set(t, e)
        for (var f = s; ++c < l; ) {
          var m = e[(u = o[c])],
            y = t[u]
          if (n) var g = s ? n(y, m, u, t, e, a) : n(m, y, u, e, t, a)
          if (!(void 0 === g ? m === y || i(m, y, r, n, a) : g)) {
            d = !1
            break
          }
          f || (f = 'constructor' == u)
        }
        if (d && !f) {
          var b = e.constructor,
            v = t.constructor
          b == v ||
            !('constructor' in e) ||
            !('constructor' in t) ||
            ('function' == typeof b &&
              b instanceof b &&
              'function' == typeof v &&
              v instanceof v) ||
            (d = !1)
        }
        return a.delete(e), a.delete(t), d
      })(e, t, r, n, i, a))
    )
  }
  function rc(e, t, r, n, i) {
    return (
      e === t ||
      (null == e || null == t || (!Fs(e) && !Fs(t))
        ? e != e && t != t
        : tc(e, t, r, n, rc, i))
    )
  }
  function nc(e) {
    return e == e && !qa(e)
  }
  function ic(e, t) {
    return function (r) {
      return null != r && r[e] === t && (void 0 !== t || e in Object(r))
    }
  }
  function ac(e) {
    var t = (function (e) {
      for (var t = Qo(e), r = t.length; r--; ) {
        var n = t[r],
          i = e[n]
        t[r] = [n, i, nc(i)]
      }
      return t
    })(e)
    return 1 == t.length && t[0][2]
      ? ic(t[0][0], t[0][1])
      : function (r) {
          return (
            r === e ||
            (function (e, t, r, n) {
              var i = r.length,
                a = i,
                s = !n
              if (null == e) return !a
              for (e = Object(e); i--; ) {
                var o = r[i]
                if (s && o[2] ? o[1] !== e[o[0]] : !(o[0] in e)) return !1
              }
              for (; ++i < a; ) {
                var l = (o = r[i])[0],
                  c = e[l],
                  u = o[1]
                if (s && o[2]) {
                  if (void 0 === c && !(l in e)) return !1
                } else {
                  var p = new ds()
                  if (n) var h = n(c, u, l, e, t, p)
                  if (!(void 0 === h ? rc(u, c, 3, n, p) : h)) return !1
                }
              }
              return !0
            })(r, e, t)
          )
        }
  }
  var sc = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    oc = /^\w*$/
  function lc(e, t) {
    if (zs(e)) return !1
    var r = typeof e
    return (
      !(
        'number' != r &&
        'symbol' != r &&
        'boolean' != r &&
        null != e &&
        !Lo(e)
      ) ||
      oc.test(e) ||
      !sc.test(e) ||
      (null != t && e in Object(t))
    )
  }
  function cc(e, t) {
    if ('function' != typeof e || (null != t && 'function' != typeof t))
      throw new TypeError('Expected a function')
    var r = function () {
      var n = arguments,
        i = t ? t.apply(this, n) : n[0],
        a = r.cache
      if (a.has(i)) return a.get(i)
      var s = e.apply(this, n)
      return (r.cache = a.set(i, s) || a), s
    }
    return (r.cache = new (cc.Cache || hs)()), r
  }
  cc.Cache = hs
  var uc =
      /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
    pc = /\\(\\)?/g,
    hc = (function (e) {
      var t = cc(e, function (e) {
          return 500 === r.size && r.clear(), e
        }),
        r = t.cache
      return t
    })(function (e) {
      var t = []
      return (
        46 === e.charCodeAt(0) && t.push(''),
        e.replace(uc, function (e, r, n, i) {
          t.push(n ? i.replace(pc, '$1') : r || e)
        }),
        t
      )
    }),
    dc = hc,
    fc = La ? La.prototype : void 0,
    mc = fc ? fc.toString : void 0
  function yc(e) {
    if ('string' == typeof e) return e
    if (zs(e)) return xl(e, yc) + ''
    if (Lo(e)) return mc ? mc.call(e) : ''
    var t = e + ''
    return '0' == t && 1 / e == -Infinity ? '-0' : t
  }
  function gc(e, t) {
    return zs(e)
      ? e
      : lc(e, t)
      ? [e]
      : dc(
          (function (e) {
            return null == e ? '' : yc(e)
          })(e)
        )
  }
  function bc(e) {
    if ('string' == typeof e || Lo(e)) return e
    var t = e + ''
    return '0' == t && 1 / e == -Infinity ? '-0' : t
  }
  function vc(e, t) {
    for (var r = 0, n = (t = gc(t, e)).length; null != e && r < n; )
      e = e[bc(t[r++])]
    return r && r == n ? e : void 0
  }
  function xc(e, t) {
    return null != e && t in Object(e)
  }
  function wc(e, t) {
    return (
      null != e &&
      (function (e, t, r) {
        for (var n = -1, i = (t = gc(t, e)).length, a = !1; ++n < i; ) {
          var s = bc(t[n])
          if (!(a = null != e && r(e, s))) break
          e = e[s]
        }
        return a || ++n != i
          ? a
          : !!(i = null == e ? 0 : e.length) &&
              Us(i) &&
              uo(s, i) &&
              (zs(e) || Bs(e))
      })(e, t, xc)
    )
  }
  function Ec(e, t) {
    return lc(e) && nc(t)
      ? ic(bc(e), t)
      : function (r) {
          var n = (function (e, t, r) {
            var n = null == e ? void 0 : vc(e, t)
            return void 0 === n ? r : n
          })(r, e)
          return void 0 === n && n === t ? wc(r, e) : rc(t, n, 3)
        }
  }
  function Pc(e) {
    return lc(e)
      ? ((t = bc(e)),
        function (e) {
          return null == e ? void 0 : e[t]
        })
      : (function (e) {
          return function (t) {
            return vc(t, e)
          }
        })(e)
    var t
  }
  function Sc(e, t) {
    var r = -1,
      n = Ws(e) ? Array(e.length) : []
    return (
      el(e, function (e, i, a) {
        n[++r] = t(e, i, a)
      }),
      n
    )
  }
  function Tc(e, t) {
    return (zs(e) ? xl : Sc)(
      e,
      (function (e) {
        return 'function' == typeof e
          ? e
          : null == e
          ? xo
          : 'object' == typeof e
          ? zs(e)
            ? Ec(e[0], e[1])
            : ac(e)
          : Pc(e)
      })(t)
    )
  }
  var Cc = function (e) {
      var t = e.colors,
        r = e.onClick,
        n = e.onSwatchHover,
        i = Ai({
          default: {
            swatches: { marginRight: '-10px' },
            swatch: {
              width: '22px',
              height: '22px',
              float: 'left',
              marginRight: '10px',
              marginBottom: '10px',
              borderRadius: '4px',
            },
            clear: { clear: 'both' },
          },
        })
      return React.createElement(
        'div',
        { style: i.swatches },
        Tc(t, function (e) {
          return React.createElement(gl, {
            key: e,
            color: e,
            style: i.swatch,
            onClick: r,
            onHover: n,
            focusStyle: { boxShadow: '0 0 4px ' + e },
          })
        }),
        React.createElement('div', { style: i.clear })
      )
    },
    Ac = function (e) {
      var t = e.onChange,
        r = e.onSwatchHover,
        n = e.hex,
        i = e.colors,
        a = e.width,
        s = e.triangle,
        o = e.styles,
        l = void 0 === o ? {} : o,
        c = e.className,
        u = void 0 === c ? '' : c,
        p = 'transparent' === n,
        h = function (e, r) {
          al(e) && t({ hex: e, source: 'hex' }, r)
        },
        d = Ai(
          Io(
            {
              default: {
                card: {
                  width: a,
                  background: '#fff',
                  boxShadow: '0 1px rgba(0,0,0,.1)',
                  borderRadius: '6px',
                  position: 'relative',
                },
                head: {
                  height: '110px',
                  background: n,
                  borderRadius: '6px 6px 0 0',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  position: 'relative',
                },
                body: { padding: '10px' },
                label: { fontSize: '18px', color: sl(n), position: 'relative' },
                triangle: {
                  width: '0px',
                  height: '0px',
                  borderStyle: 'solid',
                  borderWidth: '0 10px 10px 10px',
                  borderColor: 'transparent transparent ' + n + ' transparent',
                  position: 'absolute',
                  top: '-10px',
                  left: '50%',
                  marginLeft: '-10px',
                },
                input: {
                  width: '100%',
                  fontSize: '12px',
                  color: '#666',
                  border: '0px',
                  outline: 'none',
                  height: '22px',
                  boxShadow: 'inset 0 0 0 1px #ddd',
                  borderRadius: '4px',
                  padding: '0 7px',
                  boxSizing: 'border-box',
                },
              },
              'hide-triangle': { triangle: { display: 'none' } },
            },
            l
          ),
          { 'hide-triangle': 'hide' === s }
        )
      return React.createElement(
        'div',
        { style: d.card, className: 'block-picker ' + u },
        React.createElement('div', { style: d.triangle }),
        React.createElement(
          'div',
          { style: d.head },
          p && React.createElement(Ii, { borderRadius: '6px 6px 0 0' }),
          React.createElement('div', { style: d.label }, n)
        ),
        React.createElement(
          'div',
          { style: d.body },
          React.createElement(Cc, { colors: i, onClick: h, onSwatchHover: r }),
          React.createElement(Ui, {
            style: { input: d.input },
            value: n,
            onChange: h,
          })
        )
      )
    }
  ;(Ac.propTypes = {
    width: Na.oneOfType([Na.string, Na.number]),
    colors: Na.arrayOf(Na.string),
    triangle: Na.oneOf(['top', 'hide']),
    styles: Na.object,
  }),
    (Ac.defaultProps = {
      width: 170,
      colors: [
        '#D9E3F0',
        '#F47373',
        '#697689',
        '#37D67A',
        '#2CCCE4',
        '#555555',
        '#dce775',
        '#ff8a65',
        '#ba68c8',
      ],
      triangle: 'top',
      styles: {},
    }),
    ul(Ac)
  var Rc = '#ffcdd2',
    kc = '#e57373',
    Nc = '#f44336',
    Oc = '#d32f2f',
    Ic = '#b71c1c',
    Fc = '#f8bbd0',
    jc = '#f06292',
    _c = '#e91e63',
    Mc = '#c2185b',
    Dc = '#880e4f',
    Lc = '#e1bee7',
    Bc = '#ba68c8',
    zc = '#9c27b0',
    Uc = '#7b1fa2',
    Wc = '#4a148c',
    Hc = '#d1c4e9',
    Vc = '#9575cd',
    $c = '#673ab7',
    qc = '#512da8',
    Kc = '#311b92',
    Gc = '#c5cae9',
    Xc = '#7986cb',
    Yc = '#3f51b5',
    Jc = '#303f9f',
    Qc = '#1a237e',
    Zc = '#bbdefb',
    eu = '#64b5f6',
    tu = '#2196f3',
    ru = '#1976d2',
    nu = '#0d47a1',
    iu = '#b3e5fc',
    au = '#4fc3f7',
    su = '#03a9f4',
    ou = '#0288d1',
    lu = '#01579b',
    cu = '#b2ebf2',
    uu = '#4dd0e1',
    pu = '#00bcd4',
    hu = '#0097a7',
    du = '#006064',
    fu = '#b2dfdb',
    mu = '#4db6ac',
    yu = '#009688',
    gu = '#00796b',
    bu = '#004d40',
    vu = '#c8e6c9',
    xu = '#81c784',
    wu = '#4caf50',
    Eu = '#388e3c',
    Pu = '#dcedc8',
    Su = '#aed581',
    Tu = '#8bc34a',
    Cu = '#689f38',
    Au = '#33691e',
    Ru = '#f0f4c3',
    ku = '#dce775',
    Nu = '#cddc39',
    Ou = '#afb42b',
    Iu = '#827717',
    Fu = '#fff9c4',
    ju = '#fff176',
    _u = '#ffeb3b',
    Mu = '#fbc02d',
    Du = '#f57f17',
    Lu = '#ffecb3',
    Bu = '#ffd54f',
    zu = '#ffc107',
    Uu = '#ffa000',
    Wu = '#ff6f00',
    Hu = '#ffe0b2',
    Vu = '#ffb74d',
    $u = '#ff9800',
    qu = '#f57c00',
    Ku = '#e65100',
    Gu = '#ffccbc',
    Xu = '#ff8a65',
    Yu = '#ff5722',
    Ju = '#e64a19',
    Qu = '#bf360c',
    Zu = '#d7ccc8',
    ep = '#a1887f',
    tp = '#795548',
    rp = '#5d4037',
    np = '#3e2723',
    ip = '#cfd8dc',
    ap = '#90a4ae',
    sp = '#607d8b',
    op = '#455a64',
    lp = '#263238',
    cp = function (e) {
      var t = e.color,
        r = e.onClick,
        n = e.onSwatchHover,
        i = e.hover,
        a = e.active,
        s = e.circleSize,
        o = e.circleSpacing,
        l = Ai(
          {
            default: {
              swatch: {
                width: s,
                height: s,
                marginRight: o,
                marginBottom: o,
                transform: 'scale(1)',
                transition: '100ms transform ease',
              },
              Swatch: {
                borderRadius: '50%',
                background: 'transparent',
                boxShadow: 'inset 0 0 0 ' + (s / 2 + 1) + 'px ' + t,
                transition: '100ms box-shadow ease',
              },
            },
            hover: { swatch: { transform: 'scale(1.2)' } },
            active: { Swatch: { boxShadow: 'inset 0 0 0 3px ' + t } },
          },
          { hover: i, active: a }
        )
      return React.createElement(
        'div',
        { style: l.swatch },
        React.createElement(gl, {
          style: l.Swatch,
          color: t,
          onClick: r,
          onHover: n,
          focusStyle: { boxShadow: l.Swatch.boxShadow + ', 0 0 5px ' + t },
        })
      )
    }
  cp.defaultProps = { circleSize: 28, circleSpacing: 14 }
  var up = Ci.handleHover(cp),
    pp = function (e) {
      var t = e.width,
        r = e.onChange,
        n = e.onSwatchHover,
        i = e.colors,
        a = e.hex,
        s = e.circleSize,
        o = e.styles,
        l = void 0 === o ? {} : o,
        c = e.circleSpacing,
        u = e.className,
        p = void 0 === u ? '' : u,
        h = Ai(
          Io(
            {
              default: {
                card: {
                  width: t,
                  display: 'flex',
                  flexWrap: 'wrap',
                  marginRight: -c,
                  marginBottom: -c,
                },
              },
            },
            l
          )
        ),
        d = function (e, t) {
          return r({ hex: e, source: 'hex' }, t)
        }
      return React.createElement(
        'div',
        { style: h.card, className: 'circle-picker ' + p },
        Tc(i, function (e) {
          return React.createElement(up, {
            key: e,
            color: e,
            onClick: d,
            onSwatchHover: n,
            active: a === e.toLowerCase(),
            circleSize: s,
            circleSpacing: c,
          })
        })
      )
    }
  function hp(e) {
    return void 0 === e
  }
  ;(pp.propTypes = {
    width: Na.oneOfType([Na.string, Na.number]),
    circleSize: Na.number,
    circleSpacing: Na.number,
    styles: Na.object,
  }),
    (pp.defaultProps = {
      width: 252,
      circleSize: 28,
      circleSpacing: 14,
      colors: [
        Nc,
        _c,
        zc,
        $c,
        Yc,
        tu,
        su,
        pu,
        yu,
        wu,
        Tu,
        Nu,
        _u,
        zu,
        $u,
        Yu,
        tp,
        sp,
      ],
      styles: {},
    }),
    ul(pp)
  var dp,
    fp =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    mp = (dp = wi) && dp.__esModule ? dp : { default: dp }
  var yp = function (e) {
      var t = e.fill,
        r = void 0 === t ? 'currentColor' : t,
        n = e.width,
        i = void 0 === n ? 24 : n,
        a = e.height,
        s = void 0 === a ? 24 : a,
        o = e.style,
        l = void 0 === o ? {} : o,
        c = (function (e, t) {
          var r = {}
          for (var n in e)
            t.indexOf(n) >= 0 ||
              (Object.prototype.hasOwnProperty.call(e, n) && (r[n] = e[n]))
          return r
        })(e, ['fill', 'width', 'height', 'style'])
      return mp.default.createElement(
        'svg',
        fp(
          {
            viewBox: '0 0 24 24',
            style: fp({ fill: r, width: i, height: s }, l),
          },
          c
        ),
        mp.default.createElement('path', {
          d: 'M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z',
        })
      )
    },
    gp = (function () {
      function e(e, t) {
        for (var r = 0; r < t.length; r++) {
          var n = t[r]
          ;(n.enumerable = n.enumerable || !1),
            (n.configurable = !0),
            'value' in n && (n.writable = !0),
            Object.defineProperty(e, n.key, n)
        }
      }
      return function (t, r, n) {
        return r && e(t.prototype, r), n && e(t, n), t
      }
    })()
  var bp = (function (e) {
    function t(e) {
      !(function (e, t) {
        if (!(e instanceof t))
          throw new TypeError('Cannot call a class as a function')
      })(this, t)
      var r = (function (e, t) {
        if (!e)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        return !t || ('object' != typeof t && 'function' != typeof t) ? e : t
      })(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this))
      return (
        (r.toggleViews = function () {
          'hex' === r.state.view
            ? r.setState({ view: 'rgb' })
            : 'rgb' === r.state.view
            ? r.setState({ view: 'hsl' })
            : 'hsl' === r.state.view &&
              (1 === r.props.hsl.a
                ? r.setState({ view: 'hex' })
                : r.setState({ view: 'rgb' }))
        }),
        (r.handleChange = function (e, t) {
          e.hex
            ? al(e.hex) && r.props.onChange({ hex: e.hex, source: 'hex' }, t)
            : e.r || e.g || e.b
            ? r.props.onChange(
                {
                  r: e.r || r.props.rgb.r,
                  g: e.g || r.props.rgb.g,
                  b: e.b || r.props.rgb.b,
                  source: 'rgb',
                },
                t
              )
            : e.a
            ? (e.a < 0 ? (e.a = 0) : e.a > 1 && (e.a = 1),
              r.props.onChange(
                {
                  h: r.props.hsl.h,
                  s: r.props.hsl.s,
                  l: r.props.hsl.l,
                  a: Math.round(100 * e.a) / 100,
                  source: 'rgb',
                },
                t
              ))
            : (e.h || e.s || e.l) &&
              ('string' == typeof e.s &&
                e.s.includes('%') &&
                (e.s = e.s.replace('%', '')),
              'string' == typeof e.l &&
                e.l.includes('%') &&
                (e.l = e.l.replace('%', '')),
              1 == e.s ? (e.s = 0.01) : 1 == e.l && (e.l = 0.01),
              r.props.onChange(
                {
                  h: e.h || r.props.hsl.h,
                  s: Number(hp(e.s) ? r.props.hsl.s : e.s),
                  l: Number(hp(e.l) ? r.props.hsl.l : e.l),
                  source: 'hsl',
                },
                t
              ))
        }),
        (r.showHighlight = function (e) {
          e.currentTarget.style.background = '#eee'
        }),
        (r.hideHighlight = function (e) {
          e.currentTarget.style.background = 'transparent'
        }),
        1 !== e.hsl.a && 'hex' === e.view
          ? (r.state = { view: 'rgb' })
          : (r.state = { view: e.view }),
        r
      )
    }
    return (
      (function (e, t) {
        if ('function' != typeof t && null !== t)
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof t
          )
        ;(e.prototype = Object.create(t && t.prototype, {
          constructor: {
            value: e,
            enumerable: !1,
            writable: !0,
            configurable: !0,
          },
        })),
          t &&
            (Object.setPrototypeOf
              ? Object.setPrototypeOf(e, t)
              : (e.__proto__ = t))
      })(t, React.Component),
      gp(
        t,
        [
          {
            key: 'render',
            value: function () {
              var e = this,
                t = Ai(
                  {
                    default: {
                      wrap: { paddingTop: '16px', display: 'flex' },
                      fields: {
                        flex: '1',
                        display: 'flex',
                        marginLeft: '-6px',
                      },
                      field: { paddingLeft: '6px', width: '100%' },
                      alpha: { paddingLeft: '6px', width: '100%' },
                      toggle: {
                        width: '32px',
                        textAlign: 'right',
                        position: 'relative',
                      },
                      icon: {
                        marginRight: '-4px',
                        marginTop: '12px',
                        cursor: 'pointer',
                        position: 'relative',
                      },
                      iconHighlight: {
                        position: 'absolute',
                        width: '24px',
                        height: '28px',
                        background: '#eee',
                        borderRadius: '4px',
                        top: '10px',
                        left: '12px',
                        display: 'none',
                      },
                      input: {
                        fontSize: '11px',
                        color: '#333',
                        width: '100%',
                        borderRadius: '2px',
                        border: 'none',
                        boxShadow: 'inset 0 0 0 1px #dadada',
                        height: '21px',
                        textAlign: 'center',
                      },
                      label: {
                        textTransform: 'uppercase',
                        fontSize: '11px',
                        lineHeight: '11px',
                        color: '#969696',
                        textAlign: 'center',
                        display: 'block',
                        marginTop: '12px',
                      },
                      svg: {
                        fill: '#333',
                        width: '24px',
                        height: '24px',
                        border: '1px transparent solid',
                        borderRadius: '5px',
                      },
                    },
                    disableAlpha: { alpha: { display: 'none' } },
                  },
                  this.props,
                  this.state
                ),
                r = void 0
              return (
                'hex' === this.state.view
                  ? (r = React.createElement(
                      'div',
                      { style: t.fields, className: 'flexbox-fix' },
                      React.createElement(
                        'div',
                        { style: t.field },
                        React.createElement(Ui, {
                          style: { input: t.input, label: t.label },
                          label: 'hex',
                          value: this.props.hex,
                          onChange: this.handleChange,
                        })
                      )
                    ))
                  : 'rgb' === this.state.view
                  ? (r = React.createElement(
                      'div',
                      { style: t.fields, className: 'flexbox-fix' },
                      React.createElement(
                        'div',
                        { style: t.field },
                        React.createElement(Ui, {
                          style: { input: t.input, label: t.label },
                          label: 'r',
                          value: this.props.rgb.r,
                          onChange: this.handleChange,
                        })
                      ),
                      React.createElement(
                        'div',
                        { style: t.field },
                        React.createElement(Ui, {
                          style: { input: t.input, label: t.label },
                          label: 'g',
                          value: this.props.rgb.g,
                          onChange: this.handleChange,
                        })
                      ),
                      React.createElement(
                        'div',
                        { style: t.field },
                        React.createElement(Ui, {
                          style: { input: t.input, label: t.label },
                          label: 'b',
                          value: this.props.rgb.b,
                          onChange: this.handleChange,
                        })
                      ),
                      React.createElement(
                        'div',
                        { style: t.alpha },
                        React.createElement(Ui, {
                          style: { input: t.input, label: t.label },
                          label: 'a',
                          value: this.props.rgb.a,
                          arrowOffset: 0.01,
                          onChange: this.handleChange,
                        })
                      )
                    ))
                  : 'hsl' === this.state.view &&
                    (r = React.createElement(
                      'div',
                      { style: t.fields, className: 'flexbox-fix' },
                      React.createElement(
                        'div',
                        { style: t.field },
                        React.createElement(Ui, {
                          style: { input: t.input, label: t.label },
                          label: 'h',
                          value: Math.round(this.props.hsl.h),
                          onChange: this.handleChange,
                        })
                      ),
                      React.createElement(
                        'div',
                        { style: t.field },
                        React.createElement(Ui, {
                          style: { input: t.input, label: t.label },
                          label: 's',
                          value: Math.round(100 * this.props.hsl.s) + '%',
                          onChange: this.handleChange,
                        })
                      ),
                      React.createElement(
                        'div',
                        { style: t.field },
                        React.createElement(Ui, {
                          style: { input: t.input, label: t.label },
                          label: 'l',
                          value: Math.round(100 * this.props.hsl.l) + '%',
                          onChange: this.handleChange,
                        })
                      ),
                      React.createElement(
                        'div',
                        { style: t.alpha },
                        React.createElement(Ui, {
                          style: { input: t.input, label: t.label },
                          label: 'a',
                          value: this.props.hsl.a,
                          arrowOffset: 0.01,
                          onChange: this.handleChange,
                        })
                      )
                    )),
                React.createElement(
                  'div',
                  { style: t.wrap, className: 'flexbox-fix' },
                  r,
                  React.createElement(
                    'div',
                    { style: t.toggle },
                    React.createElement(
                      'div',
                      {
                        style: t.icon,
                        onClick: this.toggleViews,
                        ref: function (t) {
                          return (e.icon = t)
                        },
                      },
                      React.createElement(yp, {
                        style: t.svg,
                        onMouseOver: this.showHighlight,
                        onMouseEnter: this.showHighlight,
                        onMouseOut: this.hideHighlight,
                      })
                    )
                  )
                )
              )
            },
          },
        ],
        [
          {
            key: 'getDerivedStateFromProps',
            value: function (e, t) {
              return 1 !== e.hsl.a && 'hex' === t.view ? { view: 'rgb' } : null
            },
          },
        ]
      ),
      t
    )
  })()
  bp.defaultProps = { view: 'hex' }
  var vp = function () {
      var e = Ai({
        default: {
          picker: {
            width: '12px',
            height: '12px',
            borderRadius: '6px',
            transform: 'translate(-6px, -1px)',
            backgroundColor: 'rgb(248, 248, 248)',
            boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
          },
        },
      })
      return React.createElement('div', { style: e.picker })
    },
    xp = function () {
      var e = Ai({
        default: {
          picker: {
            width: '12px',
            height: '12px',
            borderRadius: '6px',
            boxShadow: 'inset 0 0 0 1px #fff',
            transform: 'translate(-6px, -6px)',
          },
        },
      })
      return React.createElement('div', { style: e.picker })
    },
    wp = function (e) {
      var t = e.width,
        r = e.onChange,
        n = e.disableAlpha,
        i = e.rgb,
        a = e.hsl,
        s = e.hsv,
        o = e.hex,
        l = e.renderers,
        c = e.styles,
        u = void 0 === c ? {} : c,
        p = e.className,
        h = void 0 === p ? '' : p,
        d = e.defaultView,
        f = Ai(
          Io(
            {
              default: {
                picker: {
                  width: t,
                  background: '#fff',
                  borderRadius: '2px',
                  boxShadow: '0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)',
                  boxSizing: 'initial',
                  fontFamily: 'Menlo',
                },
                saturation: {
                  width: '100%',
                  paddingBottom: '55%',
                  position: 'relative',
                  borderRadius: '2px 2px 0 0',
                  overflow: 'hidden',
                },
                Saturation: { radius: '2px 2px 0 0' },
                body: { padding: '16px 16px 12px' },
                controls: { display: 'flex' },
                color: { width: '32px' },
                swatch: {
                  marginTop: '6px',
                  width: '16px',
                  height: '16px',
                  borderRadius: '8px',
                  position: 'relative',
                  overflow: 'hidden',
                },
                active: {
                  absolute: '0px 0px 0px 0px',
                  borderRadius: '8px',
                  boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.1)',
                  background:
                    'rgba(' + i.r + ', ' + i.g + ', ' + i.b + ', ' + i.a + ')',
                  zIndex: '2',
                },
                toggles: { flex: '1' },
                hue: {
                  height: '10px',
                  position: 'relative',
                  marginBottom: '8px',
                },
                Hue: { radius: '2px' },
                alpha: { height: '10px', position: 'relative' },
                Alpha: { radius: '2px' },
              },
              disableAlpha: {
                color: { width: '22px' },
                alpha: { display: 'none' },
                hue: { marginBottom: '0px' },
                swatch: { width: '10px', height: '10px', marginTop: '0px' },
              },
            },
            u
          ),
          { disableAlpha: n }
        )
      return React.createElement(
        'div',
        { style: f.picker, className: 'chrome-picker ' + h },
        React.createElement(
          'div',
          { style: f.saturation },
          React.createElement(Go, {
            style: f.Saturation,
            hsl: a,
            hsv: s,
            pointer: xp,
            onChange: r,
          })
        ),
        React.createElement(
          'div',
          { style: f.body },
          React.createElement(
            'div',
            { style: f.controls, className: 'flexbox-fix' },
            React.createElement(
              'div',
              { style: f.color },
              React.createElement(
                'div',
                { style: f.swatch },
                React.createElement('div', { style: f.active }),
                React.createElement(Ii, { renderers: l })
              )
            ),
            React.createElement(
              'div',
              { style: f.toggles },
              React.createElement(
                'div',
                { style: f.hue },
                React.createElement(qi, {
                  style: f.Hue,
                  hsl: a,
                  pointer: vp,
                  onChange: r,
                })
              ),
              React.createElement(
                'div',
                { style: f.alpha },
                React.createElement(Di, {
                  style: f.Alpha,
                  rgb: i,
                  hsl: a,
                  pointer: vp,
                  renderers: l,
                  onChange: r,
                })
              )
            )
          ),
          React.createElement(bp, {
            rgb: i,
            hsl: a,
            hex: o,
            view: d,
            onChange: r,
            disableAlpha: n,
          })
        )
      )
    }
  ;(wp.propTypes = {
    width: Na.oneOfType([Na.string, Na.number]),
    disableAlpha: Na.bool,
    styles: Na.object,
    defaultView: Na.oneOf(['hex', 'rgb', 'hsl']),
  }),
    (wp.defaultProps = { width: 225, disableAlpha: !1, styles: {} }),
    ul(wp)
  var Ep = function (e) {
      var t = e.color,
        r = e.onClick,
        n = void 0 === r ? function () {} : r,
        i = e.onSwatchHover,
        a = e.active,
        s = Ai(
          {
            default: {
              color: {
                background: t,
                width: '15px',
                height: '15px',
                float: 'left',
                marginRight: '5px',
                marginBottom: '5px',
                position: 'relative',
                cursor: 'pointer',
              },
              dot: {
                absolute: '5px 5px 5px 5px',
                background: sl(t),
                borderRadius: '50%',
                opacity: '0',
              },
            },
            active: { dot: { opacity: '1' } },
            'color-#FFFFFF': {
              color: { boxShadow: 'inset 0 0 0 1px #ddd' },
              dot: { background: '#000' },
            },
            transparent: { dot: { background: '#000' } },
          },
          {
            active: a,
            'color-#FFFFFF': '#FFFFFF' === t,
            transparent: 'transparent' === t,
          }
        )
      return React.createElement(
        gl,
        {
          style: s.color,
          color: t,
          onClick: n,
          onHover: i,
          focusStyle: { boxShadow: '0 0 4px ' + t },
        },
        React.createElement('div', { style: s.dot })
      )
    },
    Pp = function (e) {
      var t = e.hex,
        r = e.rgb,
        n = e.onChange,
        i = Ai({
          default: {
            fields: {
              display: 'flex',
              paddingBottom: '6px',
              paddingRight: '5px',
              position: 'relative',
            },
            active: {
              position: 'absolute',
              top: '6px',
              left: '5px',
              height: '9px',
              width: '9px',
              background: t,
            },
            HEXwrap: { flex: '6', position: 'relative' },
            HEXinput: {
              width: '80%',
              padding: '0px',
              paddingLeft: '20%',
              border: 'none',
              outline: 'none',
              background: 'none',
              fontSize: '12px',
              color: '#333',
              height: '16px',
            },
            HEXlabel: { display: 'none' },
            RGBwrap: { flex: '3', position: 'relative' },
            RGBinput: {
              width: '70%',
              padding: '0px',
              paddingLeft: '30%',
              border: 'none',
              outline: 'none',
              background: 'none',
              fontSize: '12px',
              color: '#333',
              height: '16px',
            },
            RGBlabel: {
              position: 'absolute',
              top: '3px',
              left: '0px',
              lineHeight: '16px',
              textTransform: 'uppercase',
              fontSize: '12px',
              color: '#999',
            },
          },
        }),
        a = function (e, t) {
          e.r || e.g || e.b
            ? n(
                { r: e.r || r.r, g: e.g || r.g, b: e.b || r.b, source: 'rgb' },
                t
              )
            : n({ hex: e.hex, source: 'hex' }, t)
        }
      return React.createElement(
        'div',
        { style: i.fields, className: 'flexbox-fix' },
        React.createElement('div', { style: i.active }),
        React.createElement(Ui, {
          style: { wrap: i.HEXwrap, input: i.HEXinput, label: i.HEXlabel },
          label: 'hex',
          value: t,
          onChange: a,
        }),
        React.createElement(Ui, {
          style: { wrap: i.RGBwrap, input: i.RGBinput, label: i.RGBlabel },
          label: 'r',
          value: r.r,
          onChange: a,
        }),
        React.createElement(Ui, {
          style: { wrap: i.RGBwrap, input: i.RGBinput, label: i.RGBlabel },
          label: 'g',
          value: r.g,
          onChange: a,
        }),
        React.createElement(Ui, {
          style: { wrap: i.RGBwrap, input: i.RGBinput, label: i.RGBlabel },
          label: 'b',
          value: r.b,
          onChange: a,
        })
      )
    },
    Sp = function (e) {
      var t = e.onChange,
        r = e.onSwatchHover,
        n = e.colors,
        i = e.hex,
        a = e.rgb,
        s = e.styles,
        o = void 0 === s ? {} : s,
        l = e.className,
        c = void 0 === l ? '' : l,
        u = Ai(
          Io(
            {
              default: {
                Compact: { background: '#f6f6f6', radius: '4px' },
                compact: {
                  paddingTop: '5px',
                  paddingLeft: '5px',
                  boxSizing: 'initial',
                  width: '240px',
                },
                clear: { clear: 'both' },
              },
            },
            o
          )
        ),
        p = function (e, r) {
          e.hex ? al(e.hex) && t({ hex: e.hex, source: 'hex' }, r) : t(e, r)
        }
      return React.createElement(
        Fo,
        { style: u.Compact, styles: o },
        React.createElement(
          'div',
          { style: u.compact, className: 'compact-picker ' + c },
          React.createElement(
            'div',
            null,
            Tc(n, function (e) {
              return React.createElement(Ep, {
                key: e,
                color: e,
                active: e.toLowerCase() === i,
                onClick: p,
                onSwatchHover: r,
              })
            }),
            React.createElement('div', { style: u.clear })
          ),
          React.createElement(Pp, { hex: i, rgb: a, onChange: p })
        )
      )
    }
  ;(Sp.propTypes = { colors: Na.arrayOf(Na.string), styles: Na.object }),
    (Sp.defaultProps = {
      colors: [
        '#4D4D4D',
        '#999999',
        '#FFFFFF',
        '#F44E3B',
        '#FE9200',
        '#FCDC00',
        '#DBDF00',
        '#A4DD00',
        '#68CCCA',
        '#73D8FF',
        '#AEA1FF',
        '#FDA1FF',
        '#333333',
        '#808080',
        '#cccccc',
        '#D33115',
        '#E27300',
        '#FCC400',
        '#B0BC00',
        '#68BC00',
        '#16A5A5',
        '#009CE0',
        '#7B64FF',
        '#FA28FF',
        '#000000',
        '#666666',
        '#B3B3B3',
        '#9F0500',
        '#C45100',
        '#FB9E00',
        '#808900',
        '#194D33',
        '#0C797D',
        '#0062B1',
        '#653294',
        '#AB149E',
      ],
      styles: {},
    }),
    ul(Sp)
  var Tp = Ci.handleHover(function (e) {
      var t = e.hover,
        r = e.color,
        n = e.onClick,
        i = e.onSwatchHover,
        a = {
          position: 'relative',
          zIndex: '2',
          outline: '2px solid #fff',
          boxShadow: '0 0 5px 2px rgba(0,0,0,0.25)',
        },
        s = Ai(
          {
            default: {
              swatch: { width: '25px', height: '25px', fontSize: '0' },
            },
            hover: { swatch: a },
          },
          { hover: t }
        )
      return React.createElement(
        'div',
        { style: s.swatch },
        React.createElement(gl, {
          color: r,
          onClick: n,
          onHover: i,
          focusStyle: a,
        })
      )
    }),
    Cp = function (e) {
      var t = e.width,
        r = e.colors,
        n = e.onChange,
        i = e.onSwatchHover,
        a = e.triangle,
        s = e.styles,
        o = void 0 === s ? {} : s,
        l = e.className,
        c = void 0 === l ? '' : l,
        u = Ai(
          Io(
            {
              default: {
                card: {
                  width: t,
                  background: '#fff',
                  border: '1px solid rgba(0,0,0,0.2)',
                  boxShadow: '0 3px 12px rgba(0,0,0,0.15)',
                  borderRadius: '4px',
                  position: 'relative',
                  padding: '5px',
                  display: 'flex',
                  flexWrap: 'wrap',
                },
                triangle: {
                  position: 'absolute',
                  border: '7px solid transparent',
                  borderBottomColor: '#fff',
                },
                triangleShadow: {
                  position: 'absolute',
                  border: '8px solid transparent',
                  borderBottomColor: 'rgba(0,0,0,0.15)',
                },
              },
              'hide-triangle': {
                triangle: { display: 'none' },
                triangleShadow: { display: 'none' },
              },
              'top-left-triangle': {
                triangle: { top: '-14px', left: '10px' },
                triangleShadow: { top: '-16px', left: '9px' },
              },
              'top-right-triangle': {
                triangle: { top: '-14px', right: '10px' },
                triangleShadow: { top: '-16px', right: '9px' },
              },
              'bottom-left-triangle': {
                triangle: {
                  top: '35px',
                  left: '10px',
                  transform: 'rotate(180deg)',
                },
                triangleShadow: {
                  top: '37px',
                  left: '9px',
                  transform: 'rotate(180deg)',
                },
              },
              'bottom-right-triangle': {
                triangle: {
                  top: '35px',
                  right: '10px',
                  transform: 'rotate(180deg)',
                },
                triangleShadow: {
                  top: '37px',
                  right: '9px',
                  transform: 'rotate(180deg)',
                },
              },
            },
            o
          ),
          {
            'hide-triangle': 'hide' === a,
            'top-left-triangle': 'top-left' === a,
            'top-right-triangle': 'top-right' === a,
            'bottom-left-triangle': 'bottom-left' === a,
            'bottom-right-triangle': 'bottom-right' === a,
          }
        ),
        p = function (e, t) {
          return n({ hex: e, source: 'hex' }, t)
        }
      return React.createElement(
        'div',
        { style: u.card, className: 'github-picker ' + c },
        React.createElement('div', { style: u.triangleShadow }),
        React.createElement('div', { style: u.triangle }),
        Tc(r, function (e) {
          return React.createElement(Tp, {
            color: e,
            key: e,
            onClick: p,
            onSwatchHover: i,
          })
        })
      )
    }
  ;(Cp.propTypes = {
    width: Na.oneOfType([Na.string, Na.number]),
    colors: Na.arrayOf(Na.string),
    triangle: Na.oneOf([
      'hide',
      'top-left',
      'top-right',
      'bottom-left',
      'bottom-right',
    ]),
    styles: Na.object,
  }),
    (Cp.defaultProps = {
      width: 200,
      colors: [
        '#B80000',
        '#DB3E00',
        '#FCCB00',
        '#008B02',
        '#006B76',
        '#1273DE',
        '#004DCF',
        '#5300EB',
        '#EB9694',
        '#FAD0C3',
        '#FEF3BD',
        '#C1E1C5',
        '#BEDADC',
        '#C4DEF6',
        '#BED3F3',
        '#D4C4FB',
      ],
      triangle: 'top-left',
      styles: {},
    }),
    ul(Cp)
  var Ap =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    Rp = function (e) {
      var t = e.width,
        r = e.height,
        n = e.onChange,
        i = e.hsl,
        a = e.direction,
        s = e.pointer,
        o = e.styles,
        l = void 0 === o ? {} : o,
        c = e.className,
        u = void 0 === c ? '' : c,
        p = Ai(
          Io(
            {
              default: {
                picker: { position: 'relative', width: t, height: r },
                hue: { radius: '2px' },
              },
            },
            l
          )
        )
      return React.createElement(
        'div',
        { style: p.picker, className: 'hue-picker ' + u },
        React.createElement(
          qi,
          Ap({}, p.hue, {
            hsl: i,
            pointer: s,
            onChange: function (e) {
              return n({ a: 1, h: e.h, l: 0.5, s: 1 })
            },
            direction: a,
          })
        )
      )
    }
  ;(Rp.propTypes = { styles: Na.object }),
    (Rp.defaultProps = {
      width: '316px',
      height: '16px',
      direction: 'horizontal',
      pointer: function (e) {
        var t = e.direction,
          r = Ai(
            {
              default: {
                picker: {
                  width: '18px',
                  height: '18px',
                  borderRadius: '50%',
                  transform: 'translate(-9px, -1px)',
                  backgroundColor: 'rgb(248, 248, 248)',
                  boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
                },
              },
              vertical: { picker: { transform: 'translate(-3px, -9px)' } },
            },
            { vertical: 'vertical' === t }
          )
        return React.createElement('div', { style: r.picker })
      },
      styles: {},
    }),
    ul(Rp)
  ul(function (e) {
    var t = e.onChange,
      r = e.hex,
      n = e.rgb,
      i = e.styles,
      a = void 0 === i ? {} : i,
      s = e.className,
      o = void 0 === s ? '' : s,
      l = Ai(
        Io(
          {
            default: {
              material: {
                width: '98px',
                height: '98px',
                padding: '16px',
                fontFamily: 'Roboto',
              },
              HEXwrap: { position: 'relative' },
              HEXinput: {
                width: '100%',
                marginTop: '12px',
                fontSize: '15px',
                color: '#333',
                padding: '0px',
                border: '0px',
                borderBottom: '2px solid ' + r,
                outline: 'none',
                height: '30px',
              },
              HEXlabel: {
                position: 'absolute',
                top: '0px',
                left: '0px',
                fontSize: '11px',
                color: '#999999',
                textTransform: 'capitalize',
              },
              Hex: { style: {} },
              RGBwrap: { position: 'relative' },
              RGBinput: {
                width: '100%',
                marginTop: '12px',
                fontSize: '15px',
                color: '#333',
                padding: '0px',
                border: '0px',
                borderBottom: '1px solid #eee',
                outline: 'none',
                height: '30px',
              },
              RGBlabel: {
                position: 'absolute',
                top: '0px',
                left: '0px',
                fontSize: '11px',
                color: '#999999',
                textTransform: 'capitalize',
              },
              split: {
                display: 'flex',
                marginRight: '-10px',
                paddingTop: '11px',
              },
              third: { flex: '1', paddingRight: '10px' },
            },
          },
          a
        )
      ),
      c = function (e, r) {
        e.hex
          ? al(e.hex) && t({ hex: e.hex, source: 'hex' }, r)
          : (e.r || e.g || e.b) &&
            t({ r: e.r || n.r, g: e.g || n.g, b: e.b || n.b, source: 'rgb' }, r)
      }
    return React.createElement(
      Fo,
      { styles: a },
      React.createElement(
        'div',
        { style: l.material, className: 'material-picker ' + o },
        React.createElement(Ui, {
          style: { wrap: l.HEXwrap, input: l.HEXinput, label: l.HEXlabel },
          label: 'hex',
          value: r,
          onChange: c,
        }),
        React.createElement(
          'div',
          { style: l.split, className: 'flexbox-fix' },
          React.createElement(
            'div',
            { style: l.third },
            React.createElement(Ui, {
              style: { wrap: l.RGBwrap, input: l.RGBinput, label: l.RGBlabel },
              label: 'r',
              value: n.r,
              onChange: c,
            })
          ),
          React.createElement(
            'div',
            { style: l.third },
            React.createElement(Ui, {
              style: { wrap: l.RGBwrap, input: l.RGBinput, label: l.RGBlabel },
              label: 'g',
              value: n.g,
              onChange: c,
            })
          ),
          React.createElement(
            'div',
            { style: l.third },
            React.createElement(Ui, {
              style: { wrap: l.RGBwrap, input: l.RGBinput, label: l.RGBlabel },
              label: 'b',
              value: n.b,
              onChange: c,
            })
          )
        )
      )
    )
  })
  var kp = function (e) {
      var t = e.onChange,
        r = e.rgb,
        n = e.hsv,
        i = e.hex,
        a = Ai({
          default: {
            fields: {
              paddingTop: '5px',
              paddingBottom: '9px',
              width: '80px',
              position: 'relative',
            },
            divider: { height: '5px' },
            RGBwrap: { position: 'relative' },
            RGBinput: {
              marginLeft: '40%',
              width: '40%',
              height: '18px',
              border: '1px solid #888888',
              boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',
              marginBottom: '5px',
              fontSize: '13px',
              paddingLeft: '3px',
              marginRight: '10px',
            },
            RGBlabel: {
              left: '0px',
              top: '0px',
              width: '34px',
              textTransform: 'uppercase',
              fontSize: '13px',
              height: '18px',
              lineHeight: '22px',
              position: 'absolute',
            },
            HEXwrap: { position: 'relative' },
            HEXinput: {
              marginLeft: '20%',
              width: '80%',
              height: '18px',
              border: '1px solid #888888',
              boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',
              marginBottom: '6px',
              fontSize: '13px',
              paddingLeft: '3px',
            },
            HEXlabel: {
              position: 'absolute',
              top: '0px',
              left: '0px',
              width: '14px',
              textTransform: 'uppercase',
              fontSize: '13px',
              height: '18px',
              lineHeight: '22px',
            },
            fieldSymbols: {
              position: 'absolute',
              top: '5px',
              right: '-7px',
              fontSize: '13px',
            },
            symbol: {
              height: '20px',
              lineHeight: '22px',
              paddingBottom: '7px',
            },
          },
        }),
        s = function (e, i) {
          e['#']
            ? al(e['#']) && t({ hex: e['#'], source: 'hex' }, i)
            : e.r || e.g || e.b
            ? t(
                { r: e.r || r.r, g: e.g || r.g, b: e.b || r.b, source: 'rgb' },
                i
              )
            : (e.h || e.s || e.v) &&
              t(
                { h: e.h || n.h, s: e.s || n.s, v: e.v || n.v, source: 'hsv' },
                i
              )
        }
      return React.createElement(
        'div',
        { style: a.fields },
        React.createElement(Ui, {
          style: { wrap: a.RGBwrap, input: a.RGBinput, label: a.RGBlabel },
          label: 'h',
          value: Math.round(n.h),
          onChange: s,
        }),
        React.createElement(Ui, {
          style: { wrap: a.RGBwrap, input: a.RGBinput, label: a.RGBlabel },
          label: 's',
          value: Math.round(100 * n.s),
          onChange: s,
        }),
        React.createElement(Ui, {
          style: { wrap: a.RGBwrap, input: a.RGBinput, label: a.RGBlabel },
          label: 'v',
          value: Math.round(100 * n.v),
          onChange: s,
        }),
        React.createElement('div', { style: a.divider }),
        React.createElement(Ui, {
          style: { wrap: a.RGBwrap, input: a.RGBinput, label: a.RGBlabel },
          label: 'r',
          value: r.r,
          onChange: s,
        }),
        React.createElement(Ui, {
          style: { wrap: a.RGBwrap, input: a.RGBinput, label: a.RGBlabel },
          label: 'g',
          value: r.g,
          onChange: s,
        }),
        React.createElement(Ui, {
          style: { wrap: a.RGBwrap, input: a.RGBinput, label: a.RGBlabel },
          label: 'b',
          value: r.b,
          onChange: s,
        }),
        React.createElement('div', { style: a.divider }),
        React.createElement(Ui, {
          style: { wrap: a.HEXwrap, input: a.HEXinput, label: a.HEXlabel },
          label: '#',
          value: i.replace('#', ''),
          onChange: s,
        }),
        React.createElement(
          'div',
          { style: a.fieldSymbols },
          React.createElement('div', { style: a.symbol }, '°'),
          React.createElement('div', { style: a.symbol }, '%'),
          React.createElement('div', { style: a.symbol }, '%')
        )
      )
    },
    Np = function (e) {
      var t = e.hsl,
        r = Ai(
          {
            default: {
              picker: {
                width: '12px',
                height: '12px',
                borderRadius: '6px',
                boxShadow: 'inset 0 0 0 1px #fff',
                transform: 'translate(-6px, -6px)',
              },
            },
            'black-outline': { picker: { boxShadow: 'inset 0 0 0 1px #000' } },
          },
          { 'black-outline': t.l > 0.5 }
        )
      return React.createElement('div', { style: r.picker })
    },
    Op = function () {
      var e = Ai({
        default: {
          triangle: {
            width: 0,
            height: 0,
            borderStyle: 'solid',
            borderWidth: '4px 0 4px 6px',
            borderColor: 'transparent transparent transparent #fff',
            position: 'absolute',
            top: '1px',
            left: '1px',
          },
          triangleBorder: {
            width: 0,
            height: 0,
            borderStyle: 'solid',
            borderWidth: '5px 0 5px 8px',
            borderColor: 'transparent transparent transparent #555',
          },
          left: {
            Extend: 'triangleBorder',
            transform: 'translate(-13px, -4px)',
          },
          leftInside: {
            Extend: 'triangle',
            transform: 'translate(-8px, -5px)',
          },
          right: {
            Extend: 'triangleBorder',
            transform: 'translate(20px, -14px) rotate(180deg)',
          },
          rightInside: {
            Extend: 'triangle',
            transform: 'translate(-8px, -5px)',
          },
        },
      })
      return React.createElement(
        'div',
        { style: e.pointer },
        React.createElement(
          'div',
          { style: e.left },
          React.createElement('div', { style: e.leftInside })
        ),
        React.createElement(
          'div',
          { style: e.right },
          React.createElement('div', { style: e.rightInside })
        )
      )
    },
    Ip = function (e) {
      var t = e.onClick,
        r = e.label,
        n = e.children,
        i = e.active,
        a = Ai(
          {
            default: {
              button: {
                backgroundImage:
                  'linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)',
                border: '1px solid #878787',
                borderRadius: '2px',
                height: '20px',
                boxShadow: '0 1px 0 0 #EAEAEA',
                fontSize: '14px',
                color: '#000',
                lineHeight: '20px',
                textAlign: 'center',
                marginBottom: '10px',
                cursor: 'pointer',
              },
            },
            active: { button: { boxShadow: '0 0 0 1px #878787' } },
          },
          { active: i }
        )
      return React.createElement('div', { style: a.button, onClick: t }, r || n)
    },
    Fp = function (e) {
      var t = e.rgb,
        r = e.currentColor,
        n = Ai({
          default: {
            swatches: {
              border: '1px solid #B3B3B3',
              borderBottom: '1px solid #F0F0F0',
              marginBottom: '2px',
              marginTop: '1px',
            },
            new: {
              height: '34px',
              background: 'rgb(' + t.r + ',' + t.g + ', ' + t.b + ')',
              boxShadow:
                'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000',
            },
            current: {
              height: '34px',
              background: r,
              boxShadow:
                'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000',
            },
            label: { fontSize: '14px', color: '#000', textAlign: 'center' },
          },
        })
      return React.createElement(
        'div',
        null,
        React.createElement('div', { style: n.label }, 'new'),
        React.createElement(
          'div',
          { style: n.swatches },
          React.createElement('div', { style: n.new }),
          React.createElement('div', { style: n.current })
        ),
        React.createElement('div', { style: n.label }, 'current')
      )
    },
    jp = (function () {
      function e(e, t) {
        for (var r = 0; r < t.length; r++) {
          var n = t[r]
          ;(n.enumerable = n.enumerable || !1),
            (n.configurable = !0),
            'value' in n && (n.writable = !0),
            Object.defineProperty(e, n.key, n)
        }
      }
      return function (t, r, n) {
        return r && e(t.prototype, r), n && e(t, n), t
      }
    })()
  var _p = (function (e) {
    function t(e) {
      !(function (e, t) {
        if (!(e instanceof t))
          throw new TypeError('Cannot call a class as a function')
      })(this, t)
      var r = (function (e, t) {
        if (!e)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        return !t || ('object' != typeof t && 'function' != typeof t) ? e : t
      })(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this))
      return (r.state = { currentColor: e.hex }), r
    }
    return (
      (function (e, t) {
        if ('function' != typeof t && null !== t)
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof t
          )
        ;(e.prototype = Object.create(t && t.prototype, {
          constructor: {
            value: e,
            enumerable: !1,
            writable: !0,
            configurable: !0,
          },
        })),
          t &&
            (Object.setPrototypeOf
              ? Object.setPrototypeOf(e, t)
              : (e.__proto__ = t))
      })(t, React.Component),
      jp(t, [
        {
          key: 'render',
          value: function () {
            var e = this.props,
              t = e.styles,
              r = void 0 === t ? {} : t,
              n = e.className,
              i = void 0 === n ? '' : n,
              a = Ai(
                Io(
                  {
                    default: {
                      picker: {
                        background: '#DCDCDC',
                        borderRadius: '4px',
                        boxShadow:
                          '0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)',
                        boxSizing: 'initial',
                        width: '513px',
                      },
                      head: {
                        backgroundImage:
                          'linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)',
                        borderBottom: '1px solid #B1B1B1',
                        boxShadow:
                          'inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)',
                        height: '23px',
                        lineHeight: '24px',
                        borderRadius: '4px 4px 0 0',
                        fontSize: '13px',
                        color: '#4D4D4D',
                        textAlign: 'center',
                      },
                      body: { padding: '15px 15px 0', display: 'flex' },
                      saturation: {
                        width: '256px',
                        height: '256px',
                        position: 'relative',
                        border: '2px solid #B3B3B3',
                        borderBottom: '2px solid #F0F0F0',
                        overflow: 'hidden',
                      },
                      hue: {
                        position: 'relative',
                        height: '256px',
                        width: '19px',
                        marginLeft: '10px',
                        border: '2px solid #B3B3B3',
                        borderBottom: '2px solid #F0F0F0',
                      },
                      controls: { width: '180px', marginLeft: '10px' },
                      top: { display: 'flex' },
                      previews: { width: '60px' },
                      actions: { flex: '1', marginLeft: '20px' },
                    },
                  },
                  r
                )
              )
            return React.createElement(
              'div',
              { style: a.picker, className: 'photoshop-picker ' + i },
              React.createElement('div', { style: a.head }, this.props.header),
              React.createElement(
                'div',
                { style: a.body, className: 'flexbox-fix' },
                React.createElement(
                  'div',
                  { style: a.saturation },
                  React.createElement(Go, {
                    hsl: this.props.hsl,
                    hsv: this.props.hsv,
                    pointer: Np,
                    onChange: this.props.onChange,
                  })
                ),
                React.createElement(
                  'div',
                  { style: a.hue },
                  React.createElement(qi, {
                    direction: 'vertical',
                    hsl: this.props.hsl,
                    pointer: Op,
                    onChange: this.props.onChange,
                  })
                ),
                React.createElement(
                  'div',
                  { style: a.controls },
                  React.createElement(
                    'div',
                    { style: a.top, className: 'flexbox-fix' },
                    React.createElement(
                      'div',
                      { style: a.previews },
                      React.createElement(Fp, {
                        rgb: this.props.rgb,
                        currentColor: this.state.currentColor,
                      })
                    ),
                    React.createElement(
                      'div',
                      { style: a.actions },
                      React.createElement(Ip, {
                        label: 'OK',
                        onClick: this.props.onAccept,
                        active: !0,
                      }),
                      React.createElement(Ip, {
                        label: 'Cancel',
                        onClick: this.props.onCancel,
                      }),
                      React.createElement(kp, {
                        onChange: this.props.onChange,
                        rgb: this.props.rgb,
                        hsv: this.props.hsv,
                        hex: this.props.hex,
                      })
                    )
                  )
                )
              )
            )
          },
        },
      ]),
      t
    )
  })()
  ;(_p.propTypes = { header: Na.string, styles: Na.object }),
    (_p.defaultProps = { header: 'Color Picker', styles: {} }),
    ul(_p)
  var Mp = function (e) {
      var t = e.onChange,
        r = e.rgb,
        n = e.hsl,
        i = e.hex,
        a = e.disableAlpha,
        s = Ai(
          {
            default: {
              fields: { display: 'flex', paddingTop: '4px' },
              single: { flex: '1', paddingLeft: '6px' },
              alpha: { flex: '1', paddingLeft: '6px' },
              double: { flex: '2' },
              input: {
                width: '80%',
                padding: '4px 10% 3px',
                border: 'none',
                boxShadow: 'inset 0 0 0 1px #ccc',
                fontSize: '11px',
              },
              label: {
                display: 'block',
                textAlign: 'center',
                fontSize: '11px',
                color: '#222',
                paddingTop: '3px',
                paddingBottom: '4px',
                textTransform: 'capitalize',
              },
            },
            disableAlpha: { alpha: { display: 'none' } },
          },
          { disableAlpha: a }
        ),
        o = function (e, i) {
          e.hex
            ? al(e.hex) && t({ hex: e.hex, source: 'hex' }, i)
            : e.r || e.g || e.b
            ? t(
                {
                  r: e.r || r.r,
                  g: e.g || r.g,
                  b: e.b || r.b,
                  a: r.a,
                  source: 'rgb',
                },
                i
              )
            : e.a &&
              (e.a < 0 ? (e.a = 0) : e.a > 100 && (e.a = 100),
              (e.a /= 100),
              t({ h: n.h, s: n.s, l: n.l, a: e.a, source: 'rgb' }, i))
        }
      return React.createElement(
        'div',
        { style: s.fields, className: 'flexbox-fix' },
        React.createElement(
          'div',
          { style: s.double },
          React.createElement(Ui, {
            style: { input: s.input, label: s.label },
            label: 'hex',
            value: i.replace('#', ''),
            onChange: o,
          })
        ),
        React.createElement(
          'div',
          { style: s.single },
          React.createElement(Ui, {
            style: { input: s.input, label: s.label },
            label: 'r',
            value: r.r,
            onChange: o,
            dragLabel: 'true',
            dragMax: '255',
          })
        ),
        React.createElement(
          'div',
          { style: s.single },
          React.createElement(Ui, {
            style: { input: s.input, label: s.label },
            label: 'g',
            value: r.g,
            onChange: o,
            dragLabel: 'true',
            dragMax: '255',
          })
        ),
        React.createElement(
          'div',
          { style: s.single },
          React.createElement(Ui, {
            style: { input: s.input, label: s.label },
            label: 'b',
            value: r.b,
            onChange: o,
            dragLabel: 'true',
            dragMax: '255',
          })
        ),
        React.createElement(
          'div',
          { style: s.alpha },
          React.createElement(Ui, {
            style: { input: s.input, label: s.label },
            label: 'a',
            value: Math.round(100 * r.a),
            onChange: o,
            dragLabel: 'true',
            dragMax: '100',
          })
        )
      )
    },
    Dp =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    Lp = function (e) {
      var t = e.colors,
        r = e.onClick,
        n = void 0 === r ? function () {} : r,
        i = e.onSwatchHover,
        a = Ai(
          {
            default: {
              colors: {
                margin: '0 -10px',
                padding: '10px 0 0 10px',
                borderTop: '1px solid #eee',
                display: 'flex',
                flexWrap: 'wrap',
                position: 'relative',
              },
              swatchWrap: {
                width: '16px',
                height: '16px',
                margin: '0 10px 10px 0',
              },
              swatch: {
                borderRadius: '3px',
                boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)',
              },
            },
            'no-presets': { colors: { display: 'none' } },
          },
          { 'no-presets': !t || !t.length }
        ),
        s = function (e, t) {
          n({ hex: e, source: 'hex' }, t)
        }
      return React.createElement(
        'div',
        { style: a.colors, className: 'flexbox-fix' },
        t.map(function (e) {
          var t = 'string' == typeof e ? { color: e } : e,
            r = '' + t.color + (t.title || '')
          return React.createElement(
            'div',
            { key: r, style: a.swatchWrap },
            React.createElement(
              gl,
              Dp({}, t, {
                style: a.swatch,
                onClick: s,
                onHover: i,
                focusStyle: {
                  boxShadow:
                    'inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ' + t.color,
                },
              })
            )
          )
        })
      )
    }
  Lp.propTypes = {
    colors: Na.arrayOf(
      Na.oneOfType([
        Na.string,
        Na.shape({ color: Na.string, title: Na.string }),
      ])
    ).isRequired,
  }
  var Bp =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    zp = function (e) {
      var t = e.width,
        r = e.rgb,
        n = e.hex,
        i = e.hsv,
        a = e.hsl,
        s = e.onChange,
        o = e.onSwatchHover,
        l = e.disableAlpha,
        c = e.presetColors,
        u = e.renderers,
        p = e.styles,
        h = void 0 === p ? {} : p,
        d = e.className,
        f = void 0 === d ? '' : d,
        m = Ai(
          Io(
            {
              default: Bp(
                {
                  picker: {
                    width: t,
                    padding: '10px 10px 0',
                    boxSizing: 'initial',
                    background: '#fff',
                    borderRadius: '4px',
                    boxShadow:
                      '0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)',
                  },
                  saturation: {
                    width: '100%',
                    paddingBottom: '75%',
                    position: 'relative',
                    overflow: 'hidden',
                  },
                  Saturation: {
                    radius: '3px',
                    shadow:
                      'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)',
                  },
                  controls: { display: 'flex' },
                  sliders: { padding: '4px 0', flex: '1' },
                  color: {
                    width: '24px',
                    height: '24px',
                    position: 'relative',
                    marginTop: '4px',
                    marginLeft: '4px',
                    borderRadius: '3px',
                  },
                  activeColor: {
                    absolute: '0px 0px 0px 0px',
                    borderRadius: '2px',
                    background:
                      'rgba(' + r.r + ',' + r.g + ',' + r.b + ',' + r.a + ')',
                    boxShadow:
                      'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)',
                  },
                  hue: {
                    position: 'relative',
                    height: '10px',
                    overflow: 'hidden',
                  },
                  Hue: {
                    radius: '2px',
                    shadow:
                      'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)',
                  },
                  alpha: {
                    position: 'relative',
                    height: '10px',
                    marginTop: '4px',
                    overflow: 'hidden',
                  },
                  Alpha: {
                    radius: '2px',
                    shadow:
                      'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)',
                  },
                },
                h
              ),
              disableAlpha: {
                color: { height: '10px' },
                hue: { height: '10px' },
                alpha: { display: 'none' },
              },
            },
            h
          ),
          { disableAlpha: l }
        )
      return React.createElement(
        'div',
        { style: m.picker, className: 'sketch-picker ' + f },
        React.createElement(
          'div',
          { style: m.saturation },
          React.createElement(Go, {
            style: m.Saturation,
            hsl: a,
            hsv: i,
            onChange: s,
          })
        ),
        React.createElement(
          'div',
          { style: m.controls, className: 'flexbox-fix' },
          React.createElement(
            'div',
            { style: m.sliders },
            React.createElement(
              'div',
              { style: m.hue },
              React.createElement(qi, { style: m.Hue, hsl: a, onChange: s })
            ),
            React.createElement(
              'div',
              { style: m.alpha },
              React.createElement(Di, {
                style: m.Alpha,
                rgb: r,
                hsl: a,
                renderers: u,
                onChange: s,
              })
            )
          ),
          React.createElement(
            'div',
            { style: m.color },
            React.createElement(Ii, null),
            React.createElement('div', { style: m.activeColor })
          )
        ),
        React.createElement(Mp, {
          rgb: r,
          hsl: a,
          hex: n,
          onChange: s,
          disableAlpha: l,
        }),
        React.createElement(Lp, { colors: c, onClick: s, onSwatchHover: o })
      )
    }
  ;(zp.propTypes = {
    disableAlpha: Na.bool,
    width: Na.oneOfType([Na.string, Na.number]),
    styles: Na.object,
  }),
    (zp.defaultProps = {
      disableAlpha: !1,
      width: 200,
      styles: {},
      presetColors: [
        '#D0021B',
        '#F5A623',
        '#F8E71C',
        '#8B572A',
        '#7ED321',
        '#417505',
        '#BD10E0',
        '#9013FE',
        '#4A90E2',
        '#50E3C2',
        '#B8E986',
        '#000000',
        '#4A4A4A',
        '#9B9B9B',
        '#FFFFFF',
      ],
    })
  var Up = ul(zp),
    Wp = function (e) {
      var t = e.hsl,
        r = e.offset,
        n = e.onClick,
        i = void 0 === n ? function () {} : n,
        a = e.active,
        s = e.first,
        o = e.last,
        l = Ai(
          {
            default: {
              swatch: {
                height: '12px',
                background: 'hsl(' + t.h + ', 50%, ' + 100 * r + '%)',
                cursor: 'pointer',
              },
            },
            first: { swatch: { borderRadius: '2px 0 0 2px' } },
            last: { swatch: { borderRadius: '0 2px 2px 0' } },
            active: {
              swatch: { transform: 'scaleY(1.8)', borderRadius: '3.6px/2px' },
            },
          },
          { active: a, first: s, last: o }
        )
      return React.createElement('div', {
        style: l.swatch,
        onClick: function (e) {
          return i({ h: t.h, s: 0.5, l: r, source: 'hsl' }, e)
        },
      })
    },
    Hp = function (e) {
      var t = e.onClick,
        r = e.hsl,
        n = Ai({
          default: {
            swatches: { marginTop: '20px' },
            swatch: {
              boxSizing: 'border-box',
              width: '20%',
              paddingRight: '1px',
              float: 'left',
            },
            clear: { clear: 'both' },
          },
        }),
        i = 0.1
      return React.createElement(
        'div',
        { style: n.swatches },
        React.createElement(
          'div',
          { style: n.swatch },
          React.createElement(Wp, {
            hsl: r,
            offset: '.80',
            active: Math.abs(r.l - 0.8) < i && Math.abs(r.s - 0.5) < i,
            onClick: t,
            first: !0,
          })
        ),
        React.createElement(
          'div',
          { style: n.swatch },
          React.createElement(Wp, {
            hsl: r,
            offset: '.65',
            active: Math.abs(r.l - 0.65) < i && Math.abs(r.s - 0.5) < i,
            onClick: t,
          })
        ),
        React.createElement(
          'div',
          { style: n.swatch },
          React.createElement(Wp, {
            hsl: r,
            offset: '.50',
            active: Math.abs(r.l - 0.5) < i && Math.abs(r.s - 0.5) < i,
            onClick: t,
          })
        ),
        React.createElement(
          'div',
          { style: n.swatch },
          React.createElement(Wp, {
            hsl: r,
            offset: '.35',
            active: Math.abs(r.l - 0.35) < i && Math.abs(r.s - 0.5) < i,
            onClick: t,
          })
        ),
        React.createElement(
          'div',
          { style: n.swatch },
          React.createElement(Wp, {
            hsl: r,
            offset: '.20',
            active: Math.abs(r.l - 0.2) < i && Math.abs(r.s - 0.5) < i,
            onClick: t,
            last: !0,
          })
        ),
        React.createElement('div', { style: n.clear })
      )
    },
    Vp = function (e) {
      var t = e.hsl,
        r = e.onChange,
        n = e.pointer,
        i = e.styles,
        a = void 0 === i ? {} : i,
        s = e.className,
        o = void 0 === s ? '' : s,
        l = Ai(
          Io(
            {
              default: {
                hue: { height: '12px', position: 'relative' },
                Hue: { radius: '2px' },
              },
            },
            a
          )
        )
      return React.createElement(
        'div',
        { style: l.wrap || {}, className: 'slider-picker ' + o },
        React.createElement(
          'div',
          { style: l.hue },
          React.createElement(qi, {
            style: l.Hue,
            hsl: t,
            pointer: n,
            onChange: r,
          })
        ),
        React.createElement(
          'div',
          { style: l.swatches },
          React.createElement(Hp, { hsl: t, onClick: r })
        )
      )
    }
  ;(Vp.propTypes = { styles: Na.object }),
    (Vp.defaultProps = {
      pointer: function () {
        var e = Ai({
          default: {
            picker: {
              width: '14px',
              height: '14px',
              borderRadius: '6px',
              transform: 'translate(-7px, -1px)',
              backgroundColor: 'rgb(248, 248, 248)',
              boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
            },
          },
        })
        return React.createElement('div', { style: e.picker })
      },
      styles: {},
    }),
    ul(Vp)
  var $p =
      Object.assign ||
      function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t]
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
        }
        return e
      },
    qp = (function (e) {
      return e && e.__esModule ? e : { default: e }
    })(wi)
  var Kp = function (e) {
      var t = e.fill,
        r = void 0 === t ? 'currentColor' : t,
        n = e.width,
        i = void 0 === n ? 24 : n,
        a = e.height,
        s = void 0 === a ? 24 : a,
        o = e.style,
        l = void 0 === o ? {} : o,
        c = (function (e, t) {
          var r = {}
          for (var n in e)
            t.indexOf(n) >= 0 ||
              (Object.prototype.hasOwnProperty.call(e, n) && (r[n] = e[n]))
          return r
        })(e, ['fill', 'width', 'height', 'style'])
      return qp.default.createElement(
        'svg',
        $p(
          {
            viewBox: '0 0 24 24',
            style: $p({ fill: r, width: i, height: s }, l),
          },
          c
        ),
        qp.default.createElement('path', {
          d: 'M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z',
        })
      )
    },
    Gp = function (e) {
      var t = e.color,
        r = e.onClick,
        n = void 0 === r ? function () {} : r,
        i = e.onSwatchHover,
        a = e.first,
        s = e.last,
        o = e.active,
        l = Ai(
          {
            default: {
              color: {
                width: '40px',
                height: '24px',
                cursor: 'pointer',
                background: t,
                marginBottom: '1px',
              },
              check: { color: sl(t), marginLeft: '8px', display: 'none' },
            },
            first: {
              color: { overflow: 'hidden', borderRadius: '2px 2px 0 0' },
            },
            last: {
              color: { overflow: 'hidden', borderRadius: '0 0 2px 2px' },
            },
            active: { check: { display: 'block' } },
            'color-#FFFFFF': {
              color: { boxShadow: 'inset 0 0 0 1px #ddd' },
              check: { color: '#333' },
            },
            transparent: { check: { color: '#333' } },
          },
          {
            first: a,
            last: s,
            active: o,
            'color-#FFFFFF': '#FFFFFF' === t,
            transparent: 'transparent' === t,
          }
        )
      return React.createElement(
        gl,
        {
          color: t,
          style: l.color,
          onClick: n,
          onHover: i,
          focusStyle: { boxShadow: '0 0 4px ' + t },
        },
        React.createElement(
          'div',
          { style: l.check },
          React.createElement(Kp, null)
        )
      )
    },
    Xp = function (e) {
      var t = e.onClick,
        r = e.onSwatchHover,
        n = e.group,
        i = e.active,
        a = Ai({
          default: {
            group: {
              paddingBottom: '10px',
              width: '40px',
              float: 'left',
              marginRight: '10px',
            },
          },
        })
      return React.createElement(
        'div',
        { style: a.group },
        Tc(n, function (e, a) {
          return React.createElement(Gp, {
            key: e,
            color: e,
            active: e.toLowerCase() === i,
            first: 0 === a,
            last: a === n.length - 1,
            onClick: t,
            onSwatchHover: r,
          })
        })
      )
    },
    Yp = function (e) {
      var t = e.width,
        r = e.height,
        n = e.onChange,
        i = e.onSwatchHover,
        a = e.colors,
        s = e.hex,
        o = e.styles,
        l = void 0 === o ? {} : o,
        c = e.className,
        u = void 0 === c ? '' : c,
        p = Ai(
          Io(
            {
              default: {
                picker: { width: t, height: r },
                overflow: { height: r, overflowY: 'scroll' },
                body: { padding: '16px 0 6px 16px' },
                clear: { clear: 'both' },
              },
            },
            l
          )
        ),
        h = function (e, t) {
          return n({ hex: e, source: 'hex' }, t)
        }
      return React.createElement(
        'div',
        { style: p.picker, className: 'swatches-picker ' + u },
        React.createElement(
          Fo,
          null,
          React.createElement(
            'div',
            { style: p.overflow },
            React.createElement(
              'div',
              { style: p.body },
              Tc(a, function (e) {
                return React.createElement(Xp, {
                  key: e.toString(),
                  group: e,
                  active: s,
                  onClick: h,
                  onSwatchHover: i,
                })
              }),
              React.createElement('div', { style: p.clear })
            )
          )
        )
      )
    }
  ;(Yp.propTypes = {
    width: Na.oneOfType([Na.string, Na.number]),
    height: Na.oneOfType([Na.string, Na.number]),
    colors: Na.arrayOf(Na.arrayOf(Na.string)),
    styles: Na.object,
  }),
    (Yp.defaultProps = {
      width: 320,
      height: 240,
      colors: [
        [Ic, Oc, Nc, kc, Rc],
        [Dc, Mc, _c, jc, Fc],
        [Wc, Uc, zc, Bc, Lc],
        [Kc, qc, $c, Vc, Hc],
        [Qc, Jc, Yc, Xc, Gc],
        [nu, ru, tu, eu, Zc],
        [lu, ou, su, au, iu],
        [du, hu, pu, uu, cu],
        [bu, gu, yu, mu, fu],
        ['#194D33', Eu, wu, xu, vu],
        [Au, Cu, Tu, Su, Pu],
        [Iu, Ou, Nu, ku, Ru],
        [Du, Mu, _u, ju, Fu],
        [Wu, Uu, zu, Bu, Lu],
        [Ku, qu, $u, Vu, Hu],
        [Qu, Ju, Yu, Xu, Gu],
        [np, rp, tp, ep, Zu],
        [lp, op, sp, ap, ip],
        ['#000000', '#525252', '#969696', '#D9D9D9', '#FFFFFF'],
      ],
      styles: {},
    }),
    ul(Yp)
  var Jp = function (e) {
    var t = e.onChange,
      r = e.onSwatchHover,
      n = e.hex,
      i = e.colors,
      a = e.width,
      s = e.triangle,
      o = e.styles,
      l = void 0 === o ? {} : o,
      c = e.className,
      u = void 0 === c ? '' : c,
      p = Ai(
        Io(
          {
            default: {
              card: {
                width: a,
                background: '#fff',
                border: '0 solid rgba(0,0,0,0.25)',
                boxShadow: '0 1px 4px rgba(0,0,0,0.25)',
                borderRadius: '4px',
                position: 'relative',
              },
              body: { padding: '15px 9px 9px 15px' },
              label: { fontSize: '18px', color: '#fff' },
              triangle: {
                width: '0px',
                height: '0px',
                borderStyle: 'solid',
                borderWidth: '0 9px 10px 9px',
                borderColor: 'transparent transparent #fff transparent',
                position: 'absolute',
              },
              triangleShadow: {
                width: '0px',
                height: '0px',
                borderStyle: 'solid',
                borderWidth: '0 9px 10px 9px',
                borderColor:
                  'transparent transparent rgba(0,0,0,.1) transparent',
                position: 'absolute',
              },
              hash: {
                background: '#F0F0F0',
                height: '30px',
                width: '30px',
                borderRadius: '4px 0 0 4px',
                float: 'left',
                color: '#98A1A4',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
              },
              input: {
                width: '100px',
                fontSize: '14px',
                color: '#666',
                border: '0px',
                outline: 'none',
                height: '28px',
                boxShadow: 'inset 0 0 0 1px #F0F0F0',
                boxSizing: 'content-box',
                borderRadius: '0 4px 4px 0',
                float: 'left',
                paddingLeft: '8px',
              },
              swatch: {
                width: '30px',
                height: '30px',
                float: 'left',
                borderRadius: '4px',
                margin: '0 6px 6px 0',
              },
              clear: { clear: 'both' },
            },
            'hide-triangle': {
              triangle: { display: 'none' },
              triangleShadow: { display: 'none' },
            },
            'top-left-triangle': {
              triangle: { top: '-10px', left: '12px' },
              triangleShadow: { top: '-11px', left: '12px' },
            },
            'top-right-triangle': {
              triangle: { top: '-10px', right: '12px' },
              triangleShadow: { top: '-11px', right: '12px' },
            },
          },
          l
        ),
        {
          'hide-triangle': 'hide' === s,
          'top-left-triangle': 'top-left' === s,
          'top-right-triangle': 'top-right' === s,
        }
      ),
      h = function (e, r) {
        al(e) && t({ hex: e, source: 'hex' }, r)
      }
    return React.createElement(
      'div',
      { style: p.card, className: 'twitter-picker ' + u },
      React.createElement('div', { style: p.triangleShadow }),
      React.createElement('div', { style: p.triangle }),
      React.createElement(
        'div',
        { style: p.body },
        Tc(i, function (e, t) {
          return React.createElement(gl, {
            key: t,
            color: e,
            hex: e,
            style: p.swatch,
            onClick: h,
            onHover: r,
            focusStyle: { boxShadow: '0 0 4px ' + e },
          })
        }),
        React.createElement('div', { style: p.hash }, '#'),
        React.createElement(Ui, {
          label: null,
          style: { input: p.input },
          value: n.replace('#', ''),
          onChange: h,
        }),
        React.createElement('div', { style: p.clear })
      )
    )
  }
  ;(Jp.propTypes = {
    width: Na.oneOfType([Na.string, Na.number]),
    triangle: Na.oneOf(['hide', 'top-left', 'top-right']),
    colors: Na.arrayOf(Na.string),
    styles: Na.object,
  }),
    (Jp.defaultProps = {
      width: 276,
      colors: [
        '#FF6900',
        '#FCB900',
        '#7BDCB5',
        '#00D084',
        '#8ED1FC',
        '#0693E3',
        '#ABB8C3',
        '#EB144C',
        '#F78DA7',
        '#9900EF',
      ],
      triangle: 'top-left',
      styles: {},
    }),
    ul(Jp)
  var Qp = function (e) {
    var t = Ai({
      default: {
        picker: {
          width: '20px',
          height: '20px',
          borderRadius: '22px',
          border: '2px #fff solid',
          transform: 'translate(-12px, -13px)',
          background:
            'hsl(' +
            Math.round(e.hsl.h) +
            ', ' +
            Math.round(100 * e.hsl.s) +
            '%, ' +
            Math.round(100 * e.hsl.l) +
            '%)',
        },
      },
    })
    return React.createElement('div', { style: t.picker })
  }
  ;(Qp.propTypes = {
    hsl: Na.shape({ h: Na.number, s: Na.number, l: Na.number, a: Na.number }),
  }),
    (Qp.defaultProps = { hsl: { a: 1, h: 249.94, l: 0.2, s: 0.5 } })
  var Zp = function (e) {
    var t = Ai({
      default: {
        picker: {
          width: '20px',
          height: '20px',
          borderRadius: '22px',
          transform: 'translate(-10px, -7px)',
          background: 'hsl(' + Math.round(e.hsl.h) + ', 100%, 50%)',
          border: '2px white solid',
        },
      },
    })
    return React.createElement('div', { style: t.picker })
  }
  ;(Zp.propTypes = {
    hsl: Na.shape({ h: Na.number, s: Na.number, l: Na.number, a: Na.number }),
  }),
    (Zp.defaultProps = { hsl: { a: 1, h: 249.94, l: 0.2, s: 0.5 } })
  var eh = function (e) {
      var t = e.onChange,
        r = e.rgb,
        n = e.hsl,
        i = e.hex,
        a = e.hsv,
        s = function (e, r) {
          if (e.hex) al(e.hex) && t({ hex: e.hex, source: 'hex' }, r)
          else if (e.rgb) {
            var n = e.rgb.split(',')
            ol(e.rgb, 'rgb') &&
              t({ r: n[0], g: n[1], b: n[2], a: 1, source: 'rgb' }, r)
          } else if (e.hsv) {
            var i = e.hsv.split(',')
            ol(e.hsv, 'hsv') &&
              ((i[2] = i[2].replace('%', '')),
              (i[1] = i[1].replace('%', '')),
              (i[0] = i[0].replace('°', '')),
              1 == i[1] ? (i[1] = 0.01) : 1 == i[2] && (i[2] = 0.01),
              t(
                {
                  h: Number(i[0]),
                  s: Number(i[1]),
                  v: Number(i[2]),
                  source: 'hsv',
                },
                r
              ))
          } else if (e.hsl) {
            var a = e.hsl.split(',')
            ol(e.hsl, 'hsl') &&
              ((a[2] = a[2].replace('%', '')),
              (a[1] = a[1].replace('%', '')),
              (a[0] = a[0].replace('°', '')),
              1 == u[1] ? (u[1] = 0.01) : 1 == u[2] && (u[2] = 0.01),
              t(
                {
                  h: Number(a[0]),
                  s: Number(a[1]),
                  v: Number(a[2]),
                  source: 'hsl',
                },
                r
              ))
          }
        },
        o = Ai({
          default: {
            wrap: { display: 'flex', height: '100px', marginTop: '4px' },
            fields: { width: '100%' },
            column: {
              paddingTop: '10px',
              display: 'flex',
              justifyContent: 'space-between',
            },
            double: { padding: '0px 4.4px', boxSizing: 'border-box' },
            input: {
              width: '100%',
              height: '38px',
              boxSizing: 'border-box',
              padding: '4px 10% 3px',
              textAlign: 'center',
              border: '1px solid #dadce0',
              fontSize: '11px',
              textTransform: 'lowercase',
              borderRadius: '5px',
              outline: 'none',
              fontFamily: 'Roboto,Arial,sans-serif',
            },
            input2: {
              height: '38px',
              width: '100%',
              border: '1px solid #dadce0',
              boxSizing: 'border-box',
              fontSize: '11px',
              textTransform: 'lowercase',
              borderRadius: '5px',
              outline: 'none',
              paddingLeft: '10px',
              fontFamily: 'Roboto,Arial,sans-serif',
            },
            label: {
              textAlign: 'center',
              fontSize: '12px',
              background: '#fff',
              position: 'absolute',
              textTransform: 'uppercase',
              color: '#3c4043',
              width: '35px',
              top: '-6px',
              left: '0',
              right: '0',
              marginLeft: 'auto',
              marginRight: 'auto',
              fontFamily: 'Roboto,Arial,sans-serif',
            },
            label2: {
              left: '10px',
              textAlign: 'center',
              fontSize: '12px',
              background: '#fff',
              position: 'absolute',
              textTransform: 'uppercase',
              color: '#3c4043',
              width: '32px',
              top: '-6px',
              fontFamily: 'Roboto,Arial,sans-serif',
            },
            single: { flexGrow: '1', margin: '0px 4.4px' },
          },
        }),
        l = r.r + ', ' + r.g + ', ' + r.b,
        c =
          Math.round(n.h) +
          '°, ' +
          Math.round(100 * n.s) +
          '%, ' +
          Math.round(100 * n.l) +
          '%',
        u =
          Math.round(a.h) +
          '°, ' +
          Math.round(100 * a.s) +
          '%, ' +
          Math.round(100 * a.v) +
          '%'
      return React.createElement(
        'div',
        { style: o.wrap, className: 'flexbox-fix' },
        React.createElement(
          'div',
          { style: o.fields },
          React.createElement(
            'div',
            { style: o.double },
            React.createElement(Ui, {
              style: { input: o.input, label: o.label },
              label: 'hex',
              value: i,
              onChange: s,
            })
          ),
          React.createElement(
            'div',
            { style: o.column },
            React.createElement(
              'div',
              { style: o.single },
              React.createElement(Ui, {
                style: { input: o.input2, label: o.label2 },
                label: 'rgb',
                value: l,
                onChange: s,
              })
            ),
            React.createElement(
              'div',
              { style: o.single },
              React.createElement(Ui, {
                style: { input: o.input2, label: o.label2 },
                label: 'hsv',
                value: u,
                onChange: s,
              })
            ),
            React.createElement(
              'div',
              { style: o.single },
              React.createElement(Ui, {
                style: { input: o.input2, label: o.label2 },
                label: 'hsl',
                value: c,
                onChange: s,
              })
            )
          )
        )
      )
    },
    th = function (e) {
      var t = e.width,
        r = e.onChange,
        n = e.rgb,
        i = e.hsl,
        a = e.hsv,
        s = e.hex,
        o = e.header,
        l = e.styles,
        c = void 0 === l ? {} : l,
        u = e.className,
        p = void 0 === u ? '' : u,
        h = Ai(
          Io(
            {
              default: {
                picker: {
                  width: t,
                  background: '#fff',
                  border: '1px solid #dfe1e5',
                  boxSizing: 'initial',
                  display: 'flex',
                  flexWrap: 'wrap',
                  borderRadius: '8px 8px 0px 0px',
                },
                head: {
                  height: '57px',
                  width: '100%',
                  paddingTop: '16px',
                  paddingBottom: '16px',
                  paddingLeft: '16px',
                  fontSize: '20px',
                  boxSizing: 'border-box',
                  fontFamily: 'Roboto-Regular,HelveticaNeue,Arial,sans-serif',
                },
                saturation: {
                  width: '70%',
                  padding: '0px',
                  position: 'relative',
                  overflow: 'hidden',
                },
                swatch: {
                  width: '30%',
                  height: '228px',
                  padding: '0px',
                  background: 'rgba(' + n.r + ', ' + n.g + ', ' + n.b + ', 1)',
                  position: 'relative',
                  overflow: 'hidden',
                },
                body: { margin: 'auto', width: '95%' },
                controls: {
                  display: 'flex',
                  boxSizing: 'border-box',
                  height: '52px',
                  paddingTop: '22px',
                },
                color: { width: '32px' },
                hue: {
                  height: '8px',
                  position: 'relative',
                  margin: '0px 16px 0px 16px',
                  width: '100%',
                },
                Hue: { radius: '2px' },
              },
            },
            c
          )
        )
      return React.createElement(
        'div',
        { style: h.picker, className: 'google-picker ' + p },
        React.createElement('div', { style: h.head }, o),
        React.createElement('div', { style: h.swatch }),
        React.createElement(
          'div',
          { style: h.saturation },
          React.createElement(Go, { hsl: i, hsv: a, pointer: Qp, onChange: r })
        ),
        React.createElement(
          'div',
          { style: h.body },
          React.createElement(
            'div',
            { style: h.controls, className: 'flexbox-fix' },
            React.createElement(
              'div',
              { style: h.hue },
              React.createElement(qi, {
                style: h.Hue,
                hsl: i,
                radius: '4px',
                pointer: Zp,
                onChange: r,
              })
            )
          ),
          React.createElement(eh, {
            rgb: n,
            hsl: i,
            hex: s,
            hsv: a,
            onChange: r,
          })
        )
      )
    }
  ;(th.propTypes = {
    width: Na.oneOfType([Na.string, Na.number]),
    styles: Na.object,
    header: Na.string,
  }),
    (th.defaultProps = { width: 652, styles: {}, header: 'Color picker' }),
    ul(th)
  var rh = function (e) {
      var t = React.useRef(),
        r = Designable.React.usePrefix('color-input'),
        n = e.value
      return React.createElement(
        'div',
        { ref: t, className: r },
        React.createElement(Antd.Input, {
          value: e.value,
          onChange: function (t) {
            var r
            null === (r = e.onChange) ||
              void 0 === r ||
              r.call(e, t.target.value)
          },
          placeholder: 'Color',
          prefix: React.createElement(
            Antd.Popover,
            {
              autoAdjustOverflow: !0,
              trigger: 'click',
              overlayInnerStyle: { padding: 0 },
              getPopupContainer: function () {
                return t.current
              },
              content: React.createElement(Up, {
                color: n,
                onChange: function (t) {
                  var r,
                    n = t.rgb
                  null === (r = e.onChange) ||
                    void 0 === r ||
                    r.call(
                      e,
                      'rgba('
                        .concat(n.r, ',')
                        .concat(n.g, ',')
                        .concat(n.b, ',')
                        .concat(n.a, ')')
                    )
                },
              }),
            },
            React.createElement('div', {
              className: r + '-color-tips',
              style: { backgroundColor: n },
            })
          ),
        })
      )
    },
    nh = function () {
      return (
        (nh =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        nh.apply(this, arguments)
      )
    }
  function ih(e, t) {
    var r = {}
    for (var n in e)
      Object.prototype.hasOwnProperty.call(e, n) &&
        t.indexOf(n) < 0 &&
        (r[n] = e[n])
    if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
      var i = 0
      for (n = Object.getOwnPropertySymbols(e); i < n.length; i++)
        t.indexOf(n[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(e, n[i]) &&
          (r[n[i]] = e[n[i]])
    }
    return r
  }
  function ah(e, t, r, n) {
    return new (r || (r = Promise))(function (i, a) {
      function s(e) {
        try {
          l(n.next(e))
        } catch (e) {
          a(e)
        }
      }
      function o(e) {
        try {
          l(n.throw(e))
        } catch (e) {
          a(e)
        }
      }
      function l(e) {
        e.done
          ? i(e.value)
          : (function (e) {
              return e instanceof r
                ? e
                : new r(function (t) {
                    t(e)
                  })
            })(e.value).then(s, o)
      }
      l((n = n.apply(e, t || [])).next())
    })
  }
  function sh(e, t) {
    var r,
      n,
      i,
      a,
      s = {
        label: 0,
        sent: function () {
          if (1 & i[0]) throw i[1]
          return i[1]
        },
        trys: [],
        ops: [],
      }
    return (
      (a = { next: o(0), throw: o(1), return: o(2) }),
      'function' == typeof Symbol &&
        (a[Symbol.iterator] = function () {
          return this
        }),
      a
    )
    function o(o) {
      return function (l) {
        return (function (o) {
          if (r) throw new TypeError('Generator is already executing.')
          for (; a && ((a = 0), o[0] && (s = 0)), s; )
            try {
              if (
                ((r = 1),
                n &&
                  (i =
                    2 & o[0]
                      ? n.return
                      : o[0]
                      ? n.throw || ((i = n.return) && i.call(n), 0)
                      : n.next) &&
                  !(i = i.call(n, o[1])).done)
              )
                return i
              switch (((n = 0), i && (o = [2 & o[0], i.value]), o[0])) {
                case 0:
                case 1:
                  i = o
                  break
                case 4:
                  return s.label++, { value: o[1], done: !1 }
                case 5:
                  s.label++, (n = o[1]), (o = [0])
                  continue
                case 7:
                  ;(o = s.ops.pop()), s.trys.pop()
                  continue
                default:
                  if (
                    !((i = s.trys),
                    (i = i.length > 0 && i[i.length - 1]) ||
                      (6 !== o[0] && 2 !== o[0]))
                  ) {
                    s = 0
                    continue
                  }
                  if (3 === o[0] && (!i || (o[1] > i[0] && o[1] < i[3]))) {
                    s.label = o[1]
                    break
                  }
                  if (6 === o[0] && s.label < i[1]) {
                    ;(s.label = i[1]), (i = o)
                    break
                  }
                  if (i && s.label < i[2]) {
                    ;(s.label = i[2]), s.ops.push(o)
                    break
                  }
                  i[2] && s.ops.pop(), s.trys.pop()
                  continue
              }
              o = t.call(e, s)
            } catch (e) {
              ;(o = [6, e]), (n = 0)
            } finally {
              r = i = 0
            }
          if (5 & o[0]) throw o[1]
          return { value: o[0] ? o[1] : void 0, done: !0 }
        })([o, l])
      }
    }
  }
  function oh(e, t) {
    var r = 'function' == typeof Symbol && e[Symbol.iterator]
    if (!r) return e
    var n,
      i,
      a = r.call(e),
      s = []
    try {
      for (; (void 0 === t || t-- > 0) && !(n = a.next()).done; )
        s.push(n.value)
    } catch (e) {
      i = { error: e }
    } finally {
      try {
        n && !n.done && (r = a.return) && r.call(a)
      } finally {
        if (i) throw i.error
      }
    }
    return s
  }
  'function' == typeof SuppressedError && SuppressedError
  /*!
    Copyright (c) 2018 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */
  var lh = W(function (e) {
      !(function () {
        var t = {}.hasOwnProperty
        function r() {
          for (var e = [], n = 0; n < arguments.length; n++) {
            var i = arguments[n]
            if (i) {
              var a = typeof i
              if ('string' === a || 'number' === a) e.push(i)
              else if (Array.isArray(i)) {
                if (i.length) {
                  var s = r.apply(null, i)
                  s && e.push(s)
                }
              } else if ('object' === a)
                if (i.toString === Object.prototype.toString)
                  for (var o in i) t.call(i, o) && i[o] && e.push(o)
                else e.push(i.toString())
            }
          }
          return e.join(' ')
        }
        e.exports ? ((r.default = r), (e.exports = r)) : (window.classNames = r)
      })()
    }),
    ch = function (e) {
      var t = Designable.React.usePrefix('corner-input'),
        r = oh(React.useState(e.value), 2),
        n = r[0],
        i = r[1]
      React.useEffect(
        function () {
          e.value || i('all')
        },
        [e.value]
      )
      var a = function (r) {
        return {
          className: lh(t + '-cell', { active: n === r }),
          onClick: function () {
            var t
            i(r), null === (t = e.onChange) || void 0 === t || t.call(e, r)
          },
        }
      }
      return React.createElement(
        'div',
        { className: lh(t, e.className), style: e.style },
        React.createElement(
          'div',
          { className: t + '-column' },
          React.createElement('div', nh({}, a('topLeft')), '┏'),
          React.createElement('div', nh({}, a('bottomLeft')), '┗')
        ),
        React.createElement(
          'div',
          { className: t + '-column' },
          React.createElement('div', nh({}, a('all')), '╋')
        ),
        React.createElement(
          'div',
          { className: t + '-column' },
          React.createElement('div', nh({}, a('topRight')), '┓'),
          React.createElement('div', nh({}, a('bottomRight')), '┛')
        )
      )
    },
    uh = React.createContext(null),
    ph = function (e) {
      var t = e.className,
        r = e.style,
        n = ih(e, ['className', 'style']),
        i = Designable.React.usePrefix('image-input'),
        a = React.useContext(uh)
      return React.createElement(
        'div',
        { className: lh(i, t), style: r },
        React.createElement(
          Antd.Input,
          nh({}, n, {
            onChange: function (e) {
              var t, r
              null === (t = n.onChange) ||
                void 0 === t ||
                t.call(
                  n,
                  null === (r = null == e ? void 0 : e.target) || void 0 === r
                    ? void 0
                    : r.value
                )
            },
            prefix: React.createElement(
              Antd.Upload,
              {
                action: a.uploadAction,
                itemRender: function () {
                  return null
                },
                maxCount: 1,
                onChange: function (e) {
                  var t,
                    r,
                    i =
                      null === (t = e.file) || void 0 === t
                        ? void 0
                        : t.response,
                    a =
                      (null == i ? void 0 : i.url) ||
                      (null == i ? void 0 : i.downloadURL) ||
                      (null == i ? void 0 : i.imageURL) ||
                      (null == i ? void 0 : i.thumbUrl)
                  a &&
                    (null === (r = n.onChange) || void 0 === r || r.call(n, a))
                },
              },
              React.createElement(Designable.React.IconWidget, {
                infer: 'CloudUpload',
                style: { cursor: 'pointer' },
              })
            ),
          })
        )
      )
    },
    hh = function (e) {
      return React.createElement(ph, {
        value: (function (e) {
          var t = String(e).match(/url\(\s*([^)]+)\s*\)/)
          return (null == t ? void 0 : t[1]) ? (null == t ? void 0 : t[1]) : e
        })(e.value),
        onChange: function (t) {
          var r
          null === (r = e.onChange) ||
            void 0 === r ||
            r.call(
              e,
              (function (e) {
                return /url\([^)]+\)/.test(e) ? e : 'url('.concat(e, ')')
              })(t)
            )
        },
      })
    },
    dh = function (e) {
      var t = Designable.React.usePrefix('position-input'),
        r = oh(React.useState(e.value), 2),
        n = r[0],
        i = r[1]
      React.useEffect(
        function () {
          e.value || i('center')
        },
        [e.value]
      )
      var a = function (r) {
        return {
          className: lh(t + '-cell', { active: n === r }),
          onClick: function () {
            var t
            i(r), null === (t = e.onChange) || void 0 === t || t.call(e, r)
          },
        }
      }
      return React.createElement(
        'div',
        { className: lh(t, e.className), style: e.style },
        React.createElement(
          'div',
          { className: t + '-row' },
          React.createElement('div', nh({}, a('top')), '┳')
        ),
        React.createElement(
          'div',
          { className: t + '-row' },
          React.createElement('div', nh({}, a('left')), '┣'),
          React.createElement('div', nh({}, a('center')), '╋'),
          React.createElement('div', nh({}, a('right')), '┫')
        ),
        React.createElement(
          'div',
          { className: t + '-row' },
          React.createElement('div', nh({}, a('bottom')), '┻')
        )
      )
    },
    fh = function (e) {
      return null != e
    }
  function mh(e) {
    return (
      void 0 === e && (e = []),
      function (t) {
        var r,
          n = t.className,
          i = t.style,
          a = t.value,
          s = t.onChange,
          o = t.exclude,
          l = t.include,
          c = ih(t, [
            'className',
            'style',
            'value',
            'onChange',
            'exclude',
            'include',
          ]),
          u = Designable.React.usePrefix('poly-input'),
          p = (function (e, t, r) {
            return e.filter(function (e) {
              var n = e.type
              return Array.isArray(r) && r.length
                ? r.includes(n)
                : !Array.isArray(t) || !t.length || !t.includes(n)
            })
          })(e, o, l),
          h = oh(
            React.useState(
              null === (r = p[0]) || void 0 === r ? void 0 : r.type
            ),
            2
          ),
          d = h[0],
          f = h[1],
          m =
            null == p
              ? void 0
              : p.find(function (e) {
                  return e.type === d
                }),
          y = null == m ? void 0 : m.component,
          g = React.useRef({})
        React.useEffect(
          function () {
            null == p ||
              p.forEach(function (e) {
                var t = e.checker,
                  r = e.type
                t(a) && f(r)
              })
          },
          [a]
        )
        var b = function (e, t) {
          return (null == t ? void 0 : t.toChangeValue)
            ? null == t
              ? void 0
              : t.toChangeValue(e)
            : e
        }
        return React.createElement(
          'div',
          { className: lh(u, n), style: i },
          y &&
            React.createElement(
              'div',
              { className: u + '-content' },
              React.createElement(
                y,
                nh(nh({}, c), {
                  value: (null == m ? void 0 : m.toInputValue)
                    ? null == m
                      ? void 0
                      : m.toInputValue(a)
                    : a,
                  onChange: function (e) {
                    var t = (function (e) {
                      return (null == e ? void 0 : e.target)
                        ? fh(e.target.value)
                          ? e.target.value
                          : fh(e.target.checked)
                          ? e.target.checked
                          : void 0
                        : e
                    })(e)
                    ;(g.current[null == m ? void 0 : m.type] = t),
                      null == s || s(b(t, m))
                  },
                })
              )
            ),
          React.createElement(
            Antd.Button,
            {
              className: u + '-controller',
              style: { width: y ? 'auto' : '100%' },
              block: !0,
              onClick: function () {
                var e,
                  t,
                  r =
                    ((e =
                      null == p
                        ? void 0
                        : p.findIndex(function (e) {
                            return e.type === d
                          })),
                    (t =
                      e + 1 > (null == p ? void 0 : p.length) - 1 ? 0 : e + 1),
                    p[t])
                r !== m &&
                  (f(null == r ? void 0 : r.type),
                  null == s || s(b(g.current[null == r ? void 0 : r.type], r)))
              },
            },
            (null == m ? void 0 : m.icon)
              ? React.createElement(Designable.React.IconWidget, {
                  infer: m.icon,
                })
              : (null == m ? void 0 : m.title) || (null == m ? void 0 : m.type)
          )
        )
      }
    )
  }
  var yh = function (e) {
      return {
        type: e,
        component: Antd.InputNumber,
        checker: function (t) {
          return String(t).includes(e)
        },
        toInputValue: function (e) {
          return (function (e) {
            var t = String(e)
              .trim()
              .replace(/[^\d\.]+/, '')
            if ('' !== t) return Number(t)
          })(e)
        },
        toChangeValue: function (t) {
          return ''.concat(t || 0).concat(e)
        },
      }
    },
    gh = function (e) {
      return {
        type: e,
        checker: function (t) {
          return t === e
        },
        toChangeValue: function () {
          return e
        },
      }
    },
    bh = mh([gh('inherit'), gh('auto'), yh('px'), yh('%'), yh('vh'), yh('em')]),
    vh = mh([gh('cover'), gh('contain'), yh('px'), yh('%'), yh('vh'), yh('em')])
  const xh = {
    display: 'flex',
    height: '100%',
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  }
  function wh({ content: e }) {
    return React.createElement('div', { style: xh }, e)
  }
  const Eh = { display: 'flex', position: 'relative', textAlign: 'initial' },
    Ph = { width: '100%' },
    Sh = { display: 'none' }
  function Th({
    width: e,
    height: t,
    isEditorReady: r,
    loading: n,
    _ref: i,
    className: a,
    wrapperClassName: s,
  }) {
    return React.createElement(
      'section',
      { style: { ...Eh, width: e, height: t }, className: s },
      !r && React.createElement(wh, { content: n }),
      React.createElement('div', {
        ref: i,
        style: { ...Ph, ...(!r && Sh) },
        className: a,
      })
    )
  }
  Th.propTypes = {
    width: Na.oneOfType([Na.number, Na.string]).isRequired,
    height: Na.oneOfType([Na.number, Na.string]).isRequired,
    loading: Na.oneOfType([Na.element, Na.string]).isRequired,
    isEditorReady: Na.bool.isRequired,
    className: Na.string,
    wrapperClassName: Na.string,
  }
  var Ch = React.memo(Th)
  function Ah(e, t, r = !0) {
    const n = React.useRef(!0)
    React.useEffect(
      n.current || !r
        ? () => {
            n.current = !1
          }
        : e,
      t
    )
  }
  function Rh() {}
  function kh(e, t, r, n) {
    return (
      (function (e, t) {
        return e.editor.getModel(Nh(e, t))
      })(e, n) ||
      (function (e, t, r, n) {
        return e.editor.createModel(t, r, n && Nh(e, n))
      })(e, t, r, n)
    )
  }
  function Nh(e, t) {
    return e.Uri.parse(t)
  }
  Na.string,
    Na.string,
    Na.string,
    Na.string,
    Na.string,
    Na.string,
    Na.string,
    Na.bool,
    Na.bool,
    Na.string,
    Na.oneOfType([Na.element, Na.string]),
    Na.object,
    Na.oneOfType([Na.number, Na.string]),
    Na.oneOfType([Na.number, Na.string]),
    Na.string,
    Na.string,
    Na.func,
    Na.func
  const [Oh, Ih] = b.create({ backup: null }),
    Fh = new Map()
  function jh({
    defaultValue: e,
    defaultLanguage: t,
    defaultPath: r,
    value: n,
    language: i,
    path: a,
    theme: s,
    line: o,
    loading: l,
    options: c,
    overrideServices: u,
    saveViewState: p,
    keepCurrentModel: h,
    width: d,
    height: f,
    className: m,
    wrapperClassName: y,
    beforeMount: g,
    onMount: b,
    onChange: v,
    onValidate: x,
  }) {
    const [w, E] = React.useState(!1),
      [P, S] = React.useState(!0),
      T = React.useRef(null),
      C = React.useRef(null),
      A = React.useRef(null),
      R = React.useRef(b),
      k = React.useRef(g),
      N = React.useRef(null),
      O = React.useRef(n),
      I = (function (e) {
        const t = React.useRef()
        return (
          React.useEffect(() => {
            t.current = e
          }, [e]),
          t.current
        )
      })(a)
    var F
    ;(F = () => {
      const e = D.init()
      return (
        e
          .then((e) => (T.current = e) && S(!1))
          .catch(
            (e) =>
              'cancelation' !== (null == e ? void 0 : e.type) &&
              console.error('Monaco initialization: error:', e)
          ),
        () => {
          return C.current
            ? (null === (t = N.current) || void 0 === t || t.dispose(),
              h
                ? p && Fh.set(a, C.current.saveViewState())
                : null === (r = C.current.getModel()) ||
                  void 0 === r ||
                  r.dispose(),
              void C.current.dispose())
            : e.cancel()
          var t, r
        }
      )
    }),
      React.useEffect(F, []),
      Ah(
        () => {
          const r = kh(T.current, e || n, t || i, a)
          r !== C.current.getModel() &&
            (p && Fh.set(I, C.current.saveViewState()),
            C.current.setModel(r),
            p && C.current.restoreViewState(Fh.get(a)))
        },
        [a],
        w
      ),
      Ah(
        () => {
          C.current.updateOptions(c)
        },
        [c],
        w
      ),
      Ah(
        () => {
          C.current.getOption(T.current.editor.EditorOption.readOnly)
            ? C.current.setValue(n)
            : n !== C.current.getValue() &&
              (C.current.executeEdits('', [
                {
                  range: C.current.getModel().getFullModelRange(),
                  text: n,
                  forceMoveMarkers: !0,
                },
              ]),
              C.current.pushUndoStop())
        },
        [n],
        w
      ),
      Ah(
        () => {
          T.current.editor.setModelLanguage(C.current.getModel(), i)
        },
        [i],
        w
      ),
      Ah(
        () => {
          void 0 !== o && C.current.revealLine(o)
        },
        [o],
        w
      ),
      Ah(
        () => {
          T.current.editor.setTheme(s)
        },
        [s],
        w
      )
    const j = React.useCallback(() => {
      k.current(T.current)
      const o = a || r,
        l = kh(T.current, n || e, t || i, o)
      ;(C.current = T.current.editor.create(
        A.current,
        { model: l, automaticLayout: !0, ...c },
        u
      )),
        p && C.current.restoreViewState(Fh.get(o)),
        T.current.editor.setTheme(s),
        Oh().backup || Ih({ backup: T.current.editor.setModelMarkers }),
        E(!0)
    }, [e, t, r, n, i, a, c, u, p, s])
    return (
      React.useEffect(() => {
        w && R.current(C.current, T.current)
      }, [w]),
      React.useEffect(() => {
        !P && !w && j()
      }, [P, w, j]),
      (O.current = n),
      React.useEffect(() => {
        var e, t
        w &&
          v &&
          (null === (e = N.current) || void 0 === e || e.dispose(),
          (N.current =
            null === (t = C.current) || void 0 === t
              ? void 0
              : t.onDidChangeModelContent((e) => {
                  const t = C.current.getValue()
                  O.current !== t && v(t, e)
                })))
      }, [w, v]),
      React.useEffect(() => {
        w &&
          (T.current.editor.setModelMarkers = function (e, t, r) {
            var n
            null === (n = Oh().backup) ||
              void 0 === n ||
              n.call(T.current.editor, e, t, r),
              null == x || x(r)
          })
      }, [w, x]),
      React.createElement(Ch, {
        width: d,
        height: f,
        isEditorReady: w,
        loading: l,
        _ref: A,
        className: m,
        wrapperClassName: y,
      })
    )
  }
  ;(jh.propTypes = {
    defaultValue: Na.string,
    defaultPath: Na.string,
    defaultLanguage: Na.string,
    value: Na.string,
    language: Na.string,
    path: Na.string,
    theme: Na.string,
    line: Na.number,
    loading: Na.oneOfType([Na.element, Na.string]),
    options: Na.object,
    overrideServices: Na.object,
    saveViewState: Na.bool,
    keepCurrentModel: Na.bool,
    width: Na.oneOfType([Na.number, Na.string]),
    height: Na.oneOfType([Na.number, Na.string]),
    className: Na.string,
    wrapperClassName: Na.string,
    beforeMount: Na.func,
    onMount: Na.func,
    onChange: Na.func,
    onValidate: Na.func,
  }),
    (jh.defaultProps = {
      theme: 'light',
      loading: 'Loading...',
      options: {},
      overrideServices: {},
      saveViewState: !0,
      keepCurrentModel: !1,
      width: '100%',
      height: '100%',
      beforeMount: Rh,
      onMount: Rh,
      onValidate: Rh,
    })
  var _h = React.memo(jh)
  function Mh(e, t) {
    if (null == e) return {}
    var r,
      n,
      i = {},
      a = Object.keys(e)
    for (n = 0; n < a.length; n++)
      (r = a[n]), t.indexOf(r) >= 0 || (i[r] = e[r])
    return i
  }
  class Dh {
    constructor(e, t, r) {
      ;(this.line = void 0),
        (this.column = void 0),
        (this.index = void 0),
        (this.line = e),
        (this.column = t),
        (this.index = r)
    }
  }
  class Lh {
    constructor(e, t) {
      ;(this.start = void 0),
        (this.end = void 0),
        (this.filename = void 0),
        (this.identifierName = void 0),
        (this.start = e),
        (this.end = t)
    }
  }
  function Bh(e, t) {
    const { line: r, column: n, index: i } = e
    return new Dh(r, n + t, i + t)
  }
  const zh = Object.freeze({
      SyntaxError: 'BABEL_PARSER_SYNTAX_ERROR',
      SourceTypeModuleError: 'BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED',
    }),
    Uh = (e, t = e.length - 1) => ({
      get() {
        return e.reduce((e, t) => e[t], this)
      },
      set(r) {
        e.reduce((e, n, i) => (i === t ? (e[n] = r) : e[n]), this)
      },
    })
  const Wh = {
      ArrayPattern: 'array destructuring pattern',
      AssignmentExpression: 'assignment expression',
      AssignmentPattern: 'assignment expression',
      ArrowFunctionExpression: 'arrow function expression',
      ConditionalExpression: 'conditional expression',
      ForOfStatement: 'for-of statement',
      ForInStatement: 'for-in statement',
      ForStatement: 'for-loop',
      FormalParameters: 'function parameter list',
      Identifier: 'identifier',
      ObjectPattern: 'object destructuring pattern',
      ParenthesizedExpression: 'parenthesized expression',
      RestElement: 'rest element',
      UpdateExpression: {
        true: 'prefix operation',
        false: 'postfix operation',
      },
      VariableDeclarator: 'variable declaration',
      YieldExpression: 'yield expression',
    },
    Hh = ({ type: e, prefix: t }) =>
      'UpdateExpression' === e ? Wh.UpdateExpression[String(t)] : Wh[e]
  const Vh = new Set([
    'ArrowFunctionExpression',
    'AssignmentExpression',
    'ConditionalExpression',
    'YieldExpression',
  ])
  const $h = ['toMessage']
  function qh(e) {
    let { toMessage: t } = e,
      r = Mh(e, $h)
    return function e({ loc: n, details: i }) {
      return ((e, t, r) =>
        Object.keys(r)
          .map((e) => [e, r[e]])
          .filter(([, e]) => !!e)
          .map(([e, t]) => [
            e,
            'function' == typeof t
              ? { value: t, enumerable: !1 }
              : 'string' == typeof t.reflect
              ? Object.assign({}, t, Uh(t.reflect.split('.')))
              : t,
          ])
          .reduce(
            (e, [t, r]) =>
              Object.defineProperty(
                e,
                t,
                Object.assign({ configurable: !0 }, r)
              ),
            Object.assign(new e(), t)
          ))(SyntaxError, Object.assign({}, r, { loc: n }), {
        clone(t = {}) {
          const r = t.loc || {}
          return e({
            loc: new Dh(
              'line' in r ? r.line : this.loc.line,
              'column' in r ? r.column : this.loc.column,
              'index' in r ? r.index : this.loc.index
            ),
            details: Object.assign({}, this.details, t.details),
          })
        },
        details: { value: i, enumerable: !1 },
        message: {
          get() {
            return `${t(this.details)} (${this.loc.line}:${this.loc.column})`
          },
          set(e) {
            Object.defineProperty(this, 'message', { value: e })
          },
        },
        pos: { reflect: 'loc.index', enumerable: !0 },
        missingPlugin: 'missingPlugin' in i && {
          reflect: 'details.missingPlugin',
          enumerable: !0,
        },
      })
    }
  }
  function Kh(e, t) {
    return Object.assign({ toMessage: 'string' == typeof e ? () => e : e }, t)
  }
  function Gh(e, t) {
    if (Array.isArray(e)) return (t) => Gh(t, e[0])
    const r = e(Kh),
      n = {}
    for (const e of Object.keys(r))
      n[e] = qh(
        Object.assign(
          { code: zh.SyntaxError, reasonCode: e },
          t ? { syntaxPlugin: t } : {},
          r[e]
        )
      )
    return n
  }
  const Xh = Object.assign(
      {},
      Gh((e) => ({
        ImportMetaOutsideModule: e(
          'import.meta may appear only with \'sourceType: "module"\'',
          { code: zh.SourceTypeModuleError }
        ),
        ImportOutsideModule: e(
          "'import' and 'export' may appear only with 'sourceType: \"module\"'",
          { code: zh.SourceTypeModuleError }
        ),
      })),
      Gh((e) => ({
        AccessorIsGenerator: e(
          ({ kind: e }) => `A ${e}ter cannot be a generator.`
        ),
        ArgumentsInClass: e(
          "'arguments' is only allowed in functions and class methods."
        ),
        AsyncFunctionInSingleStatementContext: e(
          'Async functions can only be declared at the top level or inside a block.'
        ),
        AwaitBindingIdentifier: e(
          "Can not use 'await' as identifier inside an async function."
        ),
        AwaitBindingIdentifierInStaticBlock: e(
          "Can not use 'await' as identifier inside a static block."
        ),
        AwaitExpressionFormalParameter: e(
          "'await' is not allowed in async function parameters."
        ),
        AwaitNotInAsyncContext: e(
          "'await' is only allowed within async functions and at the top levels of modules."
        ),
        AwaitNotInAsyncFunction: e(
          "'await' is only allowed within async functions."
        ),
        BadGetterArity: e(
          "A 'get' accesor must not have any formal parameters."
        ),
        BadSetterArity: e(
          "A 'set' accesor must have exactly one formal parameter."
        ),
        BadSetterRestParameter: e(
          "A 'set' accesor function argument must not be a rest parameter."
        ),
        ConstructorClassField: e(
          "Classes may not have a field named 'constructor'."
        ),
        ConstructorClassPrivateField: e(
          "Classes may not have a private field named '#constructor'."
        ),
        ConstructorIsAccessor: e('Class constructor may not be an accessor.'),
        ConstructorIsAsync: e("Constructor can't be an async function."),
        ConstructorIsGenerator: e("Constructor can't be a generator."),
        DeclarationMissingInitializer: e(
          ({ kind: e }) => `Missing initializer in ${e} declaration.`
        ),
        DecoratorBeforeExport: e(
          "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax."
        ),
        DecoratorConstructor: e(
          "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?"
        ),
        DecoratorExportClass: e(
          'Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.'
        ),
        DecoratorSemicolon: e(
          'Decorators must not be followed by a semicolon.'
        ),
        DecoratorStaticBlock: e(
          "Decorators can't be used with a static block."
        ),
        DeletePrivateField: e('Deleting a private field is not allowed.'),
        DestructureNamedImport: e(
          'ES2015 named imports do not destructure. Use another statement for destructuring after the import.'
        ),
        DuplicateConstructor: e('Duplicate constructor in the same class.'),
        DuplicateDefaultExport: e(
          'Only one default export allowed per module.'
        ),
        DuplicateExport: e(
          ({ exportName: e }) =>
            `\`${e}\` has already been exported. Exported identifiers must be unique.`
        ),
        DuplicateProto: e('Redefinition of __proto__ property.'),
        DuplicateRegExpFlags: e('Duplicate regular expression flag.'),
        ElementAfterRest: e('Rest element must be last element.'),
        EscapedCharNotAnIdentifier: e('Invalid Unicode escape.'),
        ExportBindingIsString: e(
          ({ localName: e, exportName: t }) =>
            `A string literal cannot be used as an exported binding without \`from\`.\n- Did you mean \`export { '${e}' as '${t}' } from 'some-module'\`?`
        ),
        ExportDefaultFromAsIdentifier: e(
          "'from' is not allowed as an identifier after 'export default'."
        ),
        ForInOfLoopInitializer: e(
          ({ type: e }) =>
            `'${
              'ForInStatement' === e ? 'for-in' : 'for-of'
            }' loop variable declaration may not have an initializer.`
        ),
        ForOfAsync: e(
          "The left-hand side of a for-of loop may not be 'async'."
        ),
        ForOfLet: e(
          "The left-hand side of a for-of loop may not start with 'let'."
        ),
        GeneratorInSingleStatementContext: e(
          'Generators can only be declared at the top level or inside a block.'
        ),
        IllegalBreakContinue: e(
          ({ type: e }) =>
            `Unsyntactic ${'BreakStatement' === e ? 'break' : 'continue'}.`
        ),
        IllegalLanguageModeDirective: e(
          "Illegal 'use strict' directive in function with non-simple parameter list."
        ),
        IllegalReturn: e("'return' outside of function."),
        ImportBindingIsString: e(
          ({ importName: e }) =>
            `A string literal cannot be used as an imported binding.\n- Did you mean \`import { "${e}" as foo }\`?`
        ),
        ImportCallArgumentTrailingComma: e(
          'Trailing comma is disallowed inside import(...) arguments.'
        ),
        ImportCallArity: e(
          ({ maxArgumentCount: e }) =>
            `\`import()\` requires exactly ${
              1 === e ? 'one argument' : 'one or two arguments'
            }.`
        ),
        ImportCallNotNewExpression: e('Cannot use new with import(...).'),
        ImportCallSpreadArgument: e('`...` is not allowed in `import()`.'),
        IncompatibleRegExpUVFlags: e(
          "The 'u' and 'v' regular expression flags cannot be enabled at the same time."
        ),
        InvalidBigIntLiteral: e('Invalid BigIntLiteral.'),
        InvalidCodePoint: e('Code point out of bounds.'),
        InvalidCoverInitializedName: e(
          'Invalid shorthand property initializer.'
        ),
        InvalidDecimal: e('Invalid decimal.'),
        InvalidDigit: e(({ radix: e }) => `Expected number in radix ${e}.`),
        InvalidEscapeSequence: e('Bad character escape sequence.'),
        InvalidEscapeSequenceTemplate: e(
          'Invalid escape sequence in template.'
        ),
        InvalidEscapedReservedWord: e(
          ({ reservedWord: e }) => `Escape sequence in keyword ${e}.`
        ),
        InvalidIdentifier: e(
          ({ identifierName: e }) => `Invalid identifier ${e}.`
        ),
        InvalidLhs: e(
          ({ ancestor: e }) => `Invalid left-hand side in ${Hh(e)}.`
        ),
        InvalidLhsBinding: e(
          ({ ancestor: e }) => `Binding invalid left-hand side in ${Hh(e)}.`
        ),
        InvalidNumber: e('Invalid number.'),
        InvalidOrMissingExponent: e(
          "Floating-point numbers require a valid exponent after the 'e'."
        ),
        InvalidOrUnexpectedToken: e(
          ({ unexpected: e }) => `Unexpected character '${e}'.`
        ),
        InvalidParenthesizedAssignment: e(
          'Invalid parenthesized assignment pattern.'
        ),
        InvalidPrivateFieldResolution: e(
          ({ identifierName: e }) => `Private name #${e} is not defined.`
        ),
        InvalidPropertyBindingPattern: e('Binding member expression.'),
        InvalidRecordProperty: e(
          'Only properties and spread elements are allowed in record definitions.'
        ),
        InvalidRestAssignmentPattern: e("Invalid rest operator's argument."),
        LabelRedeclaration: e(
          ({ labelName: e }) => `Label '${e}' is already declared.`
        ),
        LetInLexicalBinding: e(
          "'let' is not allowed to be used as a name in 'let' or 'const' declarations."
        ),
        LineTerminatorBeforeArrow: e("No line break is allowed before '=>'."),
        MalformedRegExpFlags: e('Invalid regular expression flag.'),
        MissingClassName: e('A class name is required.'),
        MissingEqInAssignment: e(
          "Only '=' operator can be used for specifying default value."
        ),
        MissingSemicolon: e('Missing semicolon.'),
        MissingPlugin: e(
          ({ missingPlugin: e }) =>
            `This experimental syntax requires enabling the parser plugin: ${e
              .map((e) => JSON.stringify(e))
              .join(', ')}.`
        ),
        MissingOneOfPlugins: e(
          ({ missingPlugin: e }) =>
            `This experimental syntax requires enabling one of the following parser plugin(s): ${e
              .map((e) => JSON.stringify(e))
              .join(', ')}.`
        ),
        MissingUnicodeEscape: e('Expecting Unicode escape sequence \\uXXXX.'),
        MixingCoalesceWithLogical: e(
          'Nullish coalescing operator(??) requires parens when mixing with logical operators.'
        ),
        ModuleAttributeDifferentFromType: e(
          'The only accepted module attribute is `type`.'
        ),
        ModuleAttributeInvalidValue: e(
          'Only string literals are allowed as module attribute values.'
        ),
        ModuleAttributesWithDuplicateKeys: e(
          ({ key: e }) =>
            `Duplicate key "${e}" is not allowed in module attributes.`
        ),
        ModuleExportNameHasLoneSurrogate: e(
          ({ surrogateCharCode: e }) =>
            `An export name cannot include a lone surrogate, found '\\u${e.toString(
              16
            )}'.`
        ),
        ModuleExportUndefined: e(
          ({ localName: e }) => `Export '${e}' is not defined.`
        ),
        MultipleDefaultsInSwitch: e('Multiple default clauses.'),
        NewlineAfterThrow: e('Illegal newline after throw.'),
        NoCatchOrFinally: e('Missing catch or finally clause.'),
        NumberIdentifier: e('Identifier directly after number.'),
        NumericSeparatorInEscapeSequence: e(
          'Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.'
        ),
        ObsoleteAwaitStar: e(
          "'await*' has been removed from the async functions proposal. Use Promise.all() instead."
        ),
        OptionalChainingNoNew: e(
          'Constructors in/after an Optional Chain are not allowed.'
        ),
        OptionalChainingNoTemplate: e(
          'Tagged Template Literals are not allowed in optionalChain.'
        ),
        OverrideOnConstructor: e(
          "'override' modifier cannot appear on a constructor declaration."
        ),
        ParamDupe: e('Argument name clash.'),
        PatternHasAccessor: e("Object pattern can't contain getter or setter."),
        PatternHasMethod: e("Object pattern can't contain methods."),
        PrivateInExpectedIn: e(
          ({ identifierName: e }) =>
            `Private names are only allowed in property accesses (\`obj.#${e}\`) or in \`in\` expressions (\`#${e} in obj\`).`
        ),
        PrivateNameRedeclaration: e(
          ({ identifierName: e }) => `Duplicate private name #${e}.`
        ),
        RecordExpressionBarIncorrectEndSyntaxType: e(
          "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."
        ),
        RecordExpressionBarIncorrectStartSyntaxType: e(
          "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."
        ),
        RecordExpressionHashIncorrectStartSyntaxType: e(
          "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'."
        ),
        RecordNoProto: e("'__proto__' is not allowed in Record expressions."),
        RestTrailingComma: e('Unexpected trailing comma after rest element.'),
        SloppyFunction: e(
          'In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.'
        ),
        StaticPrototype: e(
          'Classes may not have static property named prototype.'
        ),
        SuperNotAllowed: e(
          "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?"
        ),
        SuperPrivateField: e("Private fields can't be accessed on super."),
        TrailingDecorator: e('Decorators must be attached to a class element.'),
        TupleExpressionBarIncorrectEndSyntaxType: e(
          "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."
        ),
        TupleExpressionBarIncorrectStartSyntaxType: e(
          "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."
        ),
        TupleExpressionHashIncorrectStartSyntaxType: e(
          "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'."
        ),
        UnexpectedArgumentPlaceholder: e('Unexpected argument placeholder.'),
        UnexpectedAwaitAfterPipelineBody: e(
          'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.'
        ),
        UnexpectedDigitAfterHash: e('Unexpected digit after hash token.'),
        UnexpectedImportExport: e(
          "'import' and 'export' may only appear at the top level."
        ),
        UnexpectedKeyword: e(({ keyword: e }) => `Unexpected keyword '${e}'.`),
        UnexpectedLeadingDecorator: e(
          'Leading decorators must be attached to a class declaration.'
        ),
        UnexpectedLexicalDeclaration: e(
          'Lexical declaration cannot appear in a single-statement context.'
        ),
        UnexpectedNewTarget: e(
          '`new.target` can only be used in functions or class properties.'
        ),
        UnexpectedNumericSeparator: e(
          'A numeric separator is only allowed between two digits.'
        ),
        UnexpectedPrivateField: e('Unexpected private name.'),
        UnexpectedReservedWord: e(
          ({ reservedWord: e }) => `Unexpected reserved word '${e}'.`
        ),
        UnexpectedSuper: e(
          "'super' is only allowed in object methods and classes."
        ),
        UnexpectedToken: e(
          ({ expected: e, unexpected: t }) =>
            `Unexpected token${t ? ` '${t}'.` : ''}${
              e ? `, expected "${e}"` : ''
            }`
        ),
        UnexpectedTokenUnaryExponentiation: e(
          'Illegal expression. Wrap left hand side or entire exponentiation in parentheses.'
        ),
        UnsupportedBind: e('Binding should be performed on object property.'),
        UnsupportedDecoratorExport: e(
          'A decorated export must export a class declaration.'
        ),
        UnsupportedDefaultExport: e(
          'Only expressions, functions or classes are allowed as the `default` export.'
        ),
        UnsupportedImport: e(
          '`import` can only be used in `import()` or `import.meta`.'
        ),
        UnsupportedMetaProperty: e(
          ({ target: e, onlyValidPropertyName: t }) =>
            `The only valid meta property for ${e} is ${e}.${t}.`
        ),
        UnsupportedParameterDecorator: e(
          'Decorators cannot be used to decorate parameters.'
        ),
        UnsupportedPropertyDecorator: e(
          'Decorators cannot be used to decorate object literal properties.'
        ),
        UnsupportedSuper: e(
          "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])."
        ),
        UnterminatedComment: e('Unterminated comment.'),
        UnterminatedRegExp: e('Unterminated regular expression.'),
        UnterminatedString: e('Unterminated string constant.'),
        UnterminatedTemplate: e('Unterminated template.'),
        VarRedeclaration: e(
          ({ identifierName: e }) =>
            `Identifier '${e}' has already been declared.`
        ),
        YieldBindingIdentifier: e(
          "Can not use 'yield' as identifier inside a generator."
        ),
        YieldInParameter: e(
          'Yield expression is not allowed in formal parameters.'
        ),
        ZeroDigitNumericSeparator: e(
          'Numeric separator can not be used after leading 0.'
        ),
      })),
      Gh((e) => ({
        StrictDelete: e('Deleting local variable in strict mode.'),
        StrictEvalArguments: e(
          ({ referenceName: e }) => `Assigning to '${e}' in strict mode.`
        ),
        StrictEvalArgumentsBinding: e(
          ({ bindingName: e }) => `Binding '${e}' in strict mode.`
        ),
        StrictFunction: e(
          'In strict mode code, functions can only be declared at top level or inside a block.'
        ),
        StrictNumericEscape: e(
          "The only valid numeric escape in strict mode is '\\0'."
        ),
        StrictOctalLiteral: e(
          'Legacy octal literals are not allowed in strict mode.'
        ),
        StrictWith: e("'with' in strict mode."),
      })),
      Gh`pipelineOperator`((e) => ({
        PipeBodyIsTighter: e(
          'Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.'
        ),
        PipeTopicRequiresHackPipes: e(
          'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
        ),
        PipeTopicUnbound: e(
          'Topic reference is unbound; it must be inside a pipe body.'
        ),
        PipeTopicUnconfiguredToken: e(
          ({ token: e }) =>
            `Invalid topic token ${e}. In order to use ${e} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${e}" }.`
        ),
        PipeTopicUnused: e(
          'Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.'
        ),
        PipeUnparenthesizedBody: e(
          ({ type: e }) =>
            `Hack-style pipe body cannot be an unparenthesized ${Hh({
              type: e,
            })}; please wrap it in parentheses.`
        ),
        PipelineBodyNoArrow: e(
          'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.'
        ),
        PipelineBodySequenceExpression: e(
          'Pipeline body may not be a comma-separated sequence expression.'
        ),
        PipelineHeadSequenceExpression: e(
          'Pipeline head should not be a comma-separated sequence expression.'
        ),
        PipelineTopicUnused: e(
          'Pipeline is in topic style but does not use topic reference.'
        ),
        PrimaryTopicNotAllowed: e(
          'Topic reference was used in a lexical context without topic binding.'
        ),
        PrimaryTopicRequiresSmartPipeline: e(
          'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
        ),
      }))
    ),
    { defineProperty: Yh } = Object,
    Jh = (e, t) => Yh(e, t, { enumerable: !1, value: e[t] })
  function Qh(e) {
    return Jh(e.loc.start, 'index'), Jh(e.loc.end, 'index'), e
  }
  class Zh {
    constructor(e, t) {
      ;(this.token = void 0),
        (this.preserveSpace = void 0),
        (this.token = e),
        (this.preserveSpace = !!t)
    }
  }
  const ed = {
    brace: new Zh('{'),
    j_oTag: new Zh('<tag'),
    j_cTag: new Zh('</tag'),
    j_expr: new Zh('<tag>...</tag>', !0),
  }
  ed.template = new Zh('`', !0)
  const td = !0,
    rd = !0,
    nd = !0,
    id = !0,
    ad = !0
  class sd {
    constructor(e, t = {}) {
      ;(this.label = void 0),
        (this.keyword = void 0),
        (this.beforeExpr = void 0),
        (this.startsExpr = void 0),
        (this.rightAssociative = void 0),
        (this.isLoop = void 0),
        (this.isAssign = void 0),
        (this.prefix = void 0),
        (this.postfix = void 0),
        (this.binop = void 0),
        (this.label = e),
        (this.keyword = t.keyword),
        (this.beforeExpr = !!t.beforeExpr),
        (this.startsExpr = !!t.startsExpr),
        (this.rightAssociative = !!t.rightAssociative),
        (this.isLoop = !!t.isLoop),
        (this.isAssign = !!t.isAssign),
        (this.prefix = !!t.prefix),
        (this.postfix = !!t.postfix),
        (this.binop = null != t.binop ? t.binop : null),
        (this.updateContext = null)
    }
  }
  const od = new Map()
  function ld(e, t = {}) {
    t.keyword = e
    const r = gd(e, t)
    return od.set(e, r), r
  }
  function cd(e, t) {
    return gd(e, { beforeExpr: td, binop: t })
  }
  let ud = -1
  const pd = [],
    hd = [],
    dd = [],
    fd = [],
    md = [],
    yd = []
  function gd(e, t = {}) {
    var r, n, i, a
    return (
      ++ud,
      hd.push(e),
      dd.push(null != (r = t.binop) ? r : -1),
      fd.push(null != (n = t.beforeExpr) && n),
      md.push(null != (i = t.startsExpr) && i),
      yd.push(null != (a = t.prefix) && a),
      pd.push(new sd(e, t)),
      ud
    )
  }
  function bd(e, t = {}) {
    var r, n, i, a
    return (
      ++ud,
      od.set(e, ud),
      hd.push(e),
      dd.push(null != (r = t.binop) ? r : -1),
      fd.push(null != (n = t.beforeExpr) && n),
      md.push(null != (i = t.startsExpr) && i),
      yd.push(null != (a = t.prefix) && a),
      pd.push(new sd('name', t)),
      ud
    )
  }
  const vd = {
    bracketL: gd('[', { beforeExpr: td, startsExpr: rd }),
    bracketHashL: gd('#[', { beforeExpr: td, startsExpr: rd }),
    bracketBarL: gd('[|', { beforeExpr: td, startsExpr: rd }),
    bracketR: gd(']'),
    bracketBarR: gd('|]'),
    braceL: gd('{', { beforeExpr: td, startsExpr: rd }),
    braceBarL: gd('{|', { beforeExpr: td, startsExpr: rd }),
    braceHashL: gd('#{', { beforeExpr: td, startsExpr: rd }),
    braceR: gd('}', { beforeExpr: td }),
    braceBarR: gd('|}'),
    parenL: gd('(', { beforeExpr: td, startsExpr: rd }),
    parenR: gd(')'),
    comma: gd(',', { beforeExpr: td }),
    semi: gd(';', { beforeExpr: td }),
    colon: gd(':', { beforeExpr: td }),
    doubleColon: gd('::', { beforeExpr: td }),
    dot: gd('.'),
    question: gd('?', { beforeExpr: td }),
    questionDot: gd('?.'),
    arrow: gd('=>', { beforeExpr: td }),
    template: gd('template'),
    ellipsis: gd('...', { beforeExpr: td }),
    backQuote: gd('`', { startsExpr: rd }),
    dollarBraceL: gd('${', { beforeExpr: td, startsExpr: rd }),
    templateTail: gd('...`', { startsExpr: rd }),
    templateNonTail: gd('...${', { beforeExpr: td, startsExpr: rd }),
    at: gd('@'),
    hash: gd('#', { startsExpr: rd }),
    interpreterDirective: gd('#!...'),
    eq: gd('=', { beforeExpr: td, isAssign: id }),
    assign: gd('_=', { beforeExpr: td, isAssign: id }),
    slashAssign: gd('_=', { beforeExpr: td, isAssign: id }),
    xorAssign: gd('_=', { beforeExpr: td, isAssign: id }),
    moduloAssign: gd('_=', { beforeExpr: td, isAssign: id }),
    incDec: gd('++/--', { prefix: ad, postfix: !0, startsExpr: rd }),
    bang: gd('!', { beforeExpr: td, prefix: ad, startsExpr: rd }),
    tilde: gd('~', { beforeExpr: td, prefix: ad, startsExpr: rd }),
    doubleCaret: gd('^^', { startsExpr: rd }),
    doubleAt: gd('@@', { startsExpr: rd }),
    pipeline: cd('|>', 0),
    nullishCoalescing: cd('??', 1),
    logicalOR: cd('||', 1),
    logicalAND: cd('&&', 2),
    bitwiseOR: cd('|', 3),
    bitwiseXOR: cd('^', 4),
    bitwiseAND: cd('&', 5),
    equality: cd('==/!=/===/!==', 6),
    lt: cd('</>/<=/>=', 7),
    gt: cd('</>/<=/>=', 7),
    relational: cd('</>/<=/>=', 7),
    bitShift: cd('<</>>/>>>', 8),
    bitShiftL: cd('<</>>/>>>', 8),
    bitShiftR: cd('<</>>/>>>', 8),
    plusMin: gd('+/-', {
      beforeExpr: td,
      binop: 9,
      prefix: ad,
      startsExpr: rd,
    }),
    modulo: gd('%', { binop: 10, startsExpr: rd }),
    star: gd('*', { binop: 10 }),
    slash: cd('/', 10),
    exponent: gd('**', { beforeExpr: td, binop: 11, rightAssociative: !0 }),
    _in: ld('in', { beforeExpr: td, binop: 7 }),
    _instanceof: ld('instanceof', { beforeExpr: td, binop: 7 }),
    _break: ld('break'),
    _case: ld('case', { beforeExpr: td }),
    _catch: ld('catch'),
    _continue: ld('continue'),
    _debugger: ld('debugger'),
    _default: ld('default', { beforeExpr: td }),
    _else: ld('else', { beforeExpr: td }),
    _finally: ld('finally'),
    _function: ld('function', { startsExpr: rd }),
    _if: ld('if'),
    _return: ld('return', { beforeExpr: td }),
    _switch: ld('switch'),
    _throw: ld('throw', { beforeExpr: td, prefix: ad, startsExpr: rd }),
    _try: ld('try'),
    _var: ld('var'),
    _const: ld('const'),
    _with: ld('with'),
    _new: ld('new', { beforeExpr: td, startsExpr: rd }),
    _this: ld('this', { startsExpr: rd }),
    _super: ld('super', { startsExpr: rd }),
    _class: ld('class', { startsExpr: rd }),
    _extends: ld('extends', { beforeExpr: td }),
    _export: ld('export'),
    _import: ld('import', { startsExpr: rd }),
    _null: ld('null', { startsExpr: rd }),
    _true: ld('true', { startsExpr: rd }),
    _false: ld('false', { startsExpr: rd }),
    _typeof: ld('typeof', { beforeExpr: td, prefix: ad, startsExpr: rd }),
    _void: ld('void', { beforeExpr: td, prefix: ad, startsExpr: rd }),
    _delete: ld('delete', { beforeExpr: td, prefix: ad, startsExpr: rd }),
    _do: ld('do', { isLoop: nd, beforeExpr: td }),
    _for: ld('for', { isLoop: nd }),
    _while: ld('while', { isLoop: nd }),
    _as: bd('as', { startsExpr: rd }),
    _assert: bd('assert', { startsExpr: rd }),
    _async: bd('async', { startsExpr: rd }),
    _await: bd('await', { startsExpr: rd }),
    _from: bd('from', { startsExpr: rd }),
    _get: bd('get', { startsExpr: rd }),
    _let: bd('let', { startsExpr: rd }),
    _meta: bd('meta', { startsExpr: rd }),
    _of: bd('of', { startsExpr: rd }),
    _sent: bd('sent', { startsExpr: rd }),
    _set: bd('set', { startsExpr: rd }),
    _static: bd('static', { startsExpr: rd }),
    _yield: bd('yield', { startsExpr: rd }),
    _asserts: bd('asserts', { startsExpr: rd }),
    _checks: bd('checks', { startsExpr: rd }),
    _exports: bd('exports', { startsExpr: rd }),
    _global: bd('global', { startsExpr: rd }),
    _implements: bd('implements', { startsExpr: rd }),
    _intrinsic: bd('intrinsic', { startsExpr: rd }),
    _infer: bd('infer', { startsExpr: rd }),
    _is: bd('is', { startsExpr: rd }),
    _mixins: bd('mixins', { startsExpr: rd }),
    _proto: bd('proto', { startsExpr: rd }),
    _require: bd('require', { startsExpr: rd }),
    _keyof: bd('keyof', { startsExpr: rd }),
    _readonly: bd('readonly', { startsExpr: rd }),
    _unique: bd('unique', { startsExpr: rd }),
    _abstract: bd('abstract', { startsExpr: rd }),
    _declare: bd('declare', { startsExpr: rd }),
    _enum: bd('enum', { startsExpr: rd }),
    _module: bd('module', { startsExpr: rd }),
    _namespace: bd('namespace', { startsExpr: rd }),
    _interface: bd('interface', { startsExpr: rd }),
    _type: bd('type', { startsExpr: rd }),
    _opaque: bd('opaque', { startsExpr: rd }),
    name: gd('name', { startsExpr: rd }),
    string: gd('string', { startsExpr: rd }),
    num: gd('num', { startsExpr: rd }),
    bigint: gd('bigint', { startsExpr: rd }),
    decimal: gd('decimal', { startsExpr: rd }),
    regexp: gd('regexp', { startsExpr: rd }),
    privateName: gd('#name', { startsExpr: rd }),
    eof: gd('eof'),
    jsxName: gd('jsxName'),
    jsxText: gd('jsxText', { beforeExpr: !0 }),
    jsxTagStart: gd('jsxTagStart', { startsExpr: !0 }),
    jsxTagEnd: gd('jsxTagEnd'),
    placeholder: gd('%%', { startsExpr: !0 }),
  }
  function xd(e) {
    return e >= 93 && e <= 128
  }
  function wd(e) {
    return e >= 58 && e <= 128
  }
  function Ed(e) {
    return e >= 58 && e <= 132
  }
  function Pd(e) {
    return md[e]
  }
  function Sd(e) {
    return e >= 125 && e <= 127
  }
  function Td(e) {
    return e >= 58 && e <= 92
  }
  function Cd(e) {
    return hd[e]
  }
  function Ad(e) {
    return dd[e]
  }
  function Rd(e) {
    return e >= 24 && e <= 25
  }
  function kd(e) {
    return pd[e]
  }
  ;(pd[8].updateContext = (e) => {
    e.pop()
  }),
    (pd[5].updateContext =
      pd[7].updateContext =
      pd[23].updateContext =
        (e) => {
          e.push(ed.brace)
        }),
    (pd[22].updateContext = (e) => {
      e[e.length - 1] === ed.template ? e.pop() : e.push(ed.template)
    }),
    (pd[138].updateContext = (e) => {
      e.push(ed.j_expr, ed.j_oTag)
    })
  let Nd =
      'ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ',
    Od =
      '‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿'
  const Id = new RegExp('[' + Nd + ']'),
    Fd = new RegExp('[' + Nd + Od + ']')
  Nd = Od = null
  const jd = [
      0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48,
      48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35,
      5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68,
      310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3,
      22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16,
      3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14,
      17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21,
      43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30,
      0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2,
      0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0,
      19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3,
      37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3,
      0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11,
      39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113,
      6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80,
      921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30,
      18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67,
      12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290,
      46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1,
      3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3,
      2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30,
      2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19,
      43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2,
      1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1,
      2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2,
      0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761,
      15, 7472, 3104, 541, 1507, 4938,
    ],
    _d = [
      509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1,
      574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3,
      46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3,
      2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0,
      11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28,
      1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2,
      1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0,
      10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2,
      6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4,
      60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3,
      22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9,
      0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9,
      357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239,
    ]
  function Md(e, t) {
    let r = 65536
    for (let n = 0, i = t.length; n < i; n += 2) {
      if (((r += t[n]), r > e)) return !1
      if (((r += t[n + 1]), r >= e)) return !0
    }
    return !1
  }
  function Dd(e) {
    return e < 65
      ? 36 === e
      : e <= 90 ||
          (e < 97
            ? 95 === e
            : e <= 122 ||
              (e <= 65535
                ? e >= 170 && Id.test(String.fromCharCode(e))
                : Md(e, jd)))
  }
  function Ld(e) {
    return e < 48
      ? 36 === e
      : e < 58 ||
          (!(e < 65) &&
            (e <= 90 ||
              (e < 97
                ? 95 === e
                : e <= 122 ||
                  (e <= 65535
                    ? e >= 170 && Fd.test(String.fromCharCode(e))
                    : Md(e, jd) || Md(e, _d)))))
  }
  const Bd = [
      'implements',
      'interface',
      'let',
      'package',
      'private',
      'protected',
      'public',
      'static',
      'yield',
    ],
    zd = ['eval', 'arguments'],
    Ud = new Set([
      'break',
      'case',
      'catch',
      'continue',
      'debugger',
      'default',
      'do',
      'else',
      'finally',
      'for',
      'function',
      'if',
      'return',
      'switch',
      'throw',
      'try',
      'var',
      'const',
      'while',
      'with',
      'new',
      'this',
      'super',
      'class',
      'extends',
      'export',
      'import',
      'null',
      'true',
      'false',
      'in',
      'instanceof',
      'typeof',
      'void',
      'delete',
    ]),
    Wd = new Set(Bd),
    Hd = new Set(zd)
  function Vd(e, t) {
    return (t && 'await' === e) || 'enum' === e
  }
  function $d(e, t) {
    return Vd(e, t) || Wd.has(e)
  }
  function qd(e) {
    return Hd.has(e)
  }
  function Kd(e, t) {
    return $d(e, t) || qd(e)
  }
  const Gd = new Set([
    'break',
    'case',
    'catch',
    'continue',
    'debugger',
    'default',
    'do',
    'else',
    'finally',
    'for',
    'function',
    'if',
    'return',
    'switch',
    'throw',
    'try',
    'var',
    'const',
    'while',
    'with',
    'new',
    'this',
    'super',
    'class',
    'extends',
    'export',
    'import',
    'null',
    'true',
    'false',
    'in',
    'instanceof',
    'typeof',
    'void',
    'delete',
    'implements',
    'interface',
    'let',
    'package',
    'private',
    'protected',
    'public',
    'static',
    'yield',
    'eval',
    'arguments',
    'enum',
    'await',
  ])
  const Xd = 64,
    Yd = 256,
    Jd = 259,
    Qd = 128,
    Zd = 1024,
    ef = 2048,
    tf = 64
  function rf(e, t) {
    void 0 === e.trailingComments
      ? (e.trailingComments = t)
      : e.trailingComments.unshift(...t)
  }
  function nf(e, t) {
    void 0 === e.innerComments
      ? (e.innerComments = t)
      : e.innerComments.unshift(...t)
  }
  function af(e, t, r) {
    let n = null,
      i = t.length
    for (; null === n && i > 0; ) n = t[--i]
    null === n || n.start > r.start ? nf(e, r.comments) : rf(n, r.comments)
  }
  const sf = /\r\n?|[\n\u2028\u2029]/,
    of = new RegExp(sf.source, 'g')
  function lf(e) {
    switch (e) {
      case 10:
      case 13:
      case 8232:
      case 8233:
        return !0
      default:
        return !1
    }
  }
  const cf = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,
    uf = new RegExp(
      '(?=(' +
        /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y.source +
        '))\\1' +
        /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source,
      'y'
    )
  function pf(e) {
    switch (e) {
      case 9:
      case 11:
      case 12:
      case 32:
      case 160:
      case 5760:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8239:
      case 8287:
      case 12288:
      case 65279:
        return !0
      default:
        return !1
    }
  }
  class hf {
    constructor() {
      ;(this.strict = void 0),
        (this.curLine = void 0),
        (this.lineStart = void 0),
        (this.startLoc = void 0),
        (this.endLoc = void 0),
        (this.errors = []),
        (this.potentialArrowAt = -1),
        (this.noArrowAt = []),
        (this.noArrowParamsConversionAt = []),
        (this.maybeInArrowParameters = !1),
        (this.inType = !1),
        (this.noAnonFunctionType = !1),
        (this.hasFlowComment = !1),
        (this.isAmbientContext = !1),
        (this.inAbstractClass = !1),
        (this.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null,
        }),
        (this.soloAwait = !1),
        (this.inFSharpPipelineDirectBody = !1),
        (this.labels = []),
        (this.decoratorStack = [[]]),
        (this.comments = []),
        (this.commentStack = []),
        (this.pos = 0),
        (this.type = 135),
        (this.value = null),
        (this.start = 0),
        (this.end = 0),
        (this.lastTokEndLoc = null),
        (this.lastTokStartLoc = null),
        (this.lastTokStart = 0),
        (this.context = [ed.brace]),
        (this.canStartJSXElement = !0),
        (this.containsEsc = !1),
        (this.strictErrors = new Map()),
        (this.tokensLength = 0)
    }
    init({ strictMode: e, sourceType: t, startLine: r, startColumn: n }) {
      ;(this.strict = !1 !== e && (!0 === e || 'module' === t)),
        (this.curLine = r),
        (this.lineStart = -n),
        (this.startLoc = this.endLoc = new Dh(r, n, 0))
    }
    curPosition() {
      return new Dh(this.curLine, this.pos - this.lineStart, this.pos)
    }
    clone(e) {
      const t = new hf(),
        r = Object.keys(this)
      for (let n = 0, i = r.length; n < i; n++) {
        const i = r[n]
        let a = this[i]
        !e && Array.isArray(a) && (a = a.slice()), (t[i] = a)
      }
      return t
    }
  }
  const df = ['at'],
    ff = ['at']
  var mf = function (e) {
    return e >= 48 && e <= 57
  }
  const yf = new Set([103, 109, 115, 105, 121, 117, 100, 118]),
    gf = {
      decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),
      hex: new Set([46, 88, 95, 120]),
    },
    bf = {}
  ;(bf.bin = new Set([48, 49])),
    (bf.oct = new Set([...bf.bin, 50, 51, 52, 53, 54, 55])),
    (bf.dec = new Set([...bf.oct, 56, 57])),
    (bf.hex = new Set([
      ...bf.dec,
      65,
      66,
      67,
      68,
      69,
      70,
      97,
      98,
      99,
      100,
      101,
      102,
    ]))
  class vf {
    constructor(e) {
      ;(this.type = e.type),
        (this.value = e.value),
        (this.start = e.start),
        (this.end = e.end),
        (this.loc = new Lh(e.startLoc, e.endLoc))
    }
  }
  class xf {
    constructor(e) {
      ;(this.var = new Set()),
        (this.lexical = new Set()),
        (this.functions = new Set()),
        (this.flags = e)
    }
  }
  class wf {
    constructor(e, t) {
      ;(this.parser = void 0),
        (this.scopeStack = []),
        (this.inModule = void 0),
        (this.undefinedExports = new Map()),
        (this.parser = e),
        (this.inModule = t)
    }
    get inFunction() {
      return (2 & this.currentVarScopeFlags()) > 0
    }
    get allowSuper() {
      return (16 & this.currentThisScopeFlags()) > 0
    }
    get allowDirectSuper() {
      return (32 & this.currentThisScopeFlags()) > 0
    }
    get inClass() {
      return (this.currentThisScopeFlags() & Xd) > 0
    }
    get inClassAndNotInNonArrowFunction() {
      const e = this.currentThisScopeFlags()
      return (e & Xd) > 0 && 0 == (2 & e)
    }
    get inStaticBlock() {
      for (let e = this.scopeStack.length - 1; ; e--) {
        const { flags: t } = this.scopeStack[e]
        if (128 & t) return !0
        if (323 & t) return !1
      }
    }
    get inNonArrowFunction() {
      return (2 & this.currentThisScopeFlags()) > 0
    }
    get treatFunctionsAsVar() {
      return this.treatFunctionsAsVarInScope(this.currentScope())
    }
    createScope(e) {
      return new xf(e)
    }
    enter(e) {
      this.scopeStack.push(this.createScope(e))
    }
    exit() {
      this.scopeStack.pop()
    }
    treatFunctionsAsVarInScope(e) {
      return !!(130 & e.flags || (!this.parser.inModule && 1 & e.flags))
    }
    declareName(e, t, r) {
      let n = this.currentScope()
      if (8 & t || 16 & t)
        this.checkRedeclarationInScope(n, e, t, r),
          16 & t ? n.functions.add(e) : n.lexical.add(e),
          8 & t && this.maybeExportDefined(n, e)
      else if (4 & t)
        for (
          let i = this.scopeStack.length - 1;
          i >= 0 &&
          ((n = this.scopeStack[i]),
          this.checkRedeclarationInScope(n, e, t, r),
          n.var.add(e),
          this.maybeExportDefined(n, e),
          !(n.flags & Jd));
          --i
        );
      this.parser.inModule && 1 & n.flags && this.undefinedExports.delete(e)
    }
    maybeExportDefined(e, t) {
      this.parser.inModule && 1 & e.flags && this.undefinedExports.delete(t)
    }
    checkRedeclarationInScope(e, t, r, n) {
      this.isRedeclaredInScope(e, t, r) &&
        this.parser.raise(Xh.VarRedeclaration, { at: n, identifierName: t })
    }
    isRedeclaredInScope(e, t, r) {
      return (
        !!(1 & r) &&
        (8 & r
          ? e.lexical.has(t) || e.functions.has(t) || e.var.has(t)
          : 16 & r
          ? e.lexical.has(t) ||
            (!this.treatFunctionsAsVarInScope(e) && e.var.has(t))
          : (e.lexical.has(t) &&
              !(8 & e.flags && e.lexical.values().next().value === t)) ||
            (!this.treatFunctionsAsVarInScope(e) && e.functions.has(t)))
      )
    }
    checkLocalExport(e) {
      const { name: t } = e,
        r = this.scopeStack[0]
      r.lexical.has(t) ||
        r.var.has(t) ||
        r.functions.has(t) ||
        this.undefinedExports.set(t, e.loc.start)
    }
    currentScope() {
      return this.scopeStack[this.scopeStack.length - 1]
    }
    currentVarScopeFlags() {
      for (let e = this.scopeStack.length - 1; ; e--) {
        const { flags: t } = this.scopeStack[e]
        if (t & Jd) return t
      }
    }
    currentThisScopeFlags() {
      for (let e = this.scopeStack.length - 1; ; e--) {
        const { flags: t } = this.scopeStack[e]
        if (323 & t && !(4 & t)) return t
      }
    }
  }
  class Ef extends xf {
    constructor(...e) {
      super(...e), (this.declareFunctions = new Set())
    }
  }
  class Pf extends wf {
    createScope(e) {
      return new Ef(e)
    }
    declareName(e, t, r) {
      const n = this.currentScope()
      if (t & ef)
        return (
          this.checkRedeclarationInScope(n, e, t, r),
          this.maybeExportDefined(n, e),
          void n.declareFunctions.add(e)
        )
      super.declareName(...arguments)
    }
    isRedeclaredInScope(e, t, r) {
      return (
        !!super.isRedeclaredInScope(...arguments) ||
        (!!(r & ef) &&
          !e.declareFunctions.has(t) &&
          (e.lexical.has(t) || e.functions.has(t)))
      )
    }
    checkLocalExport(e) {
      this.scopeStack[0].declareFunctions.has(e.name) ||
        super.checkLocalExport(e)
    }
  }
  class Sf {
    constructor() {
      ;(this.privateNames = new Set()),
        (this.loneAccessors = new Map()),
        (this.undefinedPrivateNames = new Map())
    }
  }
  class Tf {
    constructor(e) {
      ;(this.parser = void 0),
        (this.stack = []),
        (this.undefinedPrivateNames = new Map()),
        (this.parser = e)
    }
    current() {
      return this.stack[this.stack.length - 1]
    }
    enter() {
      this.stack.push(new Sf())
    }
    exit() {
      const e = this.stack.pop(),
        t = this.current()
      for (const [r, n] of Array.from(e.undefinedPrivateNames))
        t
          ? t.undefinedPrivateNames.has(r) || t.undefinedPrivateNames.set(r, n)
          : this.parser.raise(Xh.InvalidPrivateFieldResolution, {
              at: n,
              identifierName: r,
            })
    }
    declarePrivateName(e, t, r) {
      const {
        privateNames: n,
        loneAccessors: i,
        undefinedPrivateNames: a,
      } = this.current()
      let s = n.has(e)
      if (3 & t) {
        const r = s && i.get(e)
        if (r) {
          const n = 4 & r,
            a = 4 & t
          ;(s = (3 & r) === (3 & t) || n !== a), s || i.delete(e)
        } else s || i.set(e, t)
      }
      s &&
        this.parser.raise(Xh.PrivateNameRedeclaration, {
          at: r,
          identifierName: e,
        }),
        n.add(e),
        a.delete(e)
    }
    usePrivateName(e, t) {
      let r
      for (r of this.stack) if (r.privateNames.has(e)) return
      r
        ? r.undefinedPrivateNames.set(e, t)
        : this.parser.raise(Xh.InvalidPrivateFieldResolution, {
            at: t,
            identifierName: e,
          })
    }
  }
  class Cf {
    constructor(e = 0) {
      ;(this.type = void 0), (this.type = e)
    }
    canBeArrowParameterDeclaration() {
      return 2 === this.type || 1 === this.type
    }
    isCertainlyParameterDeclaration() {
      return 3 === this.type
    }
  }
  class Af extends Cf {
    constructor(e) {
      super(e), (this.declarationErrors = new Map())
    }
    recordDeclarationError(e, { at: t }) {
      const r = t.index
      this.declarationErrors.set(r, [e, t])
    }
    clearDeclarationError(e) {
      this.declarationErrors.delete(e)
    }
    iterateErrors(e) {
      this.declarationErrors.forEach(e)
    }
  }
  class Rf {
    constructor(e) {
      ;(this.parser = void 0), (this.stack = [new Cf()]), (this.parser = e)
    }
    enter(e) {
      this.stack.push(e)
    }
    exit() {
      this.stack.pop()
    }
    recordParameterInitializerError(e, { at: t }) {
      const r = { at: t.loc.start },
        { stack: n } = this
      let i = n.length - 1,
        a = n[i]
      for (; !a.isCertainlyParameterDeclaration(); ) {
        if (!a.canBeArrowParameterDeclaration()) return
        a.recordDeclarationError(e, r), (a = n[--i])
      }
      this.parser.raise(e, r)
    }
    recordParenthesizedIdentifierError({ at: e }) {
      const { stack: t } = this,
        r = t[t.length - 1],
        n = { at: e.loc.start }
      if (r.isCertainlyParameterDeclaration())
        this.parser.raise(Xh.InvalidParenthesizedAssignment, n)
      else {
        if (!r.canBeArrowParameterDeclaration()) return
        r.recordDeclarationError(Xh.InvalidParenthesizedAssignment, n)
      }
    }
    recordAsyncArrowParametersError({ at: e }) {
      const { stack: t } = this
      let r = t.length - 1,
        n = t[r]
      for (; n.canBeArrowParameterDeclaration(); )
        2 === n.type &&
          n.recordDeclarationError(Xh.AwaitBindingIdentifier, { at: e }),
          (n = t[--r])
    }
    validateAsPattern() {
      const { stack: e } = this,
        t = e[e.length - 1]
      t.canBeArrowParameterDeclaration() &&
        t.iterateErrors(([t, r]) => {
          this.parser.raise(t, { at: r })
          let n = e.length - 2,
            i = e[n]
          for (; i.canBeArrowParameterDeclaration(); )
            i.clearDeclarationError(r.index), (i = e[--n])
        })
    }
  }
  function kf() {
    return new Cf()
  }
  class Nf {
    constructor() {
      this.stacks = []
    }
    enter(e) {
      this.stacks.push(e)
    }
    exit() {
      this.stacks.pop()
    }
    currentFlags() {
      return this.stacks[this.stacks.length - 1]
    }
    get hasAwait() {
      return (2 & this.currentFlags()) > 0
    }
    get hasYield() {
      return (1 & this.currentFlags()) > 0
    }
    get hasReturn() {
      return (4 & this.currentFlags()) > 0
    }
    get hasIn() {
      return (8 & this.currentFlags()) > 0
    }
  }
  function Of(e, t) {
    return (e ? 2 : 0) | (t ? 1 : 0)
  }
  class If {
    constructor() {
      ;(this.shorthandAssignLoc = null),
        (this.doubleProtoLoc = null),
        (this.privateKeyLoc = null),
        (this.optionalParametersLoc = null)
    }
  }
  class Ff {
    constructor(e, t, r) {
      ;(this.type = ''),
        (this.start = t),
        (this.end = 0),
        (this.loc = new Lh(r)),
        null != e && e.options.ranges && (this.range = [t, 0]),
        null != e && e.filename && (this.loc.filename = e.filename)
    }
  }
  const jf = Ff.prototype
  function _f(e) {
    const {
        type: t,
        start: r,
        end: n,
        loc: i,
        range: a,
        extra: s,
        name: o,
      } = e,
      l = Object.create(jf)
    return (
      (l.type = t),
      (l.start = r),
      (l.end = n),
      (l.loc = i),
      (l.range = a),
      (l.extra = s),
      (l.name = o),
      'Placeholder' === t && (l.expectedNode = e.expectedNode),
      l
    )
  }
  function Mf(e) {
    const { type: t, start: r, end: n, loc: i, range: a, extra: s } = e
    if ('Placeholder' === t)
      return (function (e) {
        return _f(e)
      })(e)
    const o = Object.create(jf)
    return (
      (o.type = t),
      (o.start = r),
      (o.end = n),
      (o.loc = i),
      (o.range = a),
      void 0 !== e.raw ? (o.raw = e.raw) : (o.extra = s),
      (o.value = e.value),
      o
    )
  }
  jf.__clone = function () {
    const e = new Ff(),
      t = Object.keys(this)
    for (let r = 0, n = t.length; r < n; r++) {
      const n = t[r]
      'leadingComments' !== n &&
        'trailingComments' !== n &&
        'innerComments' !== n &&
        (e[n] = this[n])
    }
    return e
  }
  const Df = new Set([
      '_',
      'any',
      'bool',
      'boolean',
      'empty',
      'extends',
      'false',
      'interface',
      'mixed',
      'null',
      'number',
      'static',
      'string',
      'true',
      'typeof',
      'void',
    ]),
    Lf = Gh`flow`((e) => ({
      AmbiguousConditionalArrow: e(
        'Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.'
      ),
      AmbiguousDeclareModuleKind: e(
        'Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.'
      ),
      AssignReservedType: e(
        ({ reservedType: e }) => `Cannot overwrite reserved type ${e}.`
      ),
      DeclareClassElement: e(
        'The `declare` modifier can only appear on class fields.'
      ),
      DeclareClassFieldInitializer: e(
        'Initializers are not allowed in fields with the `declare` modifier.'
      ),
      DuplicateDeclareModuleExports: e(
        'Duplicate `declare module.exports` statement.'
      ),
      EnumBooleanMemberNotInitialized: e(
        ({ memberName: e, enumName: t }) =>
          `Boolean enum members need to be initialized. Use either \`${e} = true,\` or \`${e} = false,\` in enum \`${t}\`.`
      ),
      EnumDuplicateMemberName: e(
        ({ memberName: e, enumName: t }) =>
          `Enum member names need to be unique, but the name \`${e}\` has already been used before in enum \`${t}\`.`
      ),
      EnumInconsistentMemberValues: e(
        ({ enumName: e }) =>
          `Enum \`${e}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`
      ),
      EnumInvalidExplicitType: e(
        ({ invalidEnumType: e, enumName: t }) =>
          `Enum type \`${e}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${t}\`.`
      ),
      EnumInvalidExplicitTypeUnknownSupplied: e(
        ({ enumName: e }) =>
          `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${e}\`.`
      ),
      EnumInvalidMemberInitializerPrimaryType: e(
        ({ enumName: e, memberName: t, explicitType: r }) =>
          `Enum \`${e}\` has type \`${r}\`, so the initializer of \`${t}\` needs to be a ${r} literal.`
      ),
      EnumInvalidMemberInitializerSymbolType: e(
        ({ enumName: e, memberName: t }) =>
          `Symbol enum members cannot be initialized. Use \`${t},\` in enum \`${e}\`.`
      ),
      EnumInvalidMemberInitializerUnknownType: e(
        ({ enumName: e, memberName: t }) =>
          `The enum member initializer for \`${t}\` needs to be a literal (either a boolean, number, or string) in enum \`${e}\`.`
      ),
      EnumInvalidMemberName: e(
        ({ enumName: e, memberName: t, suggestion: r }) =>
          `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${t}\`, consider using \`${r}\`, in enum \`${e}\`.`
      ),
      EnumNumberMemberNotInitialized: e(
        ({ enumName: e, memberName: t }) =>
          `Number enum members need to be initialized, e.g. \`${t} = 1\` in enum \`${e}\`.`
      ),
      EnumStringMemberInconsistentlyInitailized: e(
        ({ enumName: e }) =>
          `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${e}\`.`
      ),
      GetterMayNotHaveThisParam: e('A getter cannot have a `this` parameter.'),
      ImportTypeShorthandOnlyInPureImport: e(
        'The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.'
      ),
      InexactInsideExact: e(
        'Explicit inexact syntax cannot appear inside an explicit exact object type.'
      ),
      InexactInsideNonObject: e(
        'Explicit inexact syntax cannot appear in class or interface definitions.'
      ),
      InexactVariance: e('Explicit inexact syntax cannot have variance.'),
      InvalidNonTypeImportInDeclareModule: e(
        'Imports within a `declare module` body must always be `import type` or `import typeof`.'
      ),
      MissingTypeParamDefault: e(
        'Type parameter declaration needs a default, since a preceding type parameter declaration has a default.'
      ),
      NestedDeclareModule: e(
        '`declare module` cannot be used inside another `declare module`.'
      ),
      NestedFlowComment: e(
        'Cannot have a flow comment inside another flow comment.'
      ),
      PatternIsOptional: e(
        'A binding pattern parameter cannot be optional in an implementation signature.',
        { reasonCode: 'OptionalBindingPattern' }
      ),
      SetterMayNotHaveThisParam: e('A setter cannot have a `this` parameter.'),
      SpreadVariance: e('Spread properties cannot have variance.'),
      ThisParamAnnotationRequired: e(
        'A type annotation is required for the `this` parameter.'
      ),
      ThisParamBannedInConstructor: e(
        "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions."
      ),
      ThisParamMayNotBeOptional: e('The `this` parameter cannot be optional.'),
      ThisParamMustBeFirst: e(
        'The `this` parameter must be the first function parameter.'
      ),
      ThisParamNoDefault: e(
        'The `this` parameter may not have a default value.'
      ),
      TypeBeforeInitializer: e(
        'Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.'
      ),
      TypeCastInPattern: e(
        'The type cast expression is expected to be wrapped with parenthesis.'
      ),
      UnexpectedExplicitInexactInObject: e(
        'Explicit inexact syntax must appear at the end of an inexact object.'
      ),
      UnexpectedReservedType: e(
        ({ reservedType: e }) => `Unexpected reserved type ${e}.`
      ),
      UnexpectedReservedUnderscore: e(
        '`_` is only allowed as a type argument to call or new.'
      ),
      UnexpectedSpaceBetweenModuloChecks: e(
        'Spaces between `%` and `checks` are not allowed here.'
      ),
      UnexpectedSpreadType: e(
        'Spread operator cannot appear in class or interface definitions.'
      ),
      UnexpectedSubtractionOperand: e(
        'Unexpected token, expected "number" or "bigint".'
      ),
      UnexpectedTokenAfterTypeParameter: e(
        'Expected an arrow function after this type parameter declaration.'
      ),
      UnexpectedTypeParameterBeforeAsyncArrowFunction: e(
        'Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.'
      ),
      UnsupportedDeclareExportKind: e(
        ({ unsupportedExportKind: e, suggestion: t }) =>
          `\`declare export ${e}\` is not supported. Use \`${t}\` instead.`
      ),
      UnsupportedStatementInDeclareModule: e(
        'Only declares and type imports are allowed inside declare module.'
      ),
      UnterminatedFlowComment: e('Unterminated flow-comment.'),
    }))
  function Bf(e) {
    return 'type' === e.importKind || 'typeof' === e.importKind
  }
  function zf(e) {
    return wd(e) && 97 !== e
  }
  const Uf = {
    const: 'declare export var',
    let: 'declare export var',
    type: 'export type',
    interface: 'export interface',
  }
  const Wf = /\*?\s*@((?:no)?flow)\b/
  const Hf = {
      __proto__: null,
      quot: '"',
      amp: '&',
      apos: "'",
      lt: '<',
      gt: '>',
      nbsp: ' ',
      iexcl: '¡',
      cent: '¢',
      pound: '£',
      curren: '¤',
      yen: '¥',
      brvbar: '¦',
      sect: '§',
      uml: '¨',
      copy: '©',
      ordf: 'ª',
      laquo: '«',
      not: '¬',
      shy: '­',
      reg: '®',
      macr: '¯',
      deg: '°',
      plusmn: '±',
      sup2: '²',
      sup3: '³',
      acute: '´',
      micro: 'µ',
      para: '¶',
      middot: '·',
      cedil: '¸',
      sup1: '¹',
      ordm: 'º',
      raquo: '»',
      frac14: '¼',
      frac12: '½',
      frac34: '¾',
      iquest: '¿',
      Agrave: 'À',
      Aacute: 'Á',
      Acirc: 'Â',
      Atilde: 'Ã',
      Auml: 'Ä',
      Aring: 'Å',
      AElig: 'Æ',
      Ccedil: 'Ç',
      Egrave: 'È',
      Eacute: 'É',
      Ecirc: 'Ê',
      Euml: 'Ë',
      Igrave: 'Ì',
      Iacute: 'Í',
      Icirc: 'Î',
      Iuml: 'Ï',
      ETH: 'Ð',
      Ntilde: 'Ñ',
      Ograve: 'Ò',
      Oacute: 'Ó',
      Ocirc: 'Ô',
      Otilde: 'Õ',
      Ouml: 'Ö',
      times: '×',
      Oslash: 'Ø',
      Ugrave: 'Ù',
      Uacute: 'Ú',
      Ucirc: 'Û',
      Uuml: 'Ü',
      Yacute: 'Ý',
      THORN: 'Þ',
      szlig: 'ß',
      agrave: 'à',
      aacute: 'á',
      acirc: 'â',
      atilde: 'ã',
      auml: 'ä',
      aring: 'å',
      aelig: 'æ',
      ccedil: 'ç',
      egrave: 'è',
      eacute: 'é',
      ecirc: 'ê',
      euml: 'ë',
      igrave: 'ì',
      iacute: 'í',
      icirc: 'î',
      iuml: 'ï',
      eth: 'ð',
      ntilde: 'ñ',
      ograve: 'ò',
      oacute: 'ó',
      ocirc: 'ô',
      otilde: 'õ',
      ouml: 'ö',
      divide: '÷',
      oslash: 'ø',
      ugrave: 'ù',
      uacute: 'ú',
      ucirc: 'û',
      uuml: 'ü',
      yacute: 'ý',
      thorn: 'þ',
      yuml: 'ÿ',
      OElig: 'Œ',
      oelig: 'œ',
      Scaron: 'Š',
      scaron: 'š',
      Yuml: 'Ÿ',
      fnof: 'ƒ',
      circ: 'ˆ',
      tilde: '˜',
      Alpha: 'Α',
      Beta: 'Β',
      Gamma: 'Γ',
      Delta: 'Δ',
      Epsilon: 'Ε',
      Zeta: 'Ζ',
      Eta: 'Η',
      Theta: 'Θ',
      Iota: 'Ι',
      Kappa: 'Κ',
      Lambda: 'Λ',
      Mu: 'Μ',
      Nu: 'Ν',
      Xi: 'Ξ',
      Omicron: 'Ο',
      Pi: 'Π',
      Rho: 'Ρ',
      Sigma: 'Σ',
      Tau: 'Τ',
      Upsilon: 'Υ',
      Phi: 'Φ',
      Chi: 'Χ',
      Psi: 'Ψ',
      Omega: 'Ω',
      alpha: 'α',
      beta: 'β',
      gamma: 'γ',
      delta: 'δ',
      epsilon: 'ε',
      zeta: 'ζ',
      eta: 'η',
      theta: 'θ',
      iota: 'ι',
      kappa: 'κ',
      lambda: 'λ',
      mu: 'μ',
      nu: 'ν',
      xi: 'ξ',
      omicron: 'ο',
      pi: 'π',
      rho: 'ρ',
      sigmaf: 'ς',
      sigma: 'σ',
      tau: 'τ',
      upsilon: 'υ',
      phi: 'φ',
      chi: 'χ',
      psi: 'ψ',
      omega: 'ω',
      thetasym: 'ϑ',
      upsih: 'ϒ',
      piv: 'ϖ',
      ensp: ' ',
      emsp: ' ',
      thinsp: ' ',
      zwnj: '‌',
      zwj: '‍',
      lrm: '‎',
      rlm: '‏',
      ndash: '–',
      mdash: '—',
      lsquo: '‘',
      rsquo: '’',
      sbquo: '‚',
      ldquo: '“',
      rdquo: '”',
      bdquo: '„',
      dagger: '†',
      Dagger: '‡',
      bull: '•',
      hellip: '…',
      permil: '‰',
      prime: '′',
      Prime: '″',
      lsaquo: '‹',
      rsaquo: '›',
      oline: '‾',
      frasl: '⁄',
      euro: '€',
      image: 'ℑ',
      weierp: '℘',
      real: 'ℜ',
      trade: '™',
      alefsym: 'ℵ',
      larr: '←',
      uarr: '↑',
      rarr: '→',
      darr: '↓',
      harr: '↔',
      crarr: '↵',
      lArr: '⇐',
      uArr: '⇑',
      rArr: '⇒',
      dArr: '⇓',
      hArr: '⇔',
      forall: '∀',
      part: '∂',
      exist: '∃',
      empty: '∅',
      nabla: '∇',
      isin: '∈',
      notin: '∉',
      ni: '∋',
      prod: '∏',
      sum: '∑',
      minus: '−',
      lowast: '∗',
      radic: '√',
      prop: '∝',
      infin: '∞',
      ang: '∠',
      and: '∧',
      or: '∨',
      cap: '∩',
      cup: '∪',
      int: '∫',
      there4: '∴',
      sim: '∼',
      cong: '≅',
      asymp: '≈',
      ne: '≠',
      equiv: '≡',
      le: '≤',
      ge: '≥',
      sub: '⊂',
      sup: '⊃',
      nsub: '⊄',
      sube: '⊆',
      supe: '⊇',
      oplus: '⊕',
      otimes: '⊗',
      perp: '⊥',
      sdot: '⋅',
      lceil: '⌈',
      rceil: '⌉',
      lfloor: '⌊',
      rfloor: '⌋',
      lang: '〈',
      rang: '〉',
      loz: '◊',
      spades: '♠',
      clubs: '♣',
      hearts: '♥',
      diams: '♦',
    },
    Vf = Gh`jsx`((e) => ({
      AttributeIsEmpty: e(
        'JSX attributes must only be assigned a non-empty expression.'
      ),
      MissingClosingTagElement: e(
        ({ openingTagName: e }) =>
          `Expected corresponding JSX closing tag for <${e}>.`
      ),
      MissingClosingTagFragment: e(
        'Expected corresponding JSX closing tag for <>.'
      ),
      UnexpectedSequenceExpression: e(
        'Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?'
      ),
      UnexpectedToken: e(
        ({ unexpected: e, HTMLEntity: t }) =>
          `Unexpected token \`${e}\`. Did you mean \`${t}\` or \`{'${e}'}\`?`
      ),
      UnsupportedJsxValue: e(
        'JSX value should be either an expression or a quoted JSX text.'
      ),
      UnterminatedJsxContent: e('Unterminated JSX contents.'),
      UnwrappedAdjacentJSXElements: e(
        'Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?'
      ),
    }))
  function $f(e) {
    return (
      !!e &&
      ('JSXOpeningFragment' === e.type || 'JSXClosingFragment' === e.type)
    )
  }
  function qf(e) {
    if ('JSXIdentifier' === e.type) return e.name
    if ('JSXNamespacedName' === e.type)
      return e.namespace.name + ':' + e.name.name
    if ('JSXMemberExpression' === e.type)
      return qf(e.object) + '.' + qf(e.property)
    throw new Error('Node had unexpected type: ' + e.type)
  }
  class Kf extends xf {
    constructor(...e) {
      super(...e),
        (this.types = new Set()),
        (this.enums = new Set()),
        (this.constEnums = new Set()),
        (this.classes = new Set()),
        (this.exportOnlyBindings = new Set())
    }
  }
  class Gf extends wf {
    createScope(e) {
      return new Kf(e)
    }
    declareName(e, t, r) {
      const n = this.currentScope()
      if (t & Zd)
        return this.maybeExportDefined(n, e), void n.exportOnlyBindings.add(e)
      super.declareName(...arguments),
        2 & t &&
          (1 & t ||
            (this.checkRedeclarationInScope(n, e, t, r),
            this.maybeExportDefined(n, e)),
          n.types.add(e)),
        256 & t && n.enums.add(e),
        512 & t && n.constEnums.add(e),
        t & Qd && n.classes.add(e)
    }
    isRedeclaredInScope(e, t, r) {
      if (e.enums.has(t)) {
        if (256 & r) {
          return !!(512 & r) !== e.constEnums.has(t)
        }
        return !0
      }
      return r & Qd && e.classes.has(t)
        ? !!e.lexical.has(t) && !!(1 & r)
        : !!(2 & r && e.types.has(t)) || super.isRedeclaredInScope(...arguments)
    }
    checkLocalExport(e) {
      const t = this.scopeStack[0],
        { name: r } = e
      t.types.has(r) || t.exportOnlyBindings.has(r) || super.checkLocalExport(e)
    }
  }
  function Xf(e) {
    if (!e) throw new Error('Assert fail')
  }
  const Yf = Gh`typescript`((e) => ({
    AbstractMethodHasImplementation: e(
      ({ methodName: e }) =>
        `Method '${e}' cannot have an implementation because it is marked abstract.`
    ),
    AbstractPropertyHasInitializer: e(
      ({ propertyName: e }) =>
        `Property '${e}' cannot have an initializer because it is marked abstract.`
    ),
    AccesorCannotDeclareThisParameter: e(
      "'get' and 'set' accessors cannot declare 'this' parameters."
    ),
    AccesorCannotHaveTypeParameters: e(
      'An accessor cannot have type parameters.'
    ),
    CannotFindName: e(({ name: e }) => `Cannot find name '${e}'.`),
    ClassMethodHasDeclare: e(
      "Class methods cannot have the 'declare' modifier."
    ),
    ClassMethodHasReadonly: e(
      "Class methods cannot have the 'readonly' modifier."
    ),
    ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: e(
      "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference."
    ),
    ConstructorHasTypeParameters: e(
      'Type parameters cannot appear on a constructor declaration.'
    ),
    DeclareAccessor: e(
      ({ kind: e }) => `'declare' is not allowed in ${e}ters.`
    ),
    DeclareClassFieldHasInitializer: e(
      'Initializers are not allowed in ambient contexts.'
    ),
    DeclareFunctionHasImplementation: e(
      'An implementation cannot be declared in ambient contexts.'
    ),
    DuplicateAccessibilityModifier: e(
      ({ modifier: e }) => 'Accessibility modifier already seen.'
    ),
    DuplicateModifier: e(({ modifier: e }) => `Duplicate modifier: '${e}'.`),
    EmptyHeritageClauseType: e(
      ({ token: e }) => `'${e}' list cannot be empty.`
    ),
    EmptyTypeArguments: e('Type argument list cannot be empty.'),
    EmptyTypeParameters: e('Type parameter list cannot be empty.'),
    ExpectedAmbientAfterExportDeclare: e(
      "'export declare' must be followed by an ambient declaration."
    ),
    ImportAliasHasImportType: e("An import alias can not use 'import type'."),
    IncompatibleModifiers: e(
      ({ modifiers: e }) =>
        `'${e[0]}' modifier cannot be used with '${e[1]}' modifier.`
    ),
    IndexSignatureHasAbstract: e(
      "Index signatures cannot have the 'abstract' modifier."
    ),
    IndexSignatureHasAccessibility: e(
      ({ modifier: e }) =>
        `Index signatures cannot have an accessibility modifier ('${e}').`
    ),
    IndexSignatureHasDeclare: e(
      "Index signatures cannot have the 'declare' modifier."
    ),
    IndexSignatureHasOverride: e(
      "'override' modifier cannot appear on an index signature."
    ),
    IndexSignatureHasStatic: e(
      "Index signatures cannot have the 'static' modifier."
    ),
    InitializerNotAllowedInAmbientContext: e(
      'Initializers are not allowed in ambient contexts.'
    ),
    InvalidModifierOnTypeMember: e(
      ({ modifier: e }) => `'${e}' modifier cannot appear on a type member.`
    ),
    InvalidModifiersOrder: e(
      ({ orderedModifiers: e }) =>
        `'${e[0]}' modifier must precede '${e[1]}' modifier.`
    ),
    InvalidTupleMemberLabel: e(
      'Tuple members must be labeled with a simple identifier.'
    ),
    MissingInterfaceName: e(
      "'interface' declarations must be followed by an identifier."
    ),
    MixedLabeledAndUnlabeledElements: e(
      'Tuple members must all have names or all not have names.'
    ),
    NonAbstractClassHasAbstractMethod: e(
      'Abstract methods can only appear within an abstract class.'
    ),
    NonClassMethodPropertyHasAbstractModifer: e(
      "'abstract' modifier can only appear on a class, method, or property declaration."
    ),
    OptionalTypeBeforeRequired: e(
      'A required element cannot follow an optional element.'
    ),
    OverrideNotInSubClass: e(
      "This member cannot have an 'override' modifier because its containing class does not extend another class."
    ),
    PatternIsOptional: e(
      'A binding pattern parameter cannot be optional in an implementation signature.'
    ),
    PrivateElementHasAbstract: e(
      "Private elements cannot have the 'abstract' modifier."
    ),
    PrivateElementHasAccessibility: e(
      ({ modifier: e }) =>
        `Private elements cannot have an accessibility modifier ('${e}').`
    ),
    ReadonlyForMethodSignature: e(
      "'readonly' modifier can only appear on a property declaration or index signature."
    ),
    ReservedArrowTypeParam: e(
      'This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.'
    ),
    ReservedTypeAssertion: e(
      'This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.'
    ),
    SetAccesorCannotHaveOptionalParameter: e(
      "A 'set' accessor cannot have an optional parameter."
    ),
    SetAccesorCannotHaveRestParameter: e(
      "A 'set' accessor cannot have rest parameter."
    ),
    SetAccesorCannotHaveReturnType: e(
      "A 'set' accessor cannot have a return type annotation."
    ),
    SingleTypeParameterWithoutTrailingComma: e(
      ({ typeParameterName: e }) =>
        `Single type parameter ${e} should have a trailing comma. Example usage: <${e},>.`
    ),
    StaticBlockCannotHaveModifier: e(
      'Static class blocks cannot have any modifier.'
    ),
    TypeAnnotationAfterAssign: e(
      'Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.'
    ),
    TypeImportCannotSpecifyDefaultAndNamed: e(
      'A type-only import can specify a default import or named bindings, but not both.'
    ),
    TypeModifierIsUsedInTypeExports: e(
      "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement."
    ),
    TypeModifierIsUsedInTypeImports: e(
      "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement."
    ),
    UnexpectedParameterModifier: e(
      'A parameter property is only allowed in a constructor implementation.'
    ),
    UnexpectedReadonly: e(
      "'readonly' type modifier is only permitted on array and tuple literal types."
    ),
    UnexpectedTypeAnnotation: e('Did not expect a type annotation here.'),
    UnexpectedTypeCastInParameter: e(
      'Unexpected type cast in parameter position.'
    ),
    UnsupportedImportTypeArgument: e(
      'Argument in a type import must be a string literal.'
    ),
    UnsupportedParameterPropertyKind: e(
      'A parameter property may not be declared using a binding pattern.'
    ),
    UnsupportedSignatureParameterKind: e(
      ({ type: e }) =>
        `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${e}.`
    ),
  }))
  function Jf(e) {
    return 'private' === e || 'public' === e || 'protected' === e
  }
  function Qf(e) {
    if ('MemberExpression' !== e.type) return !1
    const { computed: t, property: r } = e
    return (
      (!t ||
        'StringLiteral' === r.type ||
        !('TemplateLiteral' !== r.type || r.expressions.length > 0)) &&
      Zf(e.object)
    )
  }
  function Zf(e) {
    return (
      'Identifier' === e.type ||
      ('MemberExpression' === e.type && !e.computed && Zf(e.object))
    )
  }
  const em = Gh`placeholders`((e) => ({
    ClassNameIsRequired: e('A class name is required.'),
    UnexpectedSpace: e('Unexpected space in placeholder.'),
  }))
  function tm(e, t) {
    const [r, n] = 'string' == typeof t ? [t, {}] : t,
      i = Object.keys(n),
      a = 0 === i.length
    return e.some((e) => {
      if ('string' == typeof e) return a && e === r
      {
        const [t, a] = e
        if (t !== r) return !1
        for (const e of i) if (a[e] !== n[e]) return !1
        return !0
      }
    })
  }
  function rm(e, t, r) {
    const n = e.find((e) => (Array.isArray(e) ? e[0] === t : e === t))
    return n && Array.isArray(n) ? n[1][r] : null
  }
  const nm = ['minimal', 'fsharp', 'hack', 'smart'],
    im = ['^^', '@@', '^', '%', '#'],
    am = ['hash', 'bar']
  const sm = {
      estree: (e) =>
        class extends e {
          parse() {
            const e = Qh(super.parse())
            return this.options.tokens && (e.tokens = e.tokens.map(Qh)), e
          }
          parseRegExpLiteral({ pattern: e, flags: t }) {
            let r = null
            try {
              r = new RegExp(e, t)
            } catch (e) {}
            const n = this.estreeParseLiteral(r)
            return (n.regex = { pattern: e, flags: t }), n
          }
          parseBigIntLiteral(e) {
            let t
            try {
              t = BigInt(e)
            } catch (e) {
              t = null
            }
            const r = this.estreeParseLiteral(t)
            return (r.bigint = String(r.value || e)), r
          }
          parseDecimalLiteral(e) {
            const t = this.estreeParseLiteral(null)
            return (t.decimal = String(t.value || e)), t
          }
          estreeParseLiteral(e) {
            return this.parseLiteral(e, 'Literal')
          }
          parseStringLiteral(e) {
            return this.estreeParseLiteral(e)
          }
          parseNumericLiteral(e) {
            return this.estreeParseLiteral(e)
          }
          parseNullLiteral() {
            return this.estreeParseLiteral(null)
          }
          parseBooleanLiteral(e) {
            return this.estreeParseLiteral(e)
          }
          directiveToStmt(e) {
            const t = e.value,
              r = this.startNodeAt(e.start, e.loc.start),
              n = this.startNodeAt(t.start, t.loc.start)
            return (
              (n.value = t.extra.expressionValue),
              (n.raw = t.extra.raw),
              (r.expression = this.finishNodeAt(n, 'Literal', t.loc.end)),
              (r.directive = t.extra.raw.slice(1, -1)),
              this.finishNodeAt(r, 'ExpressionStatement', e.loc.end)
            )
          }
          initFunction(e, t) {
            super.initFunction(e, t), (e.expression = !1)
          }
          checkDeclaration(e) {
            null != e && this.isObjectProperty(e)
              ? this.checkDeclaration(e.value)
              : super.checkDeclaration(e)
          }
          getObjectOrClassMethodParams(e) {
            return e.value.params
          }
          isValidDirective(e) {
            var t
            return (
              'ExpressionStatement' === e.type &&
              'Literal' === e.expression.type &&
              'string' == typeof e.expression.value &&
              !(null != (t = e.expression.extra) && t.parenthesized)
            )
          }
          parseBlockBody(e, ...t) {
            super.parseBlockBody(e, ...t)
            const r = e.directives.map((e) => this.directiveToStmt(e))
            ;(e.body = r.concat(e.body)), delete e.directives
          }
          pushClassMethod(e, t, r, n, i, a) {
            this.parseMethod(t, r, n, i, a, 'ClassMethod', !0),
              t.typeParameters &&
                ((t.value.typeParameters = t.typeParameters),
                delete t.typeParameters),
              e.body.push(t)
          }
          parsePrivateName() {
            const e = super.parsePrivateName()
            return this.getPluginOption('estree', 'classFeatures')
              ? this.convertPrivateNameToPrivateIdentifier(e)
              : e
          }
          convertPrivateNameToPrivateIdentifier(e) {
            const t = super.getPrivateNameSV(e)
            return (
              delete (e = e).id, (e.name = t), (e.type = 'PrivateIdentifier'), e
            )
          }
          isPrivateName(e) {
            return this.getPluginOption('estree', 'classFeatures')
              ? 'PrivateIdentifier' === e.type
              : super.isPrivateName(e)
          }
          getPrivateNameSV(e) {
            return this.getPluginOption('estree', 'classFeatures')
              ? e.name
              : super.getPrivateNameSV(e)
          }
          parseLiteral(e, t) {
            const r = super.parseLiteral(e, t)
            return (r.raw = r.extra.raw), delete r.extra, r
          }
          parseFunctionBody(e, t, r = !1) {
            super.parseFunctionBody(e, t, r),
              (e.expression = 'BlockStatement' !== e.body.type)
          }
          parseMethod(e, t, r, n, i, a, s = !1) {
            let o = this.startNode()
            return (
              (o.kind = e.kind),
              (o = super.parseMethod(o, t, r, n, i, a, s)),
              (o.type = 'FunctionExpression'),
              delete o.kind,
              (e.value = o),
              'ClassPrivateMethod' === a && (e.computed = !1),
              (a = 'MethodDefinition'),
              this.finishNode(e, a)
            )
          }
          parseClassProperty(...e) {
            const t = super.parseClassProperty(...e)
            return this.getPluginOption('estree', 'classFeatures')
              ? ((t.type = 'PropertyDefinition'), t)
              : t
          }
          parseClassPrivateProperty(...e) {
            const t = super.parseClassPrivateProperty(...e)
            return this.getPluginOption('estree', 'classFeatures')
              ? ((t.type = 'PropertyDefinition'), (t.computed = !1), t)
              : t
          }
          parseObjectMethod(e, t, r, n, i) {
            const a = super.parseObjectMethod(e, t, r, n, i)
            return (
              a &&
                ((a.type = 'Property'),
                'method' === a.kind && (a.kind = 'init'),
                (a.shorthand = !1)),
              a
            )
          }
          parseObjectProperty(e, t, r, n, i) {
            const a = super.parseObjectProperty(e, t, r, n, i)
            return a && ((a.kind = 'init'), (a.type = 'Property')), a
          }
          isValidLVal(e, ...t) {
            return 'Property' === e ? 'value' : super.isValidLVal(e, ...t)
          }
          isAssignable(e, t) {
            return null != e && this.isObjectProperty(e)
              ? this.isAssignable(e.value, t)
              : super.isAssignable(e, t)
          }
          toAssignable(e, t = !1) {
            if (null != e && this.isObjectProperty(e)) {
              const { key: r, value: n } = e
              return (
                this.isPrivateName(r) &&
                  this.classScope.usePrivateName(
                    this.getPrivateNameSV(r),
                    r.loc.start
                  ),
                this.toAssignable(n, t),
                e
              )
            }
            return super.toAssignable(e, t)
          }
          toAssignableObjectExpressionProp(e, ...t) {
            'get' === e.kind || 'set' === e.kind
              ? this.raise(Xh.PatternHasAccessor, { at: e.key })
              : e.method
              ? this.raise(Xh.PatternHasMethod, { at: e.key })
              : super.toAssignableObjectExpressionProp(e, ...t)
          }
          finishCallExpression(e, t) {
            if (
              (super.finishCallExpression(e, t), 'Import' === e.callee.type)
            ) {
              var r
              if (
                ((e.type = 'ImportExpression'),
                (e.source = e.arguments[0]),
                this.hasPlugin('importAssertions'))
              )
                e.attributes = null != (r = e.arguments[1]) ? r : null
              delete e.arguments, delete e.callee
            }
            return e
          }
          toReferencedArguments(e) {
            'ImportExpression' !== e.type && super.toReferencedArguments(e)
          }
          parseExport(e) {
            switch ((super.parseExport(e), e.type)) {
              case 'ExportAllDeclaration':
                e.exported = null
                break
              case 'ExportNamedDeclaration':
                1 === e.specifiers.length &&
                  'ExportNamespaceSpecifier' === e.specifiers[0].type &&
                  ((e.type = 'ExportAllDeclaration'),
                  (e.exported = e.specifiers[0].exported),
                  delete e.specifiers)
            }
            return e
          }
          parseSubscript(e, t, r, n, i) {
            const a = super.parseSubscript(e, t, r, n, i)
            if (i.optionalChainMember) {
              if (
                (('OptionalMemberExpression' !== a.type &&
                  'OptionalCallExpression' !== a.type) ||
                  (a.type = a.type.substring(8)),
                i.stop)
              ) {
                const e = this.startNodeAtNode(a)
                return (e.expression = a), this.finishNode(e, 'ChainExpression')
              }
            } else
              ('MemberExpression' !== a.type && 'CallExpression' !== a.type) ||
                (a.optional = !1)
            return a
          }
          hasPropertyAsPrivateName(e) {
            return (
              'ChainExpression' === e.type && (e = e.expression),
              super.hasPropertyAsPrivateName(e)
            )
          }
          isOptionalChain(e) {
            return 'ChainExpression' === e.type
          }
          isObjectProperty(e) {
            return 'Property' === e.type && 'init' === e.kind && !e.method
          }
          isObjectMethod(e) {
            return e.method || 'get' === e.kind || 'set' === e.kind
          }
          finishNodeAt(e, t, r) {
            return Qh(super.finishNodeAt(e, t, r))
          }
          resetEndLocation(e, t = this.state.lastTokEndLoc) {
            super.resetEndLocation(e, t), Qh(e)
          }
        },
      jsx: (e) =>
        class extends e {
          jsxReadToken() {
            let e = '',
              t = this.state.pos
            for (;;) {
              if (this.state.pos >= this.length)
                throw this.raise(Vf.UnterminatedJsxContent, {
                  at: this.state.startLoc,
                })
              const r = this.input.charCodeAt(this.state.pos)
              switch (r) {
                case 60:
                case 123:
                  return this.state.pos === this.state.start
                    ? 60 === r && this.state.canStartJSXElement
                      ? (++this.state.pos, this.finishToken(138))
                      : super.getTokenFromCode(r)
                    : ((e += this.input.slice(t, this.state.pos)),
                      this.finishToken(137, e))
                case 38:
                  ;(e += this.input.slice(t, this.state.pos)),
                    (e += this.jsxReadEntity()),
                    (t = this.state.pos)
                  break
                default:
                  lf(r)
                    ? ((e += this.input.slice(t, this.state.pos)),
                      (e += this.jsxReadNewLine(!0)),
                      (t = this.state.pos))
                    : ++this.state.pos
              }
            }
          }
          jsxReadNewLine(e) {
            const t = this.input.charCodeAt(this.state.pos)
            let r
            return (
              ++this.state.pos,
              13 === t && 10 === this.input.charCodeAt(this.state.pos)
                ? (++this.state.pos, (r = e ? '\n' : '\r\n'))
                : (r = String.fromCharCode(t)),
              ++this.state.curLine,
              (this.state.lineStart = this.state.pos),
              r
            )
          }
          jsxReadString(e) {
            let t = '',
              r = ++this.state.pos
            for (;;) {
              if (this.state.pos >= this.length)
                throw this.raise(Xh.UnterminatedString, {
                  at: this.state.startLoc,
                })
              const n = this.input.charCodeAt(this.state.pos)
              if (n === e) break
              38 === n
                ? ((t += this.input.slice(r, this.state.pos)),
                  (t += this.jsxReadEntity()),
                  (r = this.state.pos))
                : lf(n)
                ? ((t += this.input.slice(r, this.state.pos)),
                  (t += this.jsxReadNewLine(!1)),
                  (r = this.state.pos))
                : ++this.state.pos
            }
            return (
              (t += this.input.slice(r, this.state.pos++)),
              this.finishToken(129, t)
            )
          }
          jsxReadEntity() {
            const e = ++this.state.pos
            if (35 === this.codePointAtPos(this.state.pos)) {
              ++this.state.pos
              let e = 10
              120 === this.codePointAtPos(this.state.pos) &&
                ((e = 16), ++this.state.pos)
              const t = this.readInt(e, void 0, !1, 'bail')
              if (null !== t && 59 === this.codePointAtPos(this.state.pos))
                return ++this.state.pos, String.fromCodePoint(t)
            } else {
              let t = 0,
                r = !1
              for (
                ;
                t++ < 10 &&
                this.state.pos < this.length &&
                !(r = 59 == this.codePointAtPos(this.state.pos));

              )
                ++this.state.pos
              if (r) {
                const t = this.input.slice(e, this.state.pos),
                  r = Hf[t]
                if ((++this.state.pos, r)) return r
              }
            }
            return (this.state.pos = e), '&'
          }
          jsxReadWord() {
            let e
            const t = this.state.pos
            do {
              e = this.input.charCodeAt(++this.state.pos)
            } while (Ld(e) || 45 === e)
            return this.finishToken(136, this.input.slice(t, this.state.pos))
          }
          jsxParseIdentifier() {
            const e = this.startNode()
            return (
              this.match(136)
                ? (e.name = this.state.value)
                : Td(this.state.type)
                ? (e.name = Cd(this.state.type))
                : this.unexpected(),
              this.next(),
              this.finishNode(e, 'JSXIdentifier')
            )
          }
          jsxParseNamespacedName() {
            const e = this.state.start,
              t = this.state.startLoc,
              r = this.jsxParseIdentifier()
            if (!this.eat(14)) return r
            const n = this.startNodeAt(e, t)
            return (
              (n.namespace = r),
              (n.name = this.jsxParseIdentifier()),
              this.finishNode(n, 'JSXNamespacedName')
            )
          }
          jsxParseElementName() {
            const e = this.state.start,
              t = this.state.startLoc
            let r = this.jsxParseNamespacedName()
            if ('JSXNamespacedName' === r.type) return r
            for (; this.eat(16); ) {
              const n = this.startNodeAt(e, t)
              ;(n.object = r),
                (n.property = this.jsxParseIdentifier()),
                (r = this.finishNode(n, 'JSXMemberExpression'))
            }
            return r
          }
          jsxParseAttributeValue() {
            let e
            switch (this.state.type) {
              case 5:
                return (
                  (e = this.startNode()),
                  this.setContext(ed.brace),
                  this.next(),
                  (e = this.jsxParseExpressionContainer(e, ed.j_oTag)),
                  'JSXEmptyExpression' === e.expression.type &&
                    this.raise(Vf.AttributeIsEmpty, { at: e }),
                  e
                )
              case 138:
              case 129:
                return this.parseExprAtom()
              default:
                throw this.raise(Vf.UnsupportedJsxValue, {
                  at: this.state.startLoc,
                })
            }
          }
          jsxParseEmptyExpression() {
            const e = this.startNodeAt(
              this.state.lastTokEndLoc.index,
              this.state.lastTokEndLoc
            )
            return this.finishNodeAt(
              e,
              'JSXEmptyExpression',
              this.state.startLoc
            )
          }
          jsxParseSpreadChild(e) {
            return (
              this.next(),
              (e.expression = this.parseExpression()),
              this.setContext(ed.j_oTag),
              this.expect(8),
              this.finishNode(e, 'JSXSpreadChild')
            )
          }
          jsxParseExpressionContainer(e, t) {
            if (this.match(8)) e.expression = this.jsxParseEmptyExpression()
            else {
              const t = this.parseExpression()
              e.expression = t
            }
            return (
              this.setContext(t),
              this.expect(8),
              this.finishNode(e, 'JSXExpressionContainer')
            )
          }
          jsxParseAttribute() {
            const e = this.startNode()
            return this.match(5)
              ? (this.setContext(ed.brace),
                this.next(),
                this.expect(21),
                (e.argument = this.parseMaybeAssignAllowIn()),
                this.setContext(ed.j_oTag),
                this.expect(8),
                this.finishNode(e, 'JSXSpreadAttribute'))
              : ((e.name = this.jsxParseNamespacedName()),
                (e.value = this.eat(29) ? this.jsxParseAttributeValue() : null),
                this.finishNode(e, 'JSXAttribute'))
          }
          jsxParseOpeningElementAt(e, t) {
            const r = this.startNodeAt(e, t)
            return this.match(139)
              ? (this.expect(139), this.finishNode(r, 'JSXOpeningFragment'))
              : ((r.name = this.jsxParseElementName()),
                this.jsxParseOpeningElementAfterName(r))
          }
          jsxParseOpeningElementAfterName(e) {
            const t = []
            for (; !this.match(56) && !this.match(139); )
              t.push(this.jsxParseAttribute())
            return (
              (e.attributes = t),
              (e.selfClosing = this.eat(56)),
              this.expect(139),
              this.finishNode(e, 'JSXOpeningElement')
            )
          }
          jsxParseClosingElementAt(e, t) {
            const r = this.startNodeAt(e, t)
            return this.match(139)
              ? (this.expect(139), this.finishNode(r, 'JSXClosingFragment'))
              : ((r.name = this.jsxParseElementName()),
                this.expect(139),
                this.finishNode(r, 'JSXClosingElement'))
          }
          jsxParseElementAt(e, t) {
            const r = this.startNodeAt(e, t),
              n = [],
              i = this.jsxParseOpeningElementAt(e, t)
            let a = null
            if (!i.selfClosing) {
              e: for (;;)
                switch (this.state.type) {
                  case 138:
                    if (
                      ((e = this.state.start),
                      (t = this.state.startLoc),
                      this.next(),
                      this.eat(56))
                    ) {
                      a = this.jsxParseClosingElementAt(e, t)
                      break e
                    }
                    n.push(this.jsxParseElementAt(e, t))
                    break
                  case 137:
                    n.push(this.parseExprAtom())
                    break
                  case 5: {
                    const e = this.startNode()
                    this.setContext(ed.brace),
                      this.next(),
                      this.match(21)
                        ? n.push(this.jsxParseSpreadChild(e))
                        : n.push(this.jsxParseExpressionContainer(e, ed.j_expr))
                    break
                  }
                  default:
                    throw this.unexpected()
                }
              $f(i) && !$f(a) && null !== a
                ? this.raise(Vf.MissingClosingTagFragment, { at: a })
                : !$f(i) && $f(a)
                ? this.raise(Vf.MissingClosingTagElement, {
                    at: a,
                    openingTagName: qf(i.name),
                  })
                : $f(i) ||
                  $f(a) ||
                  (qf(a.name) !== qf(i.name) &&
                    this.raise(Vf.MissingClosingTagElement, {
                      at: a,
                      openingTagName: qf(i.name),
                    }))
            }
            if (
              ($f(i)
                ? ((r.openingFragment = i), (r.closingFragment = a))
                : ((r.openingElement = i), (r.closingElement = a)),
              (r.children = n),
              this.match(47))
            )
              throw this.raise(Vf.UnwrappedAdjacentJSXElements, {
                at: this.state.startLoc,
              })
            return $f(i)
              ? this.finishNode(r, 'JSXFragment')
              : this.finishNode(r, 'JSXElement')
          }
          jsxParseElement() {
            const e = this.state.start,
              t = this.state.startLoc
            return this.next(), this.jsxParseElementAt(e, t)
          }
          setContext(e) {
            const { context: t } = this.state
            t[t.length - 1] = e
          }
          parseExprAtom(e) {
            return this.match(137)
              ? this.parseLiteral(this.state.value, 'JSXText')
              : this.match(138)
              ? this.jsxParseElement()
              : this.match(47) && 33 !== this.input.charCodeAt(this.state.pos)
              ? (this.replaceToken(138), this.jsxParseElement())
              : super.parseExprAtom(e)
          }
          skipSpace() {
            this.curContext().preserveSpace || super.skipSpace()
          }
          getTokenFromCode(e) {
            const t = this.curContext()
            if (t === ed.j_expr) return this.jsxReadToken()
            if (t === ed.j_oTag || t === ed.j_cTag) {
              if (Dd(e)) return this.jsxReadWord()
              if (62 === e) return ++this.state.pos, this.finishToken(139)
              if ((34 === e || 39 === e) && t === ed.j_oTag)
                return this.jsxReadString(e)
            }
            return 60 === e &&
              this.state.canStartJSXElement &&
              33 !== this.input.charCodeAt(this.state.pos + 1)
              ? (++this.state.pos, this.finishToken(138))
              : super.getTokenFromCode(e)
          }
          updateContext(e) {
            const { context: t, type: r } = this.state
            if (56 === r && 138 === e)
              t.splice(-2, 2, ed.j_cTag), (this.state.canStartJSXElement = !1)
            else if (138 === r) t.push(ed.j_oTag)
            else if (139 === r) {
              const r = t[t.length - 1]
              ;(r === ed.j_oTag && 56 === e) || r === ed.j_cTag
                ? (t.pop(),
                  (this.state.canStartJSXElement =
                    t[t.length - 1] === ed.j_expr))
                : (this.setContext(ed.j_expr),
                  (this.state.canStartJSXElement = !0))
            } else this.state.canStartJSXElement = fd[r]
          }
        },
      flow: (e) =>
        class extends e {
          constructor(...e) {
            super(...e), (this.flowPragma = void 0)
          }
          getScopeHandler() {
            return Pf
          }
          shouldParseTypes() {
            return (
              this.getPluginOption('flow', 'all') || 'flow' === this.flowPragma
            )
          }
          shouldParseEnums() {
            return !!this.getPluginOption('flow', 'enums')
          }
          finishToken(e, t) {
            return (
              129 !== e &&
                13 !== e &&
                28 !== e &&
                void 0 === this.flowPragma &&
                (this.flowPragma = null),
              super.finishToken(e, t)
            )
          }
          addComment(e) {
            if (void 0 === this.flowPragma) {
              const t = Wf.exec(e.value)
              if (t)
                if ('flow' === t[1]) this.flowPragma = 'flow'
                else {
                  if ('noflow' !== t[1])
                    throw new Error('Unexpected flow pragma')
                  this.flowPragma = 'noflow'
                }
              else;
            }
            return super.addComment(e)
          }
          flowParseTypeInitialiser(e) {
            const t = this.state.inType
            ;(this.state.inType = !0), this.expect(e || 14)
            const r = this.flowParseType()
            return (this.state.inType = t), r
          }
          flowParsePredicate() {
            const e = this.startNode(),
              t = this.state.startLoc
            return (
              this.next(),
              this.expectContextual(107),
              this.state.lastTokStart > t.index + 1 &&
                this.raise(Lf.UnexpectedSpaceBetweenModuloChecks, { at: t }),
              this.eat(10)
                ? ((e.value = this.parseExpression()),
                  this.expect(11),
                  this.finishNode(e, 'DeclaredPredicate'))
                : this.finishNode(e, 'InferredPredicate')
            )
          }
          flowParseTypeAndPredicateInitialiser() {
            const e = this.state.inType
            ;(this.state.inType = !0), this.expect(14)
            let t = null,
              r = null
            return (
              this.match(54)
                ? ((this.state.inType = e), (r = this.flowParsePredicate()))
                : ((t = this.flowParseType()),
                  (this.state.inType = e),
                  this.match(54) && (r = this.flowParsePredicate())),
              [t, r]
            )
          }
          flowParseDeclareClass(e) {
            return (
              this.next(),
              this.flowParseInterfaceish(e, !0),
              this.finishNode(e, 'DeclareClass')
            )
          }
          flowParseDeclareFunction(e) {
            this.next()
            const t = (e.id = this.parseIdentifier()),
              r = this.startNode(),
              n = this.startNode()
            this.match(47)
              ? (r.typeParameters = this.flowParseTypeParameterDeclaration())
              : (r.typeParameters = null),
              this.expect(10)
            const i = this.flowParseFunctionTypeParams()
            return (
              (r.params = i.params),
              (r.rest = i.rest),
              (r.this = i._this),
              this.expect(11),
              ([r.returnType, e.predicate] =
                this.flowParseTypeAndPredicateInitialiser()),
              (n.typeAnnotation = this.finishNode(r, 'FunctionTypeAnnotation')),
              (t.typeAnnotation = this.finishNode(n, 'TypeAnnotation')),
              this.resetEndLocation(t),
              this.semicolon(),
              this.scope.declareName(e.id.name, 2048, e.id.loc.start),
              this.finishNode(e, 'DeclareFunction')
            )
          }
          flowParseDeclare(e, t) {
            if (this.match(80)) return this.flowParseDeclareClass(e)
            if (this.match(68)) return this.flowParseDeclareFunction(e)
            if (this.match(74)) return this.flowParseDeclareVariable(e)
            if (this.eatContextual(123))
              return this.match(16)
                ? this.flowParseDeclareModuleExports(e)
                : (t &&
                    this.raise(Lf.NestedDeclareModule, {
                      at: this.state.lastTokStartLoc,
                    }),
                  this.flowParseDeclareModule(e))
            if (this.isContextual(126)) return this.flowParseDeclareTypeAlias(e)
            if (this.isContextual(127))
              return this.flowParseDeclareOpaqueType(e)
            if (this.isContextual(125)) return this.flowParseDeclareInterface(e)
            if (this.match(82))
              return this.flowParseDeclareExportDeclaration(e, t)
            throw this.unexpected()
          }
          flowParseDeclareVariable(e) {
            return (
              this.next(),
              (e.id = this.flowParseTypeAnnotatableIdentifier(!0)),
              this.scope.declareName(e.id.name, 5, e.id.loc.start),
              this.semicolon(),
              this.finishNode(e, 'DeclareVariable')
            )
          }
          flowParseDeclareModule(e) {
            this.scope.enter(0),
              this.match(129)
                ? (e.id = this.parseExprAtom())
                : (e.id = this.parseIdentifier())
            const t = (e.body = this.startNode()),
              r = (t.body = [])
            for (this.expect(5); !this.match(8); ) {
              let e = this.startNode()
              this.match(83)
                ? (this.next(),
                  this.isContextual(126) ||
                    this.match(87) ||
                    this.raise(Lf.InvalidNonTypeImportInDeclareModule, {
                      at: this.state.lastTokStartLoc,
                    }),
                  this.parseImport(e))
                : (this.expectContextual(
                    121,
                    Lf.UnsupportedStatementInDeclareModule
                  ),
                  (e = this.flowParseDeclare(e, !0))),
                r.push(e)
            }
            this.scope.exit(),
              this.expect(8),
              this.finishNode(t, 'BlockStatement')
            let n = null,
              i = !1
            return (
              r.forEach((e) => {
                !(function (e) {
                  return (
                    'DeclareExportAllDeclaration' === e.type ||
                    ('DeclareExportDeclaration' === e.type &&
                      (!e.declaration ||
                        ('TypeAlias' !== e.declaration.type &&
                          'InterfaceDeclaration' !== e.declaration.type)))
                  )
                })(e)
                  ? 'DeclareModuleExports' === e.type &&
                    (i &&
                      this.raise(Lf.DuplicateDeclareModuleExports, { at: e }),
                    'ES' === n &&
                      this.raise(Lf.AmbiguousDeclareModuleKind, { at: e }),
                    (n = 'CommonJS'),
                    (i = !0))
                  : ('CommonJS' === n &&
                      this.raise(Lf.AmbiguousDeclareModuleKind, { at: e }),
                    (n = 'ES'))
              }),
              (e.kind = n || 'CommonJS'),
              this.finishNode(e, 'DeclareModule')
            )
          }
          flowParseDeclareExportDeclaration(e, t) {
            if ((this.expect(82), this.eat(65)))
              return (
                this.match(68) || this.match(80)
                  ? (e.declaration = this.flowParseDeclare(this.startNode()))
                  : ((e.declaration = this.flowParseType()), this.semicolon()),
                (e.default = !0),
                this.finishNode(e, 'DeclareExportDeclaration')
              )
            if (
              this.match(75) ||
              this.isLet() ||
              ((this.isContextual(126) || this.isContextual(125)) && !t)
            ) {
              const e = this.state.value
              throw this.raise(Lf.UnsupportedDeclareExportKind, {
                at: this.state.startLoc,
                unsupportedExportKind: e,
                suggestion: Uf[e],
              })
            }
            if (
              this.match(74) ||
              this.match(68) ||
              this.match(80) ||
              this.isContextual(127)
            )
              return (
                (e.declaration = this.flowParseDeclare(this.startNode())),
                (e.default = !1),
                this.finishNode(e, 'DeclareExportDeclaration')
              )
            if (
              this.match(55) ||
              this.match(5) ||
              this.isContextual(125) ||
              this.isContextual(126) ||
              this.isContextual(127)
            )
              return (
                'ExportNamedDeclaration' === (e = this.parseExport(e)).type &&
                  ((e.type = 'ExportDeclaration'),
                  (e.default = !1),
                  delete e.exportKind),
                (e.type = 'Declare' + e.type),
                e
              )
            throw this.unexpected()
          }
          flowParseDeclareModuleExports(e) {
            return (
              this.next(),
              this.expectContextual(108),
              (e.typeAnnotation = this.flowParseTypeAnnotation()),
              this.semicolon(),
              this.finishNode(e, 'DeclareModuleExports')
            )
          }
          flowParseDeclareTypeAlias(e) {
            return (
              this.next(),
              this.flowParseTypeAlias(e),
              (e.type = 'DeclareTypeAlias'),
              e
            )
          }
          flowParseDeclareOpaqueType(e) {
            return (
              this.next(),
              this.flowParseOpaqueType(e, !0),
              (e.type = 'DeclareOpaqueType'),
              e
            )
          }
          flowParseDeclareInterface(e) {
            return (
              this.next(),
              this.flowParseInterfaceish(e),
              this.finishNode(e, 'DeclareInterface')
            )
          }
          flowParseInterfaceish(e, t = !1) {
            if (
              ((e.id = this.flowParseRestrictedIdentifier(!t, !0)),
              this.scope.declareName(e.id.name, t ? 17 : 9, e.id.loc.start),
              this.match(47)
                ? (e.typeParameters = this.flowParseTypeParameterDeclaration())
                : (e.typeParameters = null),
              (e.extends = []),
              (e.implements = []),
              (e.mixins = []),
              this.eat(81))
            )
              do {
                e.extends.push(this.flowParseInterfaceExtends())
              } while (!t && this.eat(12))
            if (this.isContextual(114)) {
              this.next()
              do {
                e.mixins.push(this.flowParseInterfaceExtends())
              } while (this.eat(12))
            }
            if (this.isContextual(110)) {
              this.next()
              do {
                e.implements.push(this.flowParseInterfaceExtends())
              } while (this.eat(12))
            }
            e.body = this.flowParseObjectType({
              allowStatic: t,
              allowExact: !1,
              allowSpread: !1,
              allowProto: t,
              allowInexact: !1,
            })
          }
          flowParseInterfaceExtends() {
            const e = this.startNode()
            return (
              (e.id = this.flowParseQualifiedTypeIdentifier()),
              this.match(47)
                ? (e.typeParameters =
                    this.flowParseTypeParameterInstantiation())
                : (e.typeParameters = null),
              this.finishNode(e, 'InterfaceExtends')
            )
          }
          flowParseInterface(e) {
            return (
              this.flowParseInterfaceish(e),
              this.finishNode(e, 'InterfaceDeclaration')
            )
          }
          checkNotUnderscore(e) {
            '_' === e &&
              this.raise(Lf.UnexpectedReservedUnderscore, {
                at: this.state.startLoc,
              })
          }
          checkReservedType(e, t, r) {
            Df.has(e) &&
              this.raise(
                r ? Lf.AssignReservedType : Lf.UnexpectedReservedType,
                { at: t, reservedType: e }
              )
          }
          flowParseRestrictedIdentifier(e, t) {
            return (
              this.checkReservedType(this.state.value, this.state.startLoc, t),
              this.parseIdentifier(e)
            )
          }
          flowParseTypeAlias(e) {
            return (
              (e.id = this.flowParseRestrictedIdentifier(!1, !0)),
              this.scope.declareName(e.id.name, 9, e.id.loc.start),
              this.match(47)
                ? (e.typeParameters = this.flowParseTypeParameterDeclaration())
                : (e.typeParameters = null),
              (e.right = this.flowParseTypeInitialiser(29)),
              this.semicolon(),
              this.finishNode(e, 'TypeAlias')
            )
          }
          flowParseOpaqueType(e, t) {
            return (
              this.expectContextual(126),
              (e.id = this.flowParseRestrictedIdentifier(!0, !0)),
              this.scope.declareName(e.id.name, 9, e.id.loc.start),
              this.match(47)
                ? (e.typeParameters = this.flowParseTypeParameterDeclaration())
                : (e.typeParameters = null),
              (e.supertype = null),
              this.match(14) &&
                (e.supertype = this.flowParseTypeInitialiser(14)),
              (e.impltype = null),
              t || (e.impltype = this.flowParseTypeInitialiser(29)),
              this.semicolon(),
              this.finishNode(e, 'OpaqueType')
            )
          }
          flowParseTypeParameter(e = !1) {
            const t = this.state.startLoc,
              r = this.startNode(),
              n = this.flowParseVariance(),
              i = this.flowParseTypeAnnotatableIdentifier()
            return (
              (r.name = i.name),
              (r.variance = n),
              (r.bound = i.typeAnnotation),
              this.match(29)
                ? (this.eat(29), (r.default = this.flowParseType()))
                : e && this.raise(Lf.MissingTypeParamDefault, { at: t }),
              this.finishNode(r, 'TypeParameter')
            )
          }
          flowParseTypeParameterDeclaration() {
            const e = this.state.inType,
              t = this.startNode()
            ;(t.params = []),
              (this.state.inType = !0),
              this.match(47) || this.match(138)
                ? this.next()
                : this.unexpected()
            let r = !1
            do {
              const e = this.flowParseTypeParameter(r)
              t.params.push(e),
                e.default && (r = !0),
                this.match(48) || this.expect(12)
            } while (!this.match(48))
            return (
              this.expect(48),
              (this.state.inType = e),
              this.finishNode(t, 'TypeParameterDeclaration')
            )
          }
          flowParseTypeParameterInstantiation() {
            const e = this.startNode(),
              t = this.state.inType
            ;(e.params = []), (this.state.inType = !0), this.expect(47)
            const r = this.state.noAnonFunctionType
            for (this.state.noAnonFunctionType = !1; !this.match(48); )
              e.params.push(this.flowParseType()),
                this.match(48) || this.expect(12)
            return (
              (this.state.noAnonFunctionType = r),
              this.expect(48),
              (this.state.inType = t),
              this.finishNode(e, 'TypeParameterInstantiation')
            )
          }
          flowParseTypeParameterInstantiationCallOrNew() {
            const e = this.startNode(),
              t = this.state.inType
            for (
              e.params = [], this.state.inType = !0, this.expect(47);
              !this.match(48);

            )
              e.params.push(this.flowParseTypeOrImplicitInstantiation()),
                this.match(48) || this.expect(12)
            return (
              this.expect(48),
              (this.state.inType = t),
              this.finishNode(e, 'TypeParameterInstantiation')
            )
          }
          flowParseInterfaceType() {
            const e = this.startNode()
            if ((this.expectContextual(125), (e.extends = []), this.eat(81)))
              do {
                e.extends.push(this.flowParseInterfaceExtends())
              } while (this.eat(12))
            return (
              (e.body = this.flowParseObjectType({
                allowStatic: !1,
                allowExact: !1,
                allowSpread: !1,
                allowProto: !1,
                allowInexact: !1,
              })),
              this.finishNode(e, 'InterfaceTypeAnnotation')
            )
          }
          flowParseObjectPropertyKey() {
            return this.match(130) || this.match(129)
              ? this.parseExprAtom()
              : this.parseIdentifier(!0)
          }
          flowParseObjectTypeIndexer(e, t, r) {
            return (
              (e.static = t),
              14 === this.lookahead().type
                ? ((e.id = this.flowParseObjectPropertyKey()),
                  (e.key = this.flowParseTypeInitialiser()))
                : ((e.id = null), (e.key = this.flowParseType())),
              this.expect(3),
              (e.value = this.flowParseTypeInitialiser()),
              (e.variance = r),
              this.finishNode(e, 'ObjectTypeIndexer')
            )
          }
          flowParseObjectTypeInternalSlot(e, t) {
            return (
              (e.static = t),
              (e.id = this.flowParseObjectPropertyKey()),
              this.expect(3),
              this.expect(3),
              this.match(47) || this.match(10)
                ? ((e.method = !0),
                  (e.optional = !1),
                  (e.value = this.flowParseObjectTypeMethodish(
                    this.startNodeAt(e.start, e.loc.start)
                  )))
                : ((e.method = !1),
                  this.eat(17) && (e.optional = !0),
                  (e.value = this.flowParseTypeInitialiser())),
              this.finishNode(e, 'ObjectTypeInternalSlot')
            )
          }
          flowParseObjectTypeMethodish(e) {
            for (
              e.params = [],
                e.rest = null,
                e.typeParameters = null,
                e.this = null,
                this.match(47) &&
                  (e.typeParameters = this.flowParseTypeParameterDeclaration()),
                this.expect(10),
                this.match(78) &&
                  ((e.this = this.flowParseFunctionTypeParam(!0)),
                  (e.this.name = null),
                  this.match(11) || this.expect(12));
              !this.match(11) && !this.match(21);

            )
              e.params.push(this.flowParseFunctionTypeParam(!1)),
                this.match(11) || this.expect(12)
            return (
              this.eat(21) && (e.rest = this.flowParseFunctionTypeParam(!1)),
              this.expect(11),
              (e.returnType = this.flowParseTypeInitialiser()),
              this.finishNode(e, 'FunctionTypeAnnotation')
            )
          }
          flowParseObjectTypeCallProperty(e, t) {
            const r = this.startNode()
            return (
              (e.static = t),
              (e.value = this.flowParseObjectTypeMethodish(r)),
              this.finishNode(e, 'ObjectTypeCallProperty')
            )
          }
          flowParseObjectType({
            allowStatic: e,
            allowExact: t,
            allowSpread: r,
            allowProto: n,
            allowInexact: i,
          }) {
            const a = this.state.inType
            this.state.inType = !0
            const s = this.startNode()
            let o, l
            ;(s.callProperties = []),
              (s.properties = []),
              (s.indexers = []),
              (s.internalSlots = [])
            let c = !1
            for (
              t && this.match(6)
                ? (this.expect(6), (o = 9), (l = !0))
                : (this.expect(5), (o = 8), (l = !1)),
                s.exact = l;
              !this.match(o);

            ) {
              let t = !1,
                a = null,
                o = null
              const u = this.startNode()
              if (n && this.isContextual(115)) {
                const t = this.lookahead()
                14 !== t.type &&
                  17 !== t.type &&
                  (this.next(), (a = this.state.startLoc), (e = !1))
              }
              if (e && this.isContextual(104)) {
                const e = this.lookahead()
                14 !== e.type && 17 !== e.type && (this.next(), (t = !0))
              }
              const p = this.flowParseVariance()
              if (this.eat(0))
                null != a && this.unexpected(a),
                  this.eat(0)
                    ? (p && this.unexpected(p.loc.start),
                      s.internalSlots.push(
                        this.flowParseObjectTypeInternalSlot(u, t)
                      ))
                    : s.indexers.push(this.flowParseObjectTypeIndexer(u, t, p))
              else if (this.match(10) || this.match(47))
                null != a && this.unexpected(a),
                  p && this.unexpected(p.loc.start),
                  s.callProperties.push(
                    this.flowParseObjectTypeCallProperty(u, t)
                  )
              else {
                let e = 'init'
                if (this.isContextual(98) || this.isContextual(103)) {
                  Ed(this.lookahead().type) &&
                    ((e = this.state.value), this.next())
                }
                const n = this.flowParseObjectTypeProperty(
                  u,
                  t,
                  a,
                  p,
                  e,
                  r,
                  null != i ? i : !l
                )
                null === n
                  ? ((c = !0), (o = this.state.lastTokStartLoc))
                  : s.properties.push(n)
              }
              this.flowObjectTypeSemicolon(),
                !o ||
                  this.match(8) ||
                  this.match(9) ||
                  this.raise(Lf.UnexpectedExplicitInexactInObject, { at: o })
            }
            this.expect(o), r && (s.inexact = c)
            const u = this.finishNode(s, 'ObjectTypeAnnotation')
            return (this.state.inType = a), u
          }
          flowParseObjectTypeProperty(e, t, r, n, i, a, s) {
            if (this.eat(21)) {
              return this.match(12) ||
                this.match(13) ||
                this.match(8) ||
                this.match(9)
                ? (a
                    ? s ||
                      this.raise(Lf.InexactInsideExact, {
                        at: this.state.lastTokStartLoc,
                      })
                    : this.raise(Lf.InexactInsideNonObject, {
                        at: this.state.lastTokStartLoc,
                      }),
                  n && this.raise(Lf.InexactVariance, { at: n }),
                  null)
                : (a ||
                    this.raise(Lf.UnexpectedSpreadType, {
                      at: this.state.lastTokStartLoc,
                    }),
                  null != r && this.unexpected(r),
                  n && this.raise(Lf.SpreadVariance, { at: n }),
                  (e.argument = this.flowParseType()),
                  this.finishNode(e, 'ObjectTypeSpreadProperty'))
            }
            {
              ;(e.key = this.flowParseObjectPropertyKey()),
                (e.static = t),
                (e.proto = null != r),
                (e.kind = i)
              let s = !1
              return (
                this.match(47) || this.match(10)
                  ? ((e.method = !0),
                    null != r && this.unexpected(r),
                    n && this.unexpected(n.loc.start),
                    (e.value = this.flowParseObjectTypeMethodish(
                      this.startNodeAt(e.start, e.loc.start)
                    )),
                    ('get' !== i && 'set' !== i) ||
                      this.flowCheckGetterSetterParams(e),
                    !a &&
                      'constructor' === e.key.name &&
                      e.value.this &&
                      this.raise(Lf.ThisParamBannedInConstructor, {
                        at: e.value.this,
                      }))
                  : ('init' !== i && this.unexpected(),
                    (e.method = !1),
                    this.eat(17) && (s = !0),
                    (e.value = this.flowParseTypeInitialiser()),
                    (e.variance = n)),
                (e.optional = s),
                this.finishNode(e, 'ObjectTypeProperty')
              )
            }
          }
          flowCheckGetterSetterParams(e) {
            const t = 'get' === e.kind ? 0 : 1,
              r = e.value.params.length + (e.value.rest ? 1 : 0)
            e.value.this &&
              this.raise(
                'get' === e.kind
                  ? Lf.GetterMayNotHaveThisParam
                  : Lf.SetterMayNotHaveThisParam,
                { at: e.value.this }
              ),
              r !== t &&
                this.raise(
                  'get' === e.kind ? Xh.BadGetterArity : Xh.BadSetterArity,
                  { at: e }
                ),
              'set' === e.kind &&
                e.value.rest &&
                this.raise(Xh.BadSetterRestParameter, { at: e })
          }
          flowObjectTypeSemicolon() {
            this.eat(13) ||
              this.eat(12) ||
              this.match(8) ||
              this.match(9) ||
              this.unexpected()
          }
          flowParseQualifiedTypeIdentifier(e, t, r) {
            ;(e = e || this.state.start), (t = t || this.state.startLoc)
            let n = r || this.flowParseRestrictedIdentifier(!0)
            for (; this.eat(16); ) {
              const r = this.startNodeAt(e, t)
              ;(r.qualification = n),
                (r.id = this.flowParseRestrictedIdentifier(!0)),
                (n = this.finishNode(r, 'QualifiedTypeIdentifier'))
            }
            return n
          }
          flowParseGenericType(e, t, r) {
            const n = this.startNodeAt(e, t)
            return (
              (n.typeParameters = null),
              (n.id = this.flowParseQualifiedTypeIdentifier(e, t, r)),
              this.match(47) &&
                (n.typeParameters = this.flowParseTypeParameterInstantiation()),
              this.finishNode(n, 'GenericTypeAnnotation')
            )
          }
          flowParseTypeofType() {
            const e = this.startNode()
            return (
              this.expect(87),
              (e.argument = this.flowParsePrimaryType()),
              this.finishNode(e, 'TypeofTypeAnnotation')
            )
          }
          flowParseTupleType() {
            const e = this.startNode()
            for (
              e.types = [], this.expect(0);
              this.state.pos < this.length &&
              !this.match(3) &&
              (e.types.push(this.flowParseType()), !this.match(3));

            )
              this.expect(12)
            return this.expect(3), this.finishNode(e, 'TupleTypeAnnotation')
          }
          flowParseFunctionTypeParam(e) {
            let t = null,
              r = !1,
              n = null
            const i = this.startNode(),
              a = this.lookahead(),
              s = 78 === this.state.type
            return (
              14 === a.type || 17 === a.type
                ? (s && !e && this.raise(Lf.ThisParamMustBeFirst, { at: i }),
                  (t = this.parseIdentifier(s)),
                  this.eat(17) &&
                    ((r = !0),
                    s && this.raise(Lf.ThisParamMayNotBeOptional, { at: i })),
                  (n = this.flowParseTypeInitialiser()))
                : (n = this.flowParseType()),
              (i.name = t),
              (i.optional = r),
              (i.typeAnnotation = n),
              this.finishNode(i, 'FunctionTypeParam')
            )
          }
          reinterpretTypeAsFunctionTypeParam(e) {
            const t = this.startNodeAt(e.start, e.loc.start)
            return (
              (t.name = null),
              (t.optional = !1),
              (t.typeAnnotation = e),
              this.finishNode(t, 'FunctionTypeParam')
            )
          }
          flowParseFunctionTypeParams(e = []) {
            let t = null,
              r = null
            for (
              this.match(78) &&
              ((r = this.flowParseFunctionTypeParam(!0)),
              (r.name = null),
              this.match(11) || this.expect(12));
              !this.match(11) && !this.match(21);

            )
              e.push(this.flowParseFunctionTypeParam(!1)),
                this.match(11) || this.expect(12)
            return (
              this.eat(21) && (t = this.flowParseFunctionTypeParam(!1)),
              { params: e, rest: t, _this: r }
            )
          }
          flowIdentToTypeAnnotation(e, t, r, n) {
            switch (n.name) {
              case 'any':
                return this.finishNode(r, 'AnyTypeAnnotation')
              case 'bool':
              case 'boolean':
                return this.finishNode(r, 'BooleanTypeAnnotation')
              case 'mixed':
                return this.finishNode(r, 'MixedTypeAnnotation')
              case 'empty':
                return this.finishNode(r, 'EmptyTypeAnnotation')
              case 'number':
                return this.finishNode(r, 'NumberTypeAnnotation')
              case 'string':
                return this.finishNode(r, 'StringTypeAnnotation')
              case 'symbol':
                return this.finishNode(r, 'SymbolTypeAnnotation')
              default:
                return (
                  this.checkNotUnderscore(n.name),
                  this.flowParseGenericType(e, t, n)
                )
            }
          }
          flowParsePrimaryType() {
            const e = this.state.start,
              t = this.state.startLoc,
              r = this.startNode()
            let n,
              i,
              a = !1
            const s = this.state.noAnonFunctionType
            switch (this.state.type) {
              case 5:
                return this.flowParseObjectType({
                  allowStatic: !1,
                  allowExact: !1,
                  allowSpread: !0,
                  allowProto: !1,
                  allowInexact: !0,
                })
              case 6:
                return this.flowParseObjectType({
                  allowStatic: !1,
                  allowExact: !0,
                  allowSpread: !0,
                  allowProto: !1,
                  allowInexact: !1,
                })
              case 0:
                return (
                  (this.state.noAnonFunctionType = !1),
                  (i = this.flowParseTupleType()),
                  (this.state.noAnonFunctionType = s),
                  i
                )
              case 47:
                return (
                  (r.typeParameters = this.flowParseTypeParameterDeclaration()),
                  this.expect(10),
                  (n = this.flowParseFunctionTypeParams()),
                  (r.params = n.params),
                  (r.rest = n.rest),
                  (r.this = n._this),
                  this.expect(11),
                  this.expect(19),
                  (r.returnType = this.flowParseType()),
                  this.finishNode(r, 'FunctionTypeAnnotation')
                )
              case 10:
                if ((this.next(), !this.match(11) && !this.match(21)))
                  if (xd(this.state.type) || this.match(78)) {
                    const e = this.lookahead().type
                    a = 17 !== e && 14 !== e
                  } else a = !0
                if (a) {
                  if (
                    ((this.state.noAnonFunctionType = !1),
                    (i = this.flowParseType()),
                    (this.state.noAnonFunctionType = s),
                    this.state.noAnonFunctionType ||
                      !(
                        this.match(12) ||
                        (this.match(11) && 19 === this.lookahead().type)
                      ))
                  )
                    return this.expect(11), i
                  this.eat(12)
                }
                return (
                  (n = i
                    ? this.flowParseFunctionTypeParams([
                        this.reinterpretTypeAsFunctionTypeParam(i),
                      ])
                    : this.flowParseFunctionTypeParams()),
                  (r.params = n.params),
                  (r.rest = n.rest),
                  (r.this = n._this),
                  this.expect(11),
                  this.expect(19),
                  (r.returnType = this.flowParseType()),
                  (r.typeParameters = null),
                  this.finishNode(r, 'FunctionTypeAnnotation')
                )
              case 129:
                return this.parseLiteral(
                  this.state.value,
                  'StringLiteralTypeAnnotation'
                )
              case 85:
              case 86:
                return (
                  (r.value = this.match(85)),
                  this.next(),
                  this.finishNode(r, 'BooleanLiteralTypeAnnotation')
                )
              case 53:
                if ('-' === this.state.value) {
                  if ((this.next(), this.match(130)))
                    return this.parseLiteralAtNode(
                      -this.state.value,
                      'NumberLiteralTypeAnnotation',
                      r
                    )
                  if (this.match(131))
                    return this.parseLiteralAtNode(
                      -this.state.value,
                      'BigIntLiteralTypeAnnotation',
                      r
                    )
                  throw this.raise(Lf.UnexpectedSubtractionOperand, {
                    at: this.state.startLoc,
                  })
                }
                throw this.unexpected()
              case 130:
                return this.parseLiteral(
                  this.state.value,
                  'NumberLiteralTypeAnnotation'
                )
              case 131:
                return this.parseLiteral(
                  this.state.value,
                  'BigIntLiteralTypeAnnotation'
                )
              case 88:
                return this.next(), this.finishNode(r, 'VoidTypeAnnotation')
              case 84:
                return (
                  this.next(), this.finishNode(r, 'NullLiteralTypeAnnotation')
                )
              case 78:
                return this.next(), this.finishNode(r, 'ThisTypeAnnotation')
              case 55:
                return this.next(), this.finishNode(r, 'ExistsTypeAnnotation')
              case 87:
                return this.flowParseTypeofType()
              default:
                if (Td(this.state.type)) {
                  const e = Cd(this.state.type)
                  return this.next(), super.createIdentifier(r, e)
                }
                if (xd(this.state.type))
                  return this.isContextual(125)
                    ? this.flowParseInterfaceType()
                    : this.flowIdentToTypeAnnotation(
                        e,
                        t,
                        r,
                        this.parseIdentifier()
                      )
            }
            throw this.unexpected()
          }
          flowParsePostfixType() {
            const e = this.state.start,
              t = this.state.startLoc
            let r = this.flowParsePrimaryType(),
              n = !1
            for (
              ;
              (this.match(0) || this.match(18)) && !this.canInsertSemicolon();

            ) {
              const i = this.startNodeAt(e, t),
                a = this.eat(18)
              ;(n = n || a),
                this.expect(0),
                !a && this.match(3)
                  ? ((i.elementType = r),
                    this.next(),
                    (r = this.finishNode(i, 'ArrayTypeAnnotation')))
                  : ((i.objectType = r),
                    (i.indexType = this.flowParseType()),
                    this.expect(3),
                    n
                      ? ((i.optional = a),
                        (r = this.finishNode(i, 'OptionalIndexedAccessType')))
                      : (r = this.finishNode(i, 'IndexedAccessType')))
            }
            return r
          }
          flowParsePrefixType() {
            const e = this.startNode()
            return this.eat(17)
              ? ((e.typeAnnotation = this.flowParsePrefixType()),
                this.finishNode(e, 'NullableTypeAnnotation'))
              : this.flowParsePostfixType()
          }
          flowParseAnonFunctionWithoutParens() {
            const e = this.flowParsePrefixType()
            if (!this.state.noAnonFunctionType && this.eat(19)) {
              const t = this.startNodeAt(e.start, e.loc.start)
              return (
                (t.params = [this.reinterpretTypeAsFunctionTypeParam(e)]),
                (t.rest = null),
                (t.this = null),
                (t.returnType = this.flowParseType()),
                (t.typeParameters = null),
                this.finishNode(t, 'FunctionTypeAnnotation')
              )
            }
            return e
          }
          flowParseIntersectionType() {
            const e = this.startNode()
            this.eat(45)
            const t = this.flowParseAnonFunctionWithoutParens()
            for (e.types = [t]; this.eat(45); )
              e.types.push(this.flowParseAnonFunctionWithoutParens())
            return 1 === e.types.length
              ? t
              : this.finishNode(e, 'IntersectionTypeAnnotation')
          }
          flowParseUnionType() {
            const e = this.startNode()
            this.eat(43)
            const t = this.flowParseIntersectionType()
            for (e.types = [t]; this.eat(43); )
              e.types.push(this.flowParseIntersectionType())
            return 1 === e.types.length
              ? t
              : this.finishNode(e, 'UnionTypeAnnotation')
          }
          flowParseType() {
            const e = this.state.inType
            this.state.inType = !0
            const t = this.flowParseUnionType()
            return (this.state.inType = e), t
          }
          flowParseTypeOrImplicitInstantiation() {
            if (128 === this.state.type && '_' === this.state.value) {
              const e = this.state.start,
                t = this.state.startLoc,
                r = this.parseIdentifier()
              return this.flowParseGenericType(e, t, r)
            }
            return this.flowParseType()
          }
          flowParseTypeAnnotation() {
            const e = this.startNode()
            return (
              (e.typeAnnotation = this.flowParseTypeInitialiser()),
              this.finishNode(e, 'TypeAnnotation')
            )
          }
          flowParseTypeAnnotatableIdentifier(e) {
            const t = e
              ? this.parseIdentifier()
              : this.flowParseRestrictedIdentifier()
            return (
              this.match(14) &&
                ((t.typeAnnotation = this.flowParseTypeAnnotation()),
                this.resetEndLocation(t)),
              t
            )
          }
          typeCastToParameter(e) {
            return (
              (e.expression.typeAnnotation = e.typeAnnotation),
              this.resetEndLocation(e.expression, e.typeAnnotation.loc.end),
              e.expression
            )
          }
          flowParseVariance() {
            let e = null
            return (
              this.match(53) &&
                ((e = this.startNode()),
                '+' === this.state.value
                  ? (e.kind = 'plus')
                  : (e.kind = 'minus'),
                this.next(),
                this.finishNode(e, 'Variance')),
              e
            )
          }
          parseFunctionBody(e, t, r = !1) {
            return t
              ? this.forwardNoArrowParamsConversionAt(e, () =>
                  super.parseFunctionBody(e, !0, r)
                )
              : super.parseFunctionBody(e, !1, r)
          }
          parseFunctionBodyAndFinish(e, t, r = !1) {
            if (this.match(14)) {
              const t = this.startNode()
              ;([t.typeAnnotation, e.predicate] =
                this.flowParseTypeAndPredicateInitialiser()),
                (e.returnType = t.typeAnnotation
                  ? this.finishNode(t, 'TypeAnnotation')
                  : null)
            }
            super.parseFunctionBodyAndFinish(e, t, r)
          }
          parseStatement(e, t) {
            if (this.state.strict && this.isContextual(125)) {
              if (wd(this.lookahead().type)) {
                const e = this.startNode()
                return this.next(), this.flowParseInterface(e)
              }
            } else if (this.shouldParseEnums() && this.isContextual(122)) {
              const e = this.startNode()
              return this.next(), this.flowParseEnumDeclaration(e)
            }
            const r = super.parseStatement(e, t)
            return (
              void 0 !== this.flowPragma ||
                this.isValidDirective(r) ||
                (this.flowPragma = null),
              r
            )
          }
          parseExpressionStatement(e, t) {
            if ('Identifier' === t.type)
              if ('declare' === t.name) {
                if (
                  this.match(80) ||
                  xd(this.state.type) ||
                  this.match(68) ||
                  this.match(74) ||
                  this.match(82)
                )
                  return this.flowParseDeclare(e)
              } else if (xd(this.state.type)) {
                if ('interface' === t.name) return this.flowParseInterface(e)
                if ('type' === t.name) return this.flowParseTypeAlias(e)
                if ('opaque' === t.name) return this.flowParseOpaqueType(e, !1)
              }
            return super.parseExpressionStatement(e, t)
          }
          shouldParseExportDeclaration() {
            const { type: e } = this.state
            return Sd(e) || (this.shouldParseEnums() && 122 === e)
              ? !this.state.containsEsc
              : super.shouldParseExportDeclaration()
          }
          isExportDefaultSpecifier() {
            const { type: e } = this.state
            return Sd(e) || (this.shouldParseEnums() && 122 === e)
              ? this.state.containsEsc
              : super.isExportDefaultSpecifier()
          }
          parseExportDefaultExpression() {
            if (this.shouldParseEnums() && this.isContextual(122)) {
              const e = this.startNode()
              return this.next(), this.flowParseEnumDeclaration(e)
            }
            return super.parseExportDefaultExpression()
          }
          parseConditional(e, t, r, n) {
            if (!this.match(17)) return e
            if (this.state.maybeInArrowParameters) {
              const t = this.lookaheadCharCode()
              if (44 === t || 61 === t || 58 === t || 41 === t)
                return this.setOptionalParametersError(n), e
            }
            this.expect(17)
            const i = this.state.clone(),
              a = this.state.noArrowAt,
              s = this.startNodeAt(t, r)
            let { consequent: o, failed: l } =
                this.tryParseConditionalConsequent(),
              [c, u] = this.getArrowLikeExpressions(o)
            if (l || u.length > 0) {
              const e = [...a]
              if (u.length > 0) {
                ;(this.state = i), (this.state.noArrowAt = e)
                for (let t = 0; t < u.length; t++) e.push(u[t].start)
                ;({ consequent: o, failed: l } =
                  this.tryParseConditionalConsequent()),
                  ([c, u] = this.getArrowLikeExpressions(o))
              }
              l &&
                c.length > 1 &&
                this.raise(Lf.AmbiguousConditionalArrow, { at: i.startLoc }),
                l &&
                  1 === c.length &&
                  ((this.state = i),
                  e.push(c[0].start),
                  (this.state.noArrowAt = e),
                  ({ consequent: o, failed: l } =
                    this.tryParseConditionalConsequent()))
            }
            return (
              this.getArrowLikeExpressions(o, !0),
              (this.state.noArrowAt = a),
              this.expect(14),
              (s.test = e),
              (s.consequent = o),
              (s.alternate = this.forwardNoArrowParamsConversionAt(s, () =>
                this.parseMaybeAssign(void 0, void 0)
              )),
              this.finishNode(s, 'ConditionalExpression')
            )
          }
          tryParseConditionalConsequent() {
            this.state.noArrowParamsConversionAt.push(this.state.start)
            const e = this.parseMaybeAssignAllowIn(),
              t = !this.match(14)
            return (
              this.state.noArrowParamsConversionAt.pop(),
              { consequent: e, failed: t }
            )
          }
          getArrowLikeExpressions(e, t) {
            const r = [e],
              n = []
            for (; 0 !== r.length; ) {
              const e = r.pop()
              'ArrowFunctionExpression' === e.type
                ? (e.typeParameters || !e.returnType
                    ? this.finishArrowValidation(e)
                    : n.push(e),
                  r.push(e.body))
                : 'ConditionalExpression' === e.type &&
                  (r.push(e.consequent), r.push(e.alternate))
            }
            return t
              ? (n.forEach((e) => this.finishArrowValidation(e)), [n, []])
              : (function (e, t) {
                  const r = [],
                    n = []
                  for (let i = 0; i < e.length; i++)
                    (t(e[i], i, e) ? r : n).push(e[i])
                  return [r, n]
                })(n, (e) => e.params.every((e) => this.isAssignable(e, !0)))
          }
          finishArrowValidation(e) {
            var t
            this.toAssignableList(
              e.params,
              null == (t = e.extra) ? void 0 : t.trailingCommaLoc,
              !1
            ),
              this.scope.enter(6),
              super.checkParams(e, !1, !0),
              this.scope.exit()
          }
          forwardNoArrowParamsConversionAt(e, t) {
            let r
            return (
              -1 !== this.state.noArrowParamsConversionAt.indexOf(e.start)
                ? (this.state.noArrowParamsConversionAt.push(this.state.start),
                  (r = t()),
                  this.state.noArrowParamsConversionAt.pop())
                : (r = t()),
              r
            )
          }
          parseParenItem(e, t, r) {
            if (
              ((e = super.parseParenItem(e, t, r)),
              this.eat(17) && ((e.optional = !0), this.resetEndLocation(e)),
              this.match(14))
            ) {
              const n = this.startNodeAt(t, r)
              return (
                (n.expression = e),
                (n.typeAnnotation = this.flowParseTypeAnnotation()),
                this.finishNode(n, 'TypeCastExpression')
              )
            }
            return e
          }
          assertModuleNodeAllowed(e) {
            ;('ImportDeclaration' === e.type &&
              ('type' === e.importKind || 'typeof' === e.importKind)) ||
              ('ExportNamedDeclaration' === e.type &&
                'type' === e.exportKind) ||
              ('ExportAllDeclaration' === e.type && 'type' === e.exportKind) ||
              super.assertModuleNodeAllowed(e)
          }
          parseExport(e) {
            const t = super.parseExport(e)
            return (
              ('ExportNamedDeclaration' !== t.type &&
                'ExportAllDeclaration' !== t.type) ||
                (t.exportKind = t.exportKind || 'value'),
              t
            )
          }
          parseExportDeclaration(e) {
            if (this.isContextual(126)) {
              e.exportKind = 'type'
              const t = this.startNode()
              return (
                this.next(),
                this.match(5)
                  ? ((e.specifiers = this.parseExportSpecifiers(!0)),
                    this.parseExportFrom(e),
                    null)
                  : this.flowParseTypeAlias(t)
              )
            }
            if (this.isContextual(127)) {
              e.exportKind = 'type'
              const t = this.startNode()
              return this.next(), this.flowParseOpaqueType(t, !1)
            }
            if (this.isContextual(125)) {
              e.exportKind = 'type'
              const t = this.startNode()
              return this.next(), this.flowParseInterface(t)
            }
            if (this.shouldParseEnums() && this.isContextual(122)) {
              e.exportKind = 'value'
              const t = this.startNode()
              return this.next(), this.flowParseEnumDeclaration(t)
            }
            return super.parseExportDeclaration(e)
          }
          eatExportStar(e) {
            return (
              !!super.eatExportStar(...arguments) ||
              (!(!this.isContextual(126) || 55 !== this.lookahead().type) &&
                ((e.exportKind = 'type'), this.next(), this.next(), !0))
            )
          }
          maybeParseExportNamespaceSpecifier(e) {
            const { startLoc: t } = this.state,
              r = super.maybeParseExportNamespaceSpecifier(e)
            return r && 'type' === e.exportKind && this.unexpected(t), r
          }
          parseClassId(e, t, r) {
            super.parseClassId(e, t, r),
              this.match(47) &&
                (e.typeParameters = this.flowParseTypeParameterDeclaration())
          }
          parseClassMember(e, t, r) {
            const { startLoc: n } = this.state
            if (this.isContextual(121)) {
              if (this.parseClassMemberFromModifier(e, t)) return
              t.declare = !0
            }
            super.parseClassMember(e, t, r),
              t.declare &&
                ('ClassProperty' !== t.type &&
                'ClassPrivateProperty' !== t.type &&
                'PropertyDefinition' !== t.type
                  ? this.raise(Lf.DeclareClassElement, { at: n })
                  : t.value &&
                    this.raise(Lf.DeclareClassFieldInitializer, {
                      at: t.value,
                    }))
          }
          isIterator(e) {
            return 'iterator' === e || 'asyncIterator' === e
          }
          readIterator() {
            const e = super.readWord1(),
              t = '@@' + e
            ;(this.isIterator(e) && this.state.inType) ||
              this.raise(Xh.InvalidIdentifier, {
                at: this.state.curPosition(),
                identifierName: t,
              }),
              this.finishToken(128, t)
          }
          getTokenFromCode(e) {
            const t = this.input.charCodeAt(this.state.pos + 1)
            return 123 === e && 124 === t
              ? this.finishOp(6, 2)
              : !this.state.inType || (62 !== e && 60 !== e)
              ? this.state.inType && 63 === e
                ? 46 === t
                  ? this.finishOp(18, 2)
                  : this.finishOp(17, 1)
                : (function (e, t, r) {
                    return 64 === e && 64 === t && Dd(r)
                  })(e, t, this.input.charCodeAt(this.state.pos + 2))
                ? ((this.state.pos += 2), this.readIterator())
                : super.getTokenFromCode(e)
              : this.finishOp(62 === e ? 48 : 47, 1)
          }
          isAssignable(e, t) {
            return 'TypeCastExpression' === e.type
              ? this.isAssignable(e.expression, t)
              : super.isAssignable(e, t)
          }
          toAssignable(e, t = !1) {
            return 'TypeCastExpression' === e.type
              ? super.toAssignable(this.typeCastToParameter(e), t)
              : super.toAssignable(e, t)
          }
          toAssignableList(e, t, r) {
            for (let t = 0; t < e.length; t++) {
              const r = e[t]
              'TypeCastExpression' === (null == r ? void 0 : r.type) &&
                (e[t] = this.typeCastToParameter(r))
            }
            return super.toAssignableList(e, t, r)
          }
          toReferencedList(e, t) {
            for (let n = 0; n < e.length; n++) {
              var r
              const i = e[n]
              !i ||
                'TypeCastExpression' !== i.type ||
                (null != (r = i.extra) && r.parenthesized) ||
                (!(e.length > 1) && t) ||
                this.raise(Lf.TypeCastInPattern, { at: i.typeAnnotation })
            }
            return e
          }
          parseArrayLike(e, t, r, n) {
            const i = super.parseArrayLike(e, t, r, n)
            return (
              t &&
                !this.state.maybeInArrowParameters &&
                this.toReferencedList(i.elements),
              i
            )
          }
          isValidLVal(e, ...t) {
            return 'TypeCastExpression' === e || super.isValidLVal(e, ...t)
          }
          parseClassProperty(e) {
            return (
              this.match(14) &&
                (e.typeAnnotation = this.flowParseTypeAnnotation()),
              super.parseClassProperty(e)
            )
          }
          parseClassPrivateProperty(e) {
            return (
              this.match(14) &&
                (e.typeAnnotation = this.flowParseTypeAnnotation()),
              super.parseClassPrivateProperty(e)
            )
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod()
          }
          isClassProperty() {
            return this.match(14) || super.isClassProperty()
          }
          isNonstaticConstructor(e) {
            return !this.match(14) && super.isNonstaticConstructor(e)
          }
          pushClassMethod(e, t, r, n, i, a) {
            if (
              (t.variance && this.unexpected(t.variance.loc.start),
              delete t.variance,
              this.match(47) &&
                (t.typeParameters = this.flowParseTypeParameterDeclaration()),
              super.pushClassMethod(e, t, r, n, i, a),
              t.params && i)
            ) {
              const e = t.params
              e.length > 0 &&
                this.isThisParam(e[0]) &&
                this.raise(Lf.ThisParamBannedInConstructor, { at: t })
            } else if ('MethodDefinition' === t.type && i && t.value.params) {
              const e = t.value.params
              e.length > 0 &&
                this.isThisParam(e[0]) &&
                this.raise(Lf.ThisParamBannedInConstructor, { at: t })
            }
          }
          pushClassPrivateMethod(e, t, r, n) {
            t.variance && this.unexpected(t.variance.loc.start),
              delete t.variance,
              this.match(47) &&
                (t.typeParameters = this.flowParseTypeParameterDeclaration()),
              super.pushClassPrivateMethod(e, t, r, n)
          }
          parseClassSuper(e) {
            if (
              (super.parseClassSuper(e),
              e.superClass &&
                this.match(47) &&
                (e.superTypeParameters =
                  this.flowParseTypeParameterInstantiation()),
              this.isContextual(110))
            ) {
              this.next()
              const t = (e.implements = [])
              do {
                const e = this.startNode()
                ;(e.id = this.flowParseRestrictedIdentifier(!0)),
                  this.match(47)
                    ? (e.typeParameters =
                        this.flowParseTypeParameterInstantiation())
                    : (e.typeParameters = null),
                  t.push(this.finishNode(e, 'ClassImplements'))
              } while (this.eat(12))
            }
          }
          checkGetterSetterParams(e) {
            super.checkGetterSetterParams(e)
            const t = this.getObjectOrClassMethodParams(e)
            if (t.length > 0) {
              const r = t[0]
              this.isThisParam(r) && 'get' === e.kind
                ? this.raise(Lf.GetterMayNotHaveThisParam, { at: r })
                : this.isThisParam(r) &&
                  this.raise(Lf.SetterMayNotHaveThisParam, { at: r })
            }
          }
          parsePropertyNamePrefixOperator(e) {
            e.variance = this.flowParseVariance()
          }
          parseObjPropValue(e, t, r, n, i, a, s, o) {
            let l
            e.variance && this.unexpected(e.variance.loc.start),
              delete e.variance,
              this.match(47) &&
                !s &&
                ((l = this.flowParseTypeParameterDeclaration()),
                this.match(10) || this.unexpected()),
              super.parseObjPropValue(e, t, r, n, i, a, s, o),
              l && ((e.value || e).typeParameters = l)
          }
          parseAssignableListItemTypes(e) {
            return (
              this.eat(17) &&
                ('Identifier' !== e.type &&
                  this.raise(Lf.PatternIsOptional, { at: e }),
                this.isThisParam(e) &&
                  this.raise(Lf.ThisParamMayNotBeOptional, { at: e }),
                (e.optional = !0)),
              this.match(14)
                ? (e.typeAnnotation = this.flowParseTypeAnnotation())
                : this.isThisParam(e) &&
                  this.raise(Lf.ThisParamAnnotationRequired, { at: e }),
              this.match(29) &&
                this.isThisParam(e) &&
                this.raise(Lf.ThisParamNoDefault, { at: e }),
              this.resetEndLocation(e),
              e
            )
          }
          parseMaybeDefault(e, t, r) {
            const n = super.parseMaybeDefault(e, t, r)
            return (
              'AssignmentPattern' === n.type &&
                n.typeAnnotation &&
                n.right.start < n.typeAnnotation.start &&
                this.raise(Lf.TypeBeforeInitializer, { at: n.typeAnnotation }),
              n
            )
          }
          shouldParseDefaultImport(e) {
            return Bf(e)
              ? zf(this.state.type)
              : super.shouldParseDefaultImport(e)
          }
          parseImportSpecifierLocal(e, t, r) {
            ;(t.local = Bf(e)
              ? this.flowParseRestrictedIdentifier(!0, !0)
              : this.parseIdentifier()),
              e.specifiers.push(this.finishImportSpecifier(t, r))
          }
          maybeParseDefaultImportSpecifier(e) {
            e.importKind = 'value'
            let t = null
            if (
              (this.match(87)
                ? (t = 'typeof')
                : this.isContextual(126) && (t = 'type'),
              t)
            ) {
              const r = this.lookahead(),
                { type: n } = r
              'type' === t && 55 === n && this.unexpected(null, r.type),
                (zf(n) || 5 === n || 55 === n) &&
                  (this.next(), (e.importKind = t))
            }
            return super.maybeParseDefaultImportSpecifier(e)
          }
          parseImportSpecifier(e, t, r, n) {
            const i = e.imported
            let a = null
            'Identifier' === i.type &&
              ('type' === i.name
                ? (a = 'type')
                : 'typeof' === i.name && (a = 'typeof'))
            let s = !1
            if (this.isContextual(93) && !this.isLookaheadContextual('as')) {
              const t = this.parseIdentifier(!0)
              null === a || wd(this.state.type)
                ? ((e.imported = i),
                  (e.importKind = null),
                  (e.local = this.parseIdentifier()))
                : ((e.imported = t), (e.importKind = a), (e.local = _f(t)))
            } else {
              if (null !== a && wd(this.state.type))
                (e.imported = this.parseIdentifier(!0)), (e.importKind = a)
              else {
                if (t)
                  throw this.raise(Xh.ImportBindingIsString, {
                    at: e,
                    importName: i.value,
                  })
                ;(e.imported = i), (e.importKind = null)
              }
              this.eatContextual(93)
                ? (e.local = this.parseIdentifier())
                : ((s = !0), (e.local = _f(e.imported)))
            }
            const o = Bf(e)
            return (
              r &&
                o &&
                this.raise(Lf.ImportTypeShorthandOnlyInPureImport, { at: e }),
              (r || o) &&
                this.checkReservedType(e.local.name, e.local.loc.start, !0),
              !s ||
                r ||
                o ||
                this.checkReservedWord(e.local.name, e.loc.start, !0, !0),
              this.finishImportSpecifier(e, 'ImportSpecifier')
            )
          }
          parseBindingAtom() {
            return 78 === this.state.type
              ? this.parseIdentifier(!0)
              : super.parseBindingAtom()
          }
          parseFunctionParams(e, t) {
            const r = e.kind
            'get' !== r &&
              'set' !== r &&
              this.match(47) &&
              (e.typeParameters = this.flowParseTypeParameterDeclaration()),
              super.parseFunctionParams(e, t)
          }
          parseVarId(e, t) {
            super.parseVarId(e, t),
              this.match(14) &&
                ((e.id.typeAnnotation = this.flowParseTypeAnnotation()),
                this.resetEndLocation(e.id))
          }
          parseAsyncArrowFromCallExpression(e, t) {
            if (this.match(14)) {
              const t = this.state.noAnonFunctionType
              ;(this.state.noAnonFunctionType = !0),
                (e.returnType = this.flowParseTypeAnnotation()),
                (this.state.noAnonFunctionType = t)
            }
            return super.parseAsyncArrowFromCallExpression(e, t)
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow()
          }
          parseMaybeAssign(e, t) {
            var r
            let n,
              i = null
            if (this.hasPlugin('jsx') && (this.match(138) || this.match(47))) {
              if (
                ((i = this.state.clone()),
                (n = this.tryParse(() => super.parseMaybeAssign(e, t), i)),
                !n.error)
              )
                return n.node
              const { context: r } = this.state,
                a = r[r.length - 1]
              ;(a !== ed.j_oTag && a !== ed.j_expr) || r.pop()
            }
            if ((null != (r = n) && r.error) || this.match(47)) {
              var a, s
              let r
              i = i || this.state.clone()
              const o = this.tryParse((n) => {
                var i
                r = this.flowParseTypeParameterDeclaration()
                const a = this.forwardNoArrowParamsConversionAt(r, () => {
                  const n = super.parseMaybeAssign(e, t)
                  return this.resetStartLocationFromNode(n, r), n
                })
                null != (i = a.extra) && i.parenthesized && n()
                const s = this.maybeUnwrapTypeCastExpression(a)
                return (
                  'ArrowFunctionExpression' !== s.type && n(),
                  (s.typeParameters = r),
                  this.resetStartLocationFromNode(s, r),
                  a
                )
              }, i)
              let l = null
              if (
                o.node &&
                'ArrowFunctionExpression' ===
                  this.maybeUnwrapTypeCastExpression(o.node).type
              ) {
                if (!o.error && !o.aborted)
                  return (
                    o.node.async &&
                      this.raise(
                        Lf.UnexpectedTypeParameterBeforeAsyncArrowFunction,
                        { at: r }
                      ),
                    o.node
                  )
                l = o.node
              }
              if (null != (a = n) && a.node)
                return (this.state = n.failState), n.node
              if (l) return (this.state = o.failState), l
              if (null != (s = n) && s.thrown) throw n.error
              if (o.thrown) throw o.error
              throw this.raise(Lf.UnexpectedTokenAfterTypeParameter, { at: r })
            }
            return super.parseMaybeAssign(e, t)
          }
          parseArrow(e) {
            if (this.match(14)) {
              const t = this.tryParse(() => {
                const t = this.state.noAnonFunctionType
                this.state.noAnonFunctionType = !0
                const r = this.startNode()
                return (
                  ([r.typeAnnotation, e.predicate] =
                    this.flowParseTypeAndPredicateInitialiser()),
                  (this.state.noAnonFunctionType = t),
                  this.canInsertSemicolon() && this.unexpected(),
                  this.match(19) || this.unexpected(),
                  r
                )
              })
              if (t.thrown) return null
              t.error && (this.state = t.failState),
                (e.returnType = t.node.typeAnnotation
                  ? this.finishNode(t.node, 'TypeAnnotation')
                  : null)
            }
            return super.parseArrow(e)
          }
          shouldParseArrow(e) {
            return this.match(14) || super.shouldParseArrow(e)
          }
          setArrowFunctionParameters(e, t) {
            ;-1 !== this.state.noArrowParamsConversionAt.indexOf(e.start)
              ? (e.params = t)
              : super.setArrowFunctionParameters(e, t)
          }
          checkParams(e, t, r) {
            if (
              !r ||
              -1 === this.state.noArrowParamsConversionAt.indexOf(e.start)
            ) {
              for (let t = 0; t < e.params.length; t++)
                this.isThisParam(e.params[t]) &&
                  t > 0 &&
                  this.raise(Lf.ThisParamMustBeFirst, { at: e.params[t] })
              return super.checkParams(...arguments)
            }
          }
          parseParenAndDistinguishExpression(e) {
            return super.parseParenAndDistinguishExpression(
              e && -1 === this.state.noArrowAt.indexOf(this.state.start)
            )
          }
          parseSubscripts(e, t, r, n) {
            if (
              'Identifier' === e.type &&
              'async' === e.name &&
              -1 !== this.state.noArrowAt.indexOf(t)
            ) {
              this.next()
              const n = this.startNodeAt(t, r)
              ;(n.callee = e),
                (n.arguments = this.parseCallExpressionArguments(11, !1)),
                (e = this.finishNode(n, 'CallExpression'))
            } else if (
              'Identifier' === e.type &&
              'async' === e.name &&
              this.match(47)
            ) {
              const i = this.state.clone(),
                a = this.tryParse(
                  (e) => this.parseAsyncArrowWithTypeParameters(t, r) || e(),
                  i
                )
              if (!a.error && !a.aborted) return a.node
              const s = this.tryParse(
                () => super.parseSubscripts(e, t, r, n),
                i
              )
              if (s.node && !s.error) return s.node
              if (a.node) return (this.state = a.failState), a.node
              if (s.node) return (this.state = s.failState), s.node
              throw a.error || s.error
            }
            return super.parseSubscripts(e, t, r, n)
          }
          parseSubscript(e, t, r, n, i) {
            if (this.match(18) && this.isLookaheadToken_lt()) {
              if (((i.optionalChainMember = !0), n)) return (i.stop = !0), e
              this.next()
              const a = this.startNodeAt(t, r)
              return (
                (a.callee = e),
                (a.typeArguments = this.flowParseTypeParameterInstantiation()),
                this.expect(10),
                (a.arguments = this.parseCallExpressionArguments(11, !1)),
                (a.optional = !0),
                this.finishCallExpression(a, !0)
              )
            }
            if (!n && this.shouldParseTypes() && this.match(47)) {
              const n = this.startNodeAt(t, r)
              n.callee = e
              const a = this.tryParse(
                () => (
                  (n.typeArguments =
                    this.flowParseTypeParameterInstantiationCallOrNew()),
                  this.expect(10),
                  (n.arguments = this.parseCallExpressionArguments(11, !1)),
                  i.optionalChainMember && (n.optional = !1),
                  this.finishCallExpression(n, i.optionalChainMember)
                )
              )
              if (a.node) return a.error && (this.state = a.failState), a.node
            }
            return super.parseSubscript(e, t, r, n, i)
          }
          parseNewArguments(e) {
            let t = null
            this.shouldParseTypes() &&
              this.match(47) &&
              (t = this.tryParse(() =>
                this.flowParseTypeParameterInstantiationCallOrNew()
              ).node),
              (e.typeArguments = t),
              super.parseNewArguments(e)
          }
          parseAsyncArrowWithTypeParameters(e, t) {
            const r = this.startNodeAt(e, t)
            if ((this.parseFunctionParams(r), this.parseArrow(r)))
              return this.parseArrowExpression(r, void 0, !0)
          }
          readToken_mult_modulo(e) {
            const t = this.input.charCodeAt(this.state.pos + 1)
            if (42 === e && 47 === t && this.state.hasFlowComment)
              return (
                (this.state.hasFlowComment = !1),
                (this.state.pos += 2),
                void this.nextToken()
              )
            super.readToken_mult_modulo(e)
          }
          readToken_pipe_amp(e) {
            const t = this.input.charCodeAt(this.state.pos + 1)
            124 !== e || 125 !== t
              ? super.readToken_pipe_amp(e)
              : this.finishOp(9, 2)
          }
          parseTopLevel(e, t) {
            const r = super.parseTopLevel(e, t)
            return (
              this.state.hasFlowComment &&
                this.raise(Lf.UnterminatedFlowComment, {
                  at: this.state.curPosition(),
                }),
              r
            )
          }
          skipBlockComment() {
            if (this.hasPlugin('flowComments') && this.skipFlowComment()) {
              if (this.state.hasFlowComment)
                throw this.raise(Lf.NestedFlowComment, {
                  at: this.state.startLoc,
                })
              return (
                this.hasFlowCommentCompletion(),
                (this.state.pos += this.skipFlowComment()),
                void (this.state.hasFlowComment = !0)
              )
            }
            if (!this.state.hasFlowComment) return super.skipBlockComment()
            {
              const e = this.input.indexOf('*-/', this.state.pos + 2)
              if (-1 === e)
                throw this.raise(Xh.UnterminatedComment, {
                  at: this.state.curPosition(),
                })
              this.state.pos = e + 2 + 3
            }
          }
          skipFlowComment() {
            const { pos: e } = this.state
            let t = 2
            for (; [32, 9].includes(this.input.charCodeAt(e + t)); ) t++
            const r = this.input.charCodeAt(t + e),
              n = this.input.charCodeAt(t + e + 1)
            return 58 === r && 58 === n
              ? t + 2
              : 'flow-include' === this.input.slice(t + e, t + e + 12)
              ? t + 12
              : 58 === r && 58 !== n && t
          }
          hasFlowCommentCompletion() {
            if (-1 === this.input.indexOf('*/', this.state.pos))
              throw this.raise(Xh.UnterminatedComment, {
                at: this.state.curPosition(),
              })
          }
          flowEnumErrorBooleanMemberNotInitialized(
            e,
            { enumName: t, memberName: r }
          ) {
            this.raise(Lf.EnumBooleanMemberNotInitialized, {
              at: e,
              memberName: r,
              enumName: t,
            })
          }
          flowEnumErrorInvalidMemberInitializer(e, t) {
            return this.raise(
              t.explicitType
                ? 'symbol' === t.explicitType
                  ? Lf.EnumInvalidMemberInitializerSymbolType
                  : Lf.EnumInvalidMemberInitializerPrimaryType
                : Lf.EnumInvalidMemberInitializerUnknownType,
              Object.assign({ at: e }, t)
            )
          }
          flowEnumErrorNumberMemberNotInitialized(
            e,
            { enumName: t, memberName: r }
          ) {
            this.raise(Lf.EnumNumberMemberNotInitialized, {
              at: e,
              enumName: t,
              memberName: r,
            })
          }
          flowEnumErrorStringMemberInconsistentlyInitailized(
            e,
            { enumName: t }
          ) {
            this.raise(Lf.EnumStringMemberInconsistentlyInitailized, {
              at: e,
              enumName: t,
            })
          }
          flowEnumMemberInit() {
            const e = this.state.startLoc,
              t = () => this.match(12) || this.match(8)
            switch (this.state.type) {
              case 130: {
                const r = this.parseNumericLiteral(this.state.value)
                return t()
                  ? { type: 'number', loc: r.loc.start, value: r }
                  : { type: 'invalid', loc: e }
              }
              case 129: {
                const r = this.parseStringLiteral(this.state.value)
                return t()
                  ? { type: 'string', loc: r.loc.start, value: r }
                  : { type: 'invalid', loc: e }
              }
              case 85:
              case 86: {
                const r = this.parseBooleanLiteral(this.match(85))
                return t()
                  ? { type: 'boolean', loc: r.loc.start, value: r }
                  : { type: 'invalid', loc: e }
              }
              default:
                return { type: 'invalid', loc: e }
            }
          }
          flowEnumMemberRaw() {
            const e = this.state.startLoc
            return {
              id: this.parseIdentifier(!0),
              init: this.eat(29)
                ? this.flowEnumMemberInit()
                : { type: 'none', loc: e },
            }
          }
          flowEnumCheckExplicitTypeMismatch(e, t, r) {
            const { explicitType: n } = t
            null !== n &&
              n !== r &&
              this.flowEnumErrorInvalidMemberInitializer(e, t)
          }
          flowEnumMembers({ enumName: e, explicitType: t }) {
            const r = new Set(),
              n = {
                booleanMembers: [],
                numberMembers: [],
                stringMembers: [],
                defaultedMembers: [],
              }
            let i = !1
            for (; !this.match(8); ) {
              if (this.eat(21)) {
                i = !0
                break
              }
              const a = this.startNode(),
                { id: s, init: o } = this.flowEnumMemberRaw(),
                l = s.name
              if ('' === l) continue
              ;/^[a-z]/.test(l) &&
                this.raise(Lf.EnumInvalidMemberName, {
                  at: s,
                  memberName: l,
                  suggestion: l[0].toUpperCase() + l.slice(1),
                  enumName: e,
                }),
                r.has(l) &&
                  this.raise(Lf.EnumDuplicateMemberName, {
                    at: s,
                    memberName: l,
                    enumName: e,
                  }),
                r.add(l)
              const c = { enumName: e, explicitType: t, memberName: l }
              switch (((a.id = s), o.type)) {
                case 'boolean':
                  this.flowEnumCheckExplicitTypeMismatch(o.loc, c, 'boolean'),
                    (a.init = o.value),
                    n.booleanMembers.push(
                      this.finishNode(a, 'EnumBooleanMember')
                    )
                  break
                case 'number':
                  this.flowEnumCheckExplicitTypeMismatch(o.loc, c, 'number'),
                    (a.init = o.value),
                    n.numberMembers.push(this.finishNode(a, 'EnumNumberMember'))
                  break
                case 'string':
                  this.flowEnumCheckExplicitTypeMismatch(o.loc, c, 'string'),
                    (a.init = o.value),
                    n.stringMembers.push(this.finishNode(a, 'EnumStringMember'))
                  break
                case 'invalid':
                  throw this.flowEnumErrorInvalidMemberInitializer(o.loc, c)
                case 'none':
                  switch (t) {
                    case 'boolean':
                      this.flowEnumErrorBooleanMemberNotInitialized(o.loc, c)
                      break
                    case 'number':
                      this.flowEnumErrorNumberMemberNotInitialized(o.loc, c)
                      break
                    default:
                      n.defaultedMembers.push(
                        this.finishNode(a, 'EnumDefaultedMember')
                      )
                  }
              }
              this.match(8) || this.expect(12)
            }
            return { members: n, hasUnknownMembers: i }
          }
          flowEnumStringMembers(e, t, { enumName: r }) {
            if (0 === e.length) return t
            if (0 === t.length) return e
            if (t.length > e.length) {
              for (const t of e)
                this.flowEnumErrorStringMemberInconsistentlyInitailized(t, {
                  enumName: r,
                })
              return t
            }
            for (const e of t)
              this.flowEnumErrorStringMemberInconsistentlyInitailized(e, {
                enumName: r,
              })
            return e
          }
          flowEnumParseExplicitType({ enumName: e }) {
            if (!this.eatContextual(101)) return null
            if (!xd(this.state.type))
              throw this.raise(Lf.EnumInvalidExplicitTypeUnknownSupplied, {
                at: this.state.startLoc,
                enumName: e,
              })
            const { value: t } = this.state
            return (
              this.next(),
              'boolean' !== t &&
                'number' !== t &&
                'string' !== t &&
                'symbol' !== t &&
                this.raise(Lf.EnumInvalidExplicitType, {
                  at: this.state.startLoc,
                  enumName: e,
                  invalidEnumType: t,
                }),
              t
            )
          }
          flowEnumBody(e, t) {
            const r = t.name,
              n = t.loc.start,
              i = this.flowEnumParseExplicitType({ enumName: r })
            this.expect(5)
            const { members: a, hasUnknownMembers: s } = this.flowEnumMembers({
              enumName: r,
              explicitType: i,
            })
            switch (((e.hasUnknownMembers = s), i)) {
              case 'boolean':
                return (
                  (e.explicitType = !0),
                  (e.members = a.booleanMembers),
                  this.expect(8),
                  this.finishNode(e, 'EnumBooleanBody')
                )
              case 'number':
                return (
                  (e.explicitType = !0),
                  (e.members = a.numberMembers),
                  this.expect(8),
                  this.finishNode(e, 'EnumNumberBody')
                )
              case 'string':
                return (
                  (e.explicitType = !0),
                  (e.members = this.flowEnumStringMembers(
                    a.stringMembers,
                    a.defaultedMembers,
                    { enumName: r }
                  )),
                  this.expect(8),
                  this.finishNode(e, 'EnumStringBody')
                )
              case 'symbol':
                return (
                  (e.members = a.defaultedMembers),
                  this.expect(8),
                  this.finishNode(e, 'EnumSymbolBody')
                )
              default: {
                const t = () => (
                  (e.members = []),
                  this.expect(8),
                  this.finishNode(e, 'EnumStringBody')
                )
                e.explicitType = !1
                const i = a.booleanMembers.length,
                  s = a.numberMembers.length,
                  o = a.stringMembers.length,
                  l = a.defaultedMembers.length
                if (i || s || o || l) {
                  if (i || s) {
                    if (!s && !o && i >= l) {
                      for (const e of a.defaultedMembers)
                        this.flowEnumErrorBooleanMemberNotInitialized(
                          e.loc.start,
                          { enumName: r, memberName: e.id.name }
                        )
                      return (
                        (e.members = a.booleanMembers),
                        this.expect(8),
                        this.finishNode(e, 'EnumBooleanBody')
                      )
                    }
                    if (!i && !o && s >= l) {
                      for (const e of a.defaultedMembers)
                        this.flowEnumErrorNumberMemberNotInitialized(
                          e.loc.start,
                          { enumName: r, memberName: e.id.name }
                        )
                      return (
                        (e.members = a.numberMembers),
                        this.expect(8),
                        this.finishNode(e, 'EnumNumberBody')
                      )
                    }
                    return (
                      this.raise(Lf.EnumInconsistentMemberValues, {
                        at: n,
                        enumName: r,
                      }),
                      t()
                    )
                  }
                  return (
                    (e.members = this.flowEnumStringMembers(
                      a.stringMembers,
                      a.defaultedMembers,
                      { enumName: r }
                    )),
                    this.expect(8),
                    this.finishNode(e, 'EnumStringBody')
                  )
                }
                return t()
              }
            }
          }
          flowParseEnumDeclaration(e) {
            const t = this.parseIdentifier()
            return (
              (e.id = t),
              (e.body = this.flowEnumBody(this.startNode(), t)),
              this.finishNode(e, 'EnumDeclaration')
            )
          }
          isLookaheadToken_lt() {
            const e = this.nextTokenStart()
            if (60 === this.input.charCodeAt(e)) {
              const t = this.input.charCodeAt(e + 1)
              return 60 !== t && 61 !== t
            }
            return !1
          }
          maybeUnwrapTypeCastExpression(e) {
            return 'TypeCastExpression' === e.type ? e.expression : e
          }
        },
      typescript: (e) =>
        class extends e {
          getScopeHandler() {
            return Gf
          }
          tsIsIdentifier() {
            return xd(this.state.type)
          }
          tsTokenCanFollowModifier() {
            return (
              (this.match(0) ||
                this.match(5) ||
                this.match(55) ||
                this.match(21) ||
                this.match(134) ||
                this.isLiteralPropertyName()) &&
              !this.hasPrecedingLineBreak()
            )
          }
          tsNextTokenCanFollowModifier() {
            return this.next(), this.tsTokenCanFollowModifier()
          }
          tsParseModifier(e, t) {
            if (!xd(this.state.type)) return
            const r = this.state.value
            if (-1 !== e.indexOf(r)) {
              if (t && this.tsIsStartOfStaticBlocks()) return
              if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)))
                return r
            }
          }
          tsParseModifiers({
            modified: e,
            allowedModifiers: t,
            disallowedModifiers: r,
            stopOnStartOfClassStaticBlock: n,
          }) {
            const i = (t, r, n, i) => {
                r === n &&
                  e[i] &&
                  this.raise(Yf.InvalidModifiersOrder, {
                    at: t,
                    orderedModifiers: [n, i],
                  })
              },
              a = (t, r, n, i) => {
                ;((e[n] && r === i) || (e[i] && r === n)) &&
                  this.raise(Yf.IncompatibleModifiers, {
                    at: t,
                    modifiers: [n, i],
                  })
              }
            for (;;) {
              const { startLoc: s } = this.state,
                o = this.tsParseModifier(t.concat(null != r ? r : []), n)
              if (!o) break
              Jf(o)
                ? e.accessibility
                  ? this.raise(Yf.DuplicateAccessibilityModifier, {
                      at: s,
                      modifier: o,
                    })
                  : (i(s, o, o, 'override'),
                    i(s, o, o, 'static'),
                    i(s, o, o, 'readonly'),
                    (e.accessibility = o))
                : (Object.hasOwnProperty.call(e, o)
                    ? this.raise(Yf.DuplicateModifier, { at: s, modifier: o })
                    : (i(s, o, 'static', 'readonly'),
                      i(s, o, 'static', 'override'),
                      i(s, o, 'override', 'readonly'),
                      i(s, o, 'abstract', 'override'),
                      a(s, o, 'declare', 'override'),
                      a(s, o, 'static', 'abstract')),
                  (e[o] = !0)),
                null != r &&
                  r.includes(o) &&
                  this.raise(Yf.InvalidModifierOnTypeMember, {
                    at: s,
                    modifier: o,
                  })
            }
          }
          tsIsListTerminator(e) {
            switch (e) {
              case 'EnumMembers':
              case 'TypeMembers':
                return this.match(8)
              case 'HeritageClauseElement':
                return this.match(5)
              case 'TupleElementTypes':
                return this.match(3)
              case 'TypeParametersOrArguments':
                return this.match(48)
            }
            throw new Error('Unreachable')
          }
          tsParseList(e, t) {
            const r = []
            for (; !this.tsIsListTerminator(e); ) r.push(t())
            return r
          }
          tsParseDelimitedList(e, t, r) {
            return (function (e) {
              if (null == e) throw new Error(`Unexpected ${e} value.`)
              return e
            })(this.tsParseDelimitedListWorker(e, t, !0, r))
          }
          tsParseDelimitedListWorker(e, t, r, n) {
            const i = []
            let a = -1
            for (; !this.tsIsListTerminator(e); ) {
              a = -1
              const n = t()
              if (null == n) return
              if ((i.push(n), !this.eat(12))) {
                if (this.tsIsListTerminator(e)) break
                return void (r && this.expect(12))
              }
              a = this.state.lastTokStart
            }
            return n && (n.value = a), i
          }
          tsParseBracketedList(e, t, r, n, i) {
            n || (r ? this.expect(0) : this.expect(47))
            const a = this.tsParseDelimitedList(e, t, i)
            return r ? this.expect(3) : this.expect(48), a
          }
          tsParseImportType() {
            const e = this.startNode()
            return (
              this.expect(83),
              this.expect(10),
              this.match(129) ||
                this.raise(Yf.UnsupportedImportTypeArgument, {
                  at: this.state.startLoc,
                }),
              (e.argument = this.parseExprAtom()),
              this.expect(11),
              this.eat(16) && (e.qualifier = this.tsParseEntityName()),
              this.match(47) &&
                (e.typeParameters = this.tsParseTypeArguments()),
              this.finishNode(e, 'TSImportType')
            )
          }
          tsParseEntityName(e = !0) {
            let t = this.parseIdentifier(e)
            for (; this.eat(16); ) {
              const r = this.startNodeAtNode(t)
              ;(r.left = t),
                (r.right = this.parseIdentifier(e)),
                (t = this.finishNode(r, 'TSQualifiedName'))
            }
            return t
          }
          tsParseTypeReference() {
            const e = this.startNode()
            return (
              (e.typeName = this.tsParseEntityName()),
              !this.hasPrecedingLineBreak() &&
                this.match(47) &&
                (e.typeParameters = this.tsParseTypeArguments()),
              this.finishNode(e, 'TSTypeReference')
            )
          }
          tsParseThisTypePredicate(e) {
            this.next()
            const t = this.startNodeAtNode(e)
            return (
              (t.parameterName = e),
              (t.typeAnnotation = this.tsParseTypeAnnotation(!1)),
              (t.asserts = !1),
              this.finishNode(t, 'TSTypePredicate')
            )
          }
          tsParseThisTypeNode() {
            const e = this.startNode()
            return this.next(), this.finishNode(e, 'TSThisType')
          }
          tsParseTypeQuery() {
            const e = this.startNode()
            return (
              this.expect(87),
              this.match(83)
                ? (e.exprName = this.tsParseImportType())
                : (e.exprName = this.tsParseEntityName()),
              this.finishNode(e, 'TSTypeQuery')
            )
          }
          tsParseTypeParameter() {
            const e = this.startNode()
            return (
              (e.name = this.tsParseTypeParameterName()),
              (e.constraint = this.tsEatThenParseType(81)),
              (e.default = this.tsEatThenParseType(29)),
              this.finishNode(e, 'TSTypeParameter')
            )
          }
          tsTryParseTypeParameters() {
            if (this.match(47)) return this.tsParseTypeParameters()
          }
          tsParseTypeParameters() {
            const e = this.startNode()
            this.match(47) || this.match(138) ? this.next() : this.unexpected()
            const t = { value: -1 }
            return (
              (e.params = this.tsParseBracketedList(
                'TypeParametersOrArguments',
                this.tsParseTypeParameter.bind(this),
                !1,
                !0,
                t
              )),
              0 === e.params.length &&
                this.raise(Yf.EmptyTypeParameters, { at: e }),
              -1 !== t.value && this.addExtra(e, 'trailingComma', t.value),
              this.finishNode(e, 'TSTypeParameterDeclaration')
            )
          }
          tsTryNextParseConstantContext() {
            if (75 !== this.lookahead().type) return null
            this.next()
            const e = this.tsParseTypeReference()
            return (
              e.typeParameters &&
                this.raise(Yf.CannotFindName, {
                  at: e.typeName,
                  name: 'const',
                }),
              e
            )
          }
          tsFillSignature(e, t) {
            const r = 19 === e
            ;(t.typeParameters = this.tsTryParseTypeParameters()),
              this.expect(10),
              (t.parameters = this.tsParseBindingListForSignature()),
              (r || this.match(e)) &&
                (t.typeAnnotation =
                  this.tsParseTypeOrTypePredicateAnnotation(e))
          }
          tsParseBindingListForSignature() {
            return this.parseBindingList(11, 41).map(
              (e) => (
                'Identifier' !== e.type &&
                  'RestElement' !== e.type &&
                  'ObjectPattern' !== e.type &&
                  'ArrayPattern' !== e.type &&
                  this.raise(Yf.UnsupportedSignatureParameterKind, {
                    at: e,
                    type: e.type,
                  }),
                e
              )
            )
          }
          tsParseTypeMemberSemicolon() {
            this.eat(12) || this.isLineTerminator() || this.expect(13)
          }
          tsParseSignatureMember(e, t) {
            return (
              this.tsFillSignature(14, t),
              this.tsParseTypeMemberSemicolon(),
              this.finishNode(t, e)
            )
          }
          tsIsUnambiguouslyIndexSignature() {
            return (
              this.next(),
              !!xd(this.state.type) && (this.next(), this.match(14))
            )
          }
          tsTryParseIndexSignature(e) {
            if (
              !this.match(0) ||
              !this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))
            )
              return
            this.expect(0)
            const t = this.parseIdentifier()
            ;(t.typeAnnotation = this.tsParseTypeAnnotation()),
              this.resetEndLocation(t),
              this.expect(3),
              (e.parameters = [t])
            const r = this.tsTryParseTypeAnnotation()
            return (
              r && (e.typeAnnotation = r),
              this.tsParseTypeMemberSemicolon(),
              this.finishNode(e, 'TSIndexSignature')
            )
          }
          tsParsePropertyOrMethodSignature(e, t) {
            this.eat(17) && (e.optional = !0)
            const r = e
            if (this.match(10) || this.match(47)) {
              t && this.raise(Yf.ReadonlyForMethodSignature, { at: e })
              const n = r
              n.kind &&
                this.match(47) &&
                this.raise(Yf.AccesorCannotHaveTypeParameters, {
                  at: this.state.curPosition(),
                }),
                this.tsFillSignature(14, n),
                this.tsParseTypeMemberSemicolon()
              const i = 'parameters',
                a = 'typeAnnotation'
              if ('get' === n.kind)
                n[i].length > 0 &&
                  (this.raise(Xh.BadGetterArity, {
                    at: this.state.curPosition(),
                  }),
                  this.isThisParam(n[i][0]) &&
                    this.raise(Yf.AccesorCannotDeclareThisParameter, {
                      at: this.state.curPosition(),
                    }))
              else if ('set' === n.kind) {
                if (1 !== n[i].length)
                  this.raise(Xh.BadSetterArity, {
                    at: this.state.curPosition(),
                  })
                else {
                  const e = n[i][0]
                  this.isThisParam(e) &&
                    this.raise(Yf.AccesorCannotDeclareThisParameter, {
                      at: this.state.curPosition(),
                    }),
                    'Identifier' === e.type &&
                      e.optional &&
                      this.raise(Yf.SetAccesorCannotHaveOptionalParameter, {
                        at: this.state.curPosition(),
                      }),
                    'RestElement' === e.type &&
                      this.raise(Yf.SetAccesorCannotHaveRestParameter, {
                        at: this.state.curPosition(),
                      })
                }
                n[a] &&
                  this.raise(Yf.SetAccesorCannotHaveReturnType, { at: n[a] })
              } else n.kind = 'method'
              return this.finishNode(n, 'TSMethodSignature')
            }
            {
              const e = r
              t && (e.readonly = !0)
              const n = this.tsTryParseTypeAnnotation()
              return (
                n && (e.typeAnnotation = n),
                this.tsParseTypeMemberSemicolon(),
                this.finishNode(e, 'TSPropertySignature')
              )
            }
          }
          tsParseTypeMember() {
            const e = this.startNode()
            if (this.match(10) || this.match(47))
              return this.tsParseSignatureMember(
                'TSCallSignatureDeclaration',
                e
              )
            if (this.match(77)) {
              const t = this.startNode()
              return (
                this.next(),
                this.match(10) || this.match(47)
                  ? this.tsParseSignatureMember(
                      'TSConstructSignatureDeclaration',
                      e
                    )
                  : ((e.key = this.createIdentifier(t, 'new')),
                    this.tsParsePropertyOrMethodSignature(e, !1))
              )
            }
            this.tsParseModifiers({
              modified: e,
              allowedModifiers: ['readonly'],
              disallowedModifiers: [
                'declare',
                'abstract',
                'private',
                'protected',
                'public',
                'static',
                'override',
              ],
            })
            const t = this.tsTryParseIndexSignature(e)
            return (
              t ||
              (this.parsePropertyName(e),
              e.computed ||
                'Identifier' !== e.key.type ||
                ('get' !== e.key.name && 'set' !== e.key.name) ||
                !this.tsTokenCanFollowModifier() ||
                ((e.kind = e.key.name), this.parsePropertyName(e)),
              this.tsParsePropertyOrMethodSignature(e, !!e.readonly))
            )
          }
          tsParseTypeLiteral() {
            const e = this.startNode()
            return (
              (e.members = this.tsParseObjectTypeMembers()),
              this.finishNode(e, 'TSTypeLiteral')
            )
          }
          tsParseObjectTypeMembers() {
            this.expect(5)
            const e = this.tsParseList(
              'TypeMembers',
              this.tsParseTypeMember.bind(this)
            )
            return this.expect(8), e
          }
          tsIsStartOfMappedType() {
            return (
              this.next(),
              this.eat(53)
                ? this.isContextual(118)
                : (this.isContextual(118) && this.next(),
                  !!this.match(0) &&
                    (this.next(),
                    !!this.tsIsIdentifier() && (this.next(), this.match(58))))
            )
          }
          tsParseMappedTypeParameter() {
            const e = this.startNode()
            return (
              (e.name = this.tsParseTypeParameterName()),
              (e.constraint = this.tsExpectThenParseType(58)),
              this.finishNode(e, 'TSTypeParameter')
            )
          }
          tsParseMappedType() {
            const e = this.startNode()
            return (
              this.expect(5),
              this.match(53)
                ? ((e.readonly = this.state.value),
                  this.next(),
                  this.expectContextual(118))
                : this.eatContextual(118) && (e.readonly = !0),
              this.expect(0),
              (e.typeParameter = this.tsParseMappedTypeParameter()),
              (e.nameType = this.eatContextual(93) ? this.tsParseType() : null),
              this.expect(3),
              this.match(53)
                ? ((e.optional = this.state.value),
                  this.next(),
                  this.expect(17))
                : this.eat(17) && (e.optional = !0),
              (e.typeAnnotation = this.tsTryParseType()),
              this.semicolon(),
              this.expect(8),
              this.finishNode(e, 'TSMappedType')
            )
          }
          tsParseTupleType() {
            const e = this.startNode()
            e.elementTypes = this.tsParseBracketedList(
              'TupleElementTypes',
              this.tsParseTupleElementType.bind(this),
              !0,
              !1
            )
            let t = !1,
              r = null
            return (
              e.elementTypes.forEach((e) => {
                var n
                let { type: i } = e
                !t ||
                  'TSRestType' === i ||
                  'TSOptionalType' === i ||
                  ('TSNamedTupleMember' === i && e.optional) ||
                  this.raise(Yf.OptionalTypeBeforeRequired, { at: e }),
                  (t =
                    t ||
                    ('TSNamedTupleMember' === i && e.optional) ||
                    'TSOptionalType' === i),
                  'TSRestType' === i && (i = (e = e.typeAnnotation).type)
                const a = 'TSNamedTupleMember' === i
                ;(r = null != (n = r) ? n : a),
                  r !== a &&
                    this.raise(Yf.MixedLabeledAndUnlabeledElements, { at: e })
              }),
              this.finishNode(e, 'TSTupleType')
            )
          }
          tsParseTupleElementType() {
            const { start: e, startLoc: t } = this.state,
              r = this.eat(21)
            let n = this.tsParseType()
            const i = this.eat(17)
            if (this.eat(14)) {
              const e = this.startNodeAtNode(n)
              ;(e.optional = i),
                'TSTypeReference' !== n.type ||
                n.typeParameters ||
                'Identifier' !== n.typeName.type
                  ? (this.raise(Yf.InvalidTupleMemberLabel, { at: n }),
                    (e.label = n))
                  : (e.label = n.typeName),
                (e.elementType = this.tsParseType()),
                (n = this.finishNode(e, 'TSNamedTupleMember'))
            } else if (i) {
              const e = this.startNodeAtNode(n)
              ;(e.typeAnnotation = n),
                (n = this.finishNode(e, 'TSOptionalType'))
            }
            if (r) {
              const r = this.startNodeAt(e, t)
              ;(r.typeAnnotation = n), (n = this.finishNode(r, 'TSRestType'))
            }
            return n
          }
          tsParseParenthesizedType() {
            const e = this.startNode()
            return (
              this.expect(10),
              (e.typeAnnotation = this.tsParseType()),
              this.expect(11),
              this.finishNode(e, 'TSParenthesizedType')
            )
          }
          tsParseFunctionOrConstructorType(e, t) {
            const r = this.startNode()
            return (
              'TSConstructorType' === e &&
                ((r.abstract = !!t), t && this.next(), this.next()),
              this.tsFillSignature(19, r),
              this.finishNode(r, e)
            )
          }
          tsParseLiteralTypeNode() {
            const e = this.startNode()
            return (
              (e.literal = (() => {
                switch (this.state.type) {
                  case 130:
                  case 131:
                  case 129:
                  case 85:
                  case 86:
                    return this.parseExprAtom()
                  default:
                    throw this.unexpected()
                }
              })()),
              this.finishNode(e, 'TSLiteralType')
            )
          }
          tsParseTemplateLiteralType() {
            const e = this.startNode()
            return (
              (e.literal = this.parseTemplate(!1)),
              this.finishNode(e, 'TSLiteralType')
            )
          }
          parseTemplateSubstitution() {
            return this.state.inType
              ? this.tsParseType()
              : super.parseTemplateSubstitution()
          }
          tsParseThisTypeOrThisTypePredicate() {
            const e = this.tsParseThisTypeNode()
            return this.isContextual(113) && !this.hasPrecedingLineBreak()
              ? this.tsParseThisTypePredicate(e)
              : e
          }
          tsParseNonArrayType() {
            switch (this.state.type) {
              case 129:
              case 130:
              case 131:
              case 85:
              case 86:
                return this.tsParseLiteralTypeNode()
              case 53:
                if ('-' === this.state.value) {
                  const e = this.startNode(),
                    t = this.lookahead()
                  if (130 !== t.type && 131 !== t.type) throw this.unexpected()
                  return (
                    (e.literal = this.parseMaybeUnary()),
                    this.finishNode(e, 'TSLiteralType')
                  )
                }
                break
              case 78:
                return this.tsParseThisTypeOrThisTypePredicate()
              case 87:
                return this.tsParseTypeQuery()
              case 83:
                return this.tsParseImportType()
              case 5:
                return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))
                  ? this.tsParseMappedType()
                  : this.tsParseTypeLiteral()
              case 0:
                return this.tsParseTupleType()
              case 10:
                return this.tsParseParenthesizedType()
              case 25:
              case 24:
                return this.tsParseTemplateLiteralType()
              default: {
                const { type: e } = this.state
                if (xd(e) || 88 === e || 84 === e) {
                  const t =
                    88 === e
                      ? 'TSVoidKeyword'
                      : 84 === e
                      ? 'TSNullKeyword'
                      : (function (e) {
                          switch (e) {
                            case 'any':
                              return 'TSAnyKeyword'
                            case 'boolean':
                              return 'TSBooleanKeyword'
                            case 'bigint':
                              return 'TSBigIntKeyword'
                            case 'never':
                              return 'TSNeverKeyword'
                            case 'number':
                              return 'TSNumberKeyword'
                            case 'object':
                              return 'TSObjectKeyword'
                            case 'string':
                              return 'TSStringKeyword'
                            case 'symbol':
                              return 'TSSymbolKeyword'
                            case 'undefined':
                              return 'TSUndefinedKeyword'
                            case 'unknown':
                              return 'TSUnknownKeyword'
                            default:
                              return
                          }
                        })(this.state.value)
                  if (void 0 !== t && 46 !== this.lookaheadCharCode()) {
                    const e = this.startNode()
                    return this.next(), this.finishNode(e, t)
                  }
                  return this.tsParseTypeReference()
                }
              }
            }
            throw this.unexpected()
          }
          tsParseArrayTypeOrHigher() {
            let e = this.tsParseNonArrayType()
            for (; !this.hasPrecedingLineBreak() && this.eat(0); )
              if (this.match(3)) {
                const t = this.startNodeAtNode(e)
                ;(t.elementType = e),
                  this.expect(3),
                  (e = this.finishNode(t, 'TSArrayType'))
              } else {
                const t = this.startNodeAtNode(e)
                ;(t.objectType = e),
                  (t.indexType = this.tsParseType()),
                  this.expect(3),
                  (e = this.finishNode(t, 'TSIndexedAccessType'))
              }
            return e
          }
          tsParseTypeOperator() {
            const e = this.startNode(),
              t = this.state.value
            return (
              this.next(),
              (e.operator = t),
              (e.typeAnnotation = this.tsParseTypeOperatorOrHigher()),
              'readonly' === t && this.tsCheckTypeAnnotationForReadOnly(e),
              this.finishNode(e, 'TSTypeOperator')
            )
          }
          tsCheckTypeAnnotationForReadOnly(e) {
            switch (e.typeAnnotation.type) {
              case 'TSTupleType':
              case 'TSArrayType':
                return
              default:
                this.raise(Yf.UnexpectedReadonly, { at: e })
            }
          }
          tsParseInferType() {
            const e = this.startNode()
            this.expectContextual(112)
            const t = this.startNode()
            return (
              (t.name = this.tsParseTypeParameterName()),
              (e.typeParameter = this.finishNode(t, 'TSTypeParameter')),
              this.finishNode(e, 'TSInferType')
            )
          }
          tsParseTypeOperatorOrHigher() {
            var e
            return (e = this.state.type) >= 117 &&
              e <= 119 &&
              !this.state.containsEsc
              ? this.tsParseTypeOperator()
              : this.isContextual(112)
              ? this.tsParseInferType()
              : this.tsParseArrayTypeOrHigher()
          }
          tsParseUnionOrIntersectionType(e, t, r) {
            const n = this.startNode(),
              i = this.eat(r),
              a = []
            do {
              a.push(t())
            } while (this.eat(r))
            return 1 !== a.length || i
              ? ((n.types = a), this.finishNode(n, e))
              : a[0]
          }
          tsParseIntersectionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType(
              'TSIntersectionType',
              this.tsParseTypeOperatorOrHigher.bind(this),
              45
            )
          }
          tsParseUnionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType(
              'TSUnionType',
              this.tsParseIntersectionTypeOrHigher.bind(this),
              43
            )
          }
          tsIsStartOfFunctionType() {
            return (
              !!this.match(47) ||
              (this.match(10) &&
                this.tsLookAhead(
                  this.tsIsUnambiguouslyStartOfFunctionType.bind(this)
                ))
            )
          }
          tsSkipParameterStart() {
            if (xd(this.state.type) || this.match(78)) return this.next(), !0
            if (this.match(5)) {
              const { errors: e } = this.state,
                t = e.length
              try {
                return this.parseObjectLike(8, !0), e.length === t
              } catch (e) {
                return !1
              }
            }
            if (this.match(0)) {
              this.next()
              const { errors: e } = this.state,
                t = e.length
              try {
                return this.parseBindingList(3, 93, !0), e.length === t
              } catch (e) {
                return !1
              }
            }
            return !1
          }
          tsIsUnambiguouslyStartOfFunctionType() {
            if ((this.next(), this.match(11) || this.match(21))) return !0
            if (this.tsSkipParameterStart()) {
              if (
                this.match(14) ||
                this.match(12) ||
                this.match(17) ||
                this.match(29)
              )
                return !0
              if (this.match(11) && (this.next(), this.match(19))) return !0
            }
            return !1
          }
          tsParseTypeOrTypePredicateAnnotation(e) {
            return this.tsInType(() => {
              const t = this.startNode()
              this.expect(e)
              const r = this.startNode(),
                n = !!this.tsTryParse(
                  this.tsParseTypePredicateAsserts.bind(this)
                )
              if (n && this.match(78)) {
                let e = this.tsParseThisTypeOrThisTypePredicate()
                return (
                  'TSThisType' === e.type
                    ? ((r.parameterName = e),
                      (r.asserts = !0),
                      (r.typeAnnotation = null),
                      (e = this.finishNode(r, 'TSTypePredicate')))
                    : (this.resetStartLocationFromNode(e, r), (e.asserts = !0)),
                  (t.typeAnnotation = e),
                  this.finishNode(t, 'TSTypeAnnotation')
                )
              }
              const i =
                this.tsIsIdentifier() &&
                this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this))
              if (!i)
                return n
                  ? ((r.parameterName = this.parseIdentifier()),
                    (r.asserts = n),
                    (r.typeAnnotation = null),
                    (t.typeAnnotation = this.finishNode(r, 'TSTypePredicate')),
                    this.finishNode(t, 'TSTypeAnnotation'))
                  : this.tsParseTypeAnnotation(!1, t)
              const a = this.tsParseTypeAnnotation(!1)
              return (
                (r.parameterName = i),
                (r.typeAnnotation = a),
                (r.asserts = n),
                (t.typeAnnotation = this.finishNode(r, 'TSTypePredicate')),
                this.finishNode(t, 'TSTypeAnnotation')
              )
            })
          }
          tsTryParseTypeOrTypePredicateAnnotation() {
            return this.match(14)
              ? this.tsParseTypeOrTypePredicateAnnotation(14)
              : void 0
          }
          tsTryParseTypeAnnotation() {
            return this.match(14) ? this.tsParseTypeAnnotation() : void 0
          }
          tsTryParseType() {
            return this.tsEatThenParseType(14)
          }
          tsParseTypePredicatePrefix() {
            const e = this.parseIdentifier()
            if (this.isContextual(113) && !this.hasPrecedingLineBreak())
              return this.next(), e
          }
          tsParseTypePredicateAsserts() {
            if (106 !== this.state.type) return !1
            const e = this.state.containsEsc
            return (
              this.next(),
              !(!xd(this.state.type) && !this.match(78)) &&
                (e &&
                  this.raise(Xh.InvalidEscapedReservedWord, {
                    at: this.state.lastTokStartLoc,
                    reservedWord: 'asserts',
                  }),
                !0)
            )
          }
          tsParseTypeAnnotation(e = !0, t = this.startNode()) {
            return (
              this.tsInType(() => {
                e && this.expect(14), (t.typeAnnotation = this.tsParseType())
              }),
              this.finishNode(t, 'TSTypeAnnotation')
            )
          }
          tsParseType() {
            Xf(this.state.inType)
            const e = this.tsParseNonConditionalType()
            if (this.hasPrecedingLineBreak() || !this.eat(81)) return e
            const t = this.startNodeAtNode(e)
            return (
              (t.checkType = e),
              (t.extendsType = this.tsParseNonConditionalType()),
              this.expect(17),
              (t.trueType = this.tsParseType()),
              this.expect(14),
              (t.falseType = this.tsParseType()),
              this.finishNode(t, 'TSConditionalType')
            )
          }
          isAbstractConstructorSignature() {
            return this.isContextual(120) && 77 === this.lookahead().type
          }
          tsParseNonConditionalType() {
            return this.tsIsStartOfFunctionType()
              ? this.tsParseFunctionOrConstructorType('TSFunctionType')
              : this.match(77)
              ? this.tsParseFunctionOrConstructorType('TSConstructorType')
              : this.isAbstractConstructorSignature()
              ? this.tsParseFunctionOrConstructorType('TSConstructorType', !0)
              : this.tsParseUnionTypeOrHigher()
          }
          tsParseTypeAssertion() {
            this.getPluginOption('typescript', 'disallowAmbiguousJSXLike') &&
              this.raise(Yf.ReservedTypeAssertion, { at: this.state.startLoc })
            const e = this.startNode(),
              t = this.tsTryNextParseConstantContext()
            return (
              (e.typeAnnotation = t || this.tsNextThenParseType()),
              this.expect(48),
              (e.expression = this.parseMaybeUnary()),
              this.finishNode(e, 'TSTypeAssertion')
            )
          }
          tsParseHeritageClause(e) {
            const t = this.state.startLoc,
              r = this.tsParseDelimitedList(
                'HeritageClauseElement',
                this.tsParseExpressionWithTypeArguments.bind(this)
              )
            return (
              r.length ||
                this.raise(Yf.EmptyHeritageClauseType, { at: t, token: e }),
              r
            )
          }
          tsParseExpressionWithTypeArguments() {
            const e = this.startNode()
            return (
              (e.expression = this.tsParseEntityName()),
              this.match(47) &&
                (e.typeParameters = this.tsParseTypeArguments()),
              this.finishNode(e, 'TSExpressionWithTypeArguments')
            )
          }
          tsParseInterfaceDeclaration(e, t = {}) {
            if (this.hasFollowingLineBreak()) return null
            this.expectContextual(125),
              t.declare && (e.declare = !0),
              xd(this.state.type)
                ? ((e.id = this.parseIdentifier()),
                  this.checkIdentifier(e.id, 130))
                : ((e.id = null),
                  this.raise(Yf.MissingInterfaceName, {
                    at: this.state.startLoc,
                  })),
              (e.typeParameters = this.tsTryParseTypeParameters()),
              this.eat(81) &&
                (e.extends = this.tsParseHeritageClause('extends'))
            const r = this.startNode()
            return (
              (r.body = this.tsInType(
                this.tsParseObjectTypeMembers.bind(this)
              )),
              (e.body = this.finishNode(r, 'TSInterfaceBody')),
              this.finishNode(e, 'TSInterfaceDeclaration')
            )
          }
          tsParseTypeAliasDeclaration(e) {
            return (
              (e.id = this.parseIdentifier()),
              this.checkIdentifier(e.id, 2),
              (e.typeParameters = this.tsTryParseTypeParameters()),
              (e.typeAnnotation = this.tsInType(() => {
                if (
                  (this.expect(29),
                  this.isContextual(111) && 16 !== this.lookahead().type)
                ) {
                  const e = this.startNode()
                  return this.next(), this.finishNode(e, 'TSIntrinsicKeyword')
                }
                return this.tsParseType()
              })),
              this.semicolon(),
              this.finishNode(e, 'TSTypeAliasDeclaration')
            )
          }
          tsInNoContext(e) {
            const t = this.state.context
            this.state.context = [t[0]]
            try {
              return e()
            } finally {
              this.state.context = t
            }
          }
          tsInType(e) {
            const t = this.state.inType
            this.state.inType = !0
            try {
              return e()
            } finally {
              this.state.inType = t
            }
          }
          tsEatThenParseType(e) {
            return this.match(e) ? this.tsNextThenParseType() : void 0
          }
          tsExpectThenParseType(e) {
            return this.tsDoThenParseType(() => this.expect(e))
          }
          tsNextThenParseType() {
            return this.tsDoThenParseType(() => this.next())
          }
          tsDoThenParseType(e) {
            return this.tsInType(() => (e(), this.tsParseType()))
          }
          tsParseEnumMember() {
            const e = this.startNode()
            return (
              (e.id = this.match(129)
                ? this.parseExprAtom()
                : this.parseIdentifier(!0)),
              this.eat(29) && (e.initializer = this.parseMaybeAssignAllowIn()),
              this.finishNode(e, 'TSEnumMember')
            )
          }
          tsParseEnumDeclaration(e, t = {}) {
            return (
              t.const && (e.const = !0),
              t.declare && (e.declare = !0),
              this.expectContextual(122),
              (e.id = this.parseIdentifier()),
              this.checkIdentifier(e.id, e.const ? 779 : 267),
              this.expect(5),
              (e.members = this.tsParseDelimitedList(
                'EnumMembers',
                this.tsParseEnumMember.bind(this)
              )),
              this.expect(8),
              this.finishNode(e, 'TSEnumDeclaration')
            )
          }
          tsParseModuleBlock() {
            const e = this.startNode()
            return (
              this.scope.enter(0),
              this.expect(5),
              this.parseBlockOrModuleBlockBody((e.body = []), void 0, !0, 8),
              this.scope.exit(),
              this.finishNode(e, 'TSModuleBlock')
            )
          }
          tsParseModuleOrNamespaceDeclaration(e, t = !1) {
            if (
              ((e.id = this.parseIdentifier()),
              t || this.checkIdentifier(e.id, 1024),
              this.eat(16))
            ) {
              const t = this.startNode()
              this.tsParseModuleOrNamespaceDeclaration(t, !0), (e.body = t)
            } else
              this.scope.enter(Yd),
                this.prodParam.enter(0),
                (e.body = this.tsParseModuleBlock()),
                this.prodParam.exit(),
                this.scope.exit()
            return this.finishNode(e, 'TSModuleDeclaration')
          }
          tsParseAmbientExternalModuleDeclaration(e) {
            return (
              this.isContextual(109)
                ? ((e.global = !0), (e.id = this.parseIdentifier()))
                : this.match(129)
                ? (e.id = this.parseExprAtom())
                : this.unexpected(),
              this.match(5)
                ? (this.scope.enter(Yd),
                  this.prodParam.enter(0),
                  (e.body = this.tsParseModuleBlock()),
                  this.prodParam.exit(),
                  this.scope.exit())
                : this.semicolon(),
              this.finishNode(e, 'TSModuleDeclaration')
            )
          }
          tsParseImportEqualsDeclaration(e, t) {
            ;(e.isExport = t || !1),
              (e.id = this.parseIdentifier()),
              this.checkIdentifier(e.id, 9),
              this.expect(29)
            const r = this.tsParseModuleReference()
            return (
              'type' === e.importKind &&
                'TSExternalModuleReference' !== r.type &&
                this.raise(Yf.ImportAliasHasImportType, { at: r }),
              (e.moduleReference = r),
              this.semicolon(),
              this.finishNode(e, 'TSImportEqualsDeclaration')
            )
          }
          tsIsExternalModuleReference() {
            return this.isContextual(116) && 40 === this.lookaheadCharCode()
          }
          tsParseModuleReference() {
            return this.tsIsExternalModuleReference()
              ? this.tsParseExternalModuleReference()
              : this.tsParseEntityName(!1)
          }
          tsParseExternalModuleReference() {
            const e = this.startNode()
            if ((this.expectContextual(116), this.expect(10), !this.match(129)))
              throw this.unexpected()
            return (
              (e.expression = this.parseExprAtom()),
              this.expect(11),
              this.finishNode(e, 'TSExternalModuleReference')
            )
          }
          tsLookAhead(e) {
            const t = this.state.clone(),
              r = e()
            return (this.state = t), r
          }
          tsTryParseAndCatch(e) {
            const t = this.tryParse((t) => e() || t())
            if (!t.aborted && t.node)
              return t.error && (this.state = t.failState), t.node
          }
          tsTryParse(e) {
            const t = this.state.clone(),
              r = e()
            return void 0 !== r && !1 !== r ? r : void (this.state = t)
          }
          tsTryParseDeclare(e) {
            if (this.isLineTerminator()) return
            let t,
              r = this.state.type
            return (
              this.isContextual(99) && ((r = 74), (t = 'let')),
              this.tsInAmbientContext(() => {
                if (68 === r)
                  return (
                    (e.declare = !0), this.parseFunctionStatement(e, !1, !0)
                  )
                if (80 === r)
                  return (e.declare = !0), this.parseClass(e, !0, !1)
                if (122 === r)
                  return this.tsParseEnumDeclaration(e, { declare: !0 })
                if (109 === r)
                  return this.tsParseAmbientExternalModuleDeclaration(e)
                if (75 === r || 74 === r)
                  return this.match(75) && this.isLookaheadContextual('enum')
                    ? (this.expect(75),
                      this.tsParseEnumDeclaration(e, {
                        const: !0,
                        declare: !0,
                      }))
                    : ((e.declare = !0),
                      this.parseVarStatement(e, t || this.state.value, !0))
                if (125 === r) {
                  const t = this.tsParseInterfaceDeclaration(e, { declare: !0 })
                  if (t) return t
                }
                return xd(r)
                  ? this.tsParseDeclaration(e, this.state.value, !0)
                  : void 0
              })
            )
          }
          tsTryParseExportDeclaration() {
            return this.tsParseDeclaration(
              this.startNode(),
              this.state.value,
              !0
            )
          }
          tsParseExpressionStatement(e, t) {
            switch (t.name) {
              case 'declare': {
                const t = this.tsTryParseDeclare(e)
                if (t) return (t.declare = !0), t
                break
              }
              case 'global':
                if (this.match(5)) {
                  this.scope.enter(Yd), this.prodParam.enter(0)
                  const r = e
                  return (
                    (r.global = !0),
                    (r.id = t),
                    (r.body = this.tsParseModuleBlock()),
                    this.scope.exit(),
                    this.prodParam.exit(),
                    this.finishNode(r, 'TSModuleDeclaration')
                  )
                }
                break
              default:
                return this.tsParseDeclaration(e, t.name, !1)
            }
          }
          tsParseDeclaration(e, t, r) {
            switch (t) {
              case 'abstract':
                if (
                  this.tsCheckLineTerminator(r) &&
                  (this.match(80) || xd(this.state.type))
                )
                  return this.tsParseAbstractDeclaration(e)
                break
              case 'module':
                if (this.tsCheckLineTerminator(r)) {
                  if (this.match(129))
                    return this.tsParseAmbientExternalModuleDeclaration(e)
                  if (xd(this.state.type))
                    return this.tsParseModuleOrNamespaceDeclaration(e)
                }
                break
              case 'namespace':
                if (this.tsCheckLineTerminator(r) && xd(this.state.type))
                  return this.tsParseModuleOrNamespaceDeclaration(e)
                break
              case 'type':
                if (this.tsCheckLineTerminator(r) && xd(this.state.type))
                  return this.tsParseTypeAliasDeclaration(e)
            }
          }
          tsCheckLineTerminator(e) {
            return e
              ? !this.hasFollowingLineBreak() && (this.next(), !0)
              : !this.isLineTerminator()
          }
          tsTryParseGenericAsyncArrowFunction(e, t) {
            if (!this.match(47)) return
            const r = this.state.maybeInArrowParameters
            this.state.maybeInArrowParameters = !0
            const n = this.tsTryParseAndCatch(() => {
              const r = this.startNodeAt(e, t)
              return (
                (r.typeParameters = this.tsParseTypeParameters()),
                super.parseFunctionParams(r),
                (r.returnType = this.tsTryParseTypeOrTypePredicateAnnotation()),
                this.expect(19),
                r
              )
            })
            return (
              (this.state.maybeInArrowParameters = r),
              n ? this.parseArrowExpression(n, null, !0) : void 0
            )
          }
          tsParseTypeArgumentsInExpression() {
            if (47 === this.reScan_lt()) return this.tsParseTypeArguments()
          }
          tsParseTypeArguments() {
            const e = this.startNode()
            return (
              (e.params = this.tsInType(() =>
                this.tsInNoContext(
                  () => (
                    this.expect(47),
                    this.tsParseDelimitedList(
                      'TypeParametersOrArguments',
                      this.tsParseType.bind(this)
                    )
                  )
                )
              )),
              0 === e.params.length &&
                this.raise(Yf.EmptyTypeArguments, { at: e }),
              this.expect(48),
              this.finishNode(e, 'TSTypeParameterInstantiation')
            )
          }
          tsIsDeclarationStart() {
            return (e = this.state.type) >= 120 && e <= 126
            var e
          }
          isExportDefaultSpecifier() {
            return (
              !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier()
            )
          }
          parseAssignableListItem(e, t) {
            const r = this.state.start,
              n = this.state.startLoc
            let i,
              a = !1,
              s = !1
            if (void 0 !== e) {
              const t = {}
              this.tsParseModifiers({
                modified: t,
                allowedModifiers: [
                  'public',
                  'private',
                  'protected',
                  'override',
                  'readonly',
                ],
              }),
                (i = t.accessibility),
                (s = t.override),
                (a = t.readonly),
                !1 === e &&
                  (i || a || s) &&
                  this.raise(Yf.UnexpectedParameterModifier, { at: n })
            }
            const o = this.parseMaybeDefault()
            this.parseAssignableListItemTypes(o)
            const l = this.parseMaybeDefault(o.start, o.loc.start, o)
            if (i || a || s) {
              const e = this.startNodeAt(r, n)
              return (
                t.length && (e.decorators = t),
                i && (e.accessibility = i),
                a && (e.readonly = a),
                s && (e.override = s),
                'Identifier' !== l.type &&
                  'AssignmentPattern' !== l.type &&
                  this.raise(Yf.UnsupportedParameterPropertyKind, { at: e }),
                (e.parameter = l),
                this.finishNode(e, 'TSParameterProperty')
              )
            }
            return t.length && (o.decorators = t), l
          }
          isSimpleParameter(e) {
            return (
              ('TSParameterProperty' === e.type &&
                super.isSimpleParameter(e.parameter)) ||
              super.isSimpleParameter(e)
            )
          }
          parseFunctionBodyAndFinish(e, t, r = !1) {
            this.match(14) &&
              (e.returnType = this.tsParseTypeOrTypePredicateAnnotation(14))
            const n =
              'FunctionDeclaration' === t
                ? 'TSDeclareFunction'
                : 'ClassMethod' === t || 'ClassPrivateMethod' === t
                ? 'TSDeclareMethod'
                : void 0
            n && !this.match(5) && this.isLineTerminator()
              ? this.finishNode(e, n)
              : 'TSDeclareFunction' === n &&
                this.state.isAmbientContext &&
                (this.raise(Yf.DeclareFunctionHasImplementation, { at: e }),
                e.declare)
              ? super.parseFunctionBodyAndFinish(e, n, r)
              : super.parseFunctionBodyAndFinish(e, t, r)
          }
          registerFunctionStatementId(e) {
            !e.body && e.id
              ? this.checkIdentifier(e.id, 1024)
              : super.registerFunctionStatementId(...arguments)
          }
          tsCheckForInvalidTypeCasts(e) {
            e.forEach((e) => {
              'TSTypeCastExpression' === (null == e ? void 0 : e.type) &&
                this.raise(Yf.UnexpectedTypeAnnotation, {
                  at: e.typeAnnotation,
                })
            })
          }
          toReferencedList(e, t) {
            return this.tsCheckForInvalidTypeCasts(e), e
          }
          parseArrayLike(...e) {
            const t = super.parseArrayLike(...e)
            return (
              'ArrayExpression' === t.type &&
                this.tsCheckForInvalidTypeCasts(t.elements),
              t
            )
          }
          parseSubscript(e, t, r, n, i) {
            if (!this.hasPrecedingLineBreak() && this.match(35)) {
              ;(this.state.canStartJSXElement = !1), this.next()
              const n = this.startNodeAt(t, r)
              return (
                (n.expression = e), this.finishNode(n, 'TSNonNullExpression')
              )
            }
            let a = !1
            if (this.match(18) && 60 === this.lookaheadCharCode()) {
              if (n) return (i.stop = !0), e
              ;(i.optionalChainMember = a = !0), this.next()
            }
            if (this.match(47) || this.match(51)) {
              let s
              const o = this.tsTryParseAndCatch(() => {
                if (!n && this.atPossibleAsyncArrow(e)) {
                  const e = this.tsTryParseGenericAsyncArrowFunction(t, r)
                  if (e) return e
                }
                const o = this.startNodeAt(t, r)
                o.callee = e
                const l = this.tsParseTypeArgumentsInExpression()
                if (l) {
                  if (
                    (a &&
                      !this.match(10) &&
                      ((s = this.state.curPosition()), this.unexpected()),
                    !n && this.eat(10))
                  )
                    return (
                      (o.arguments = this.parseCallExpressionArguments(11, !1)),
                      this.tsCheckForInvalidTypeCasts(o.arguments),
                      (o.typeParameters = l),
                      i.optionalChainMember && (o.optional = a),
                      this.finishCallExpression(o, i.optionalChainMember)
                    )
                  if (Rd(this.state.type)) {
                    const n = this.parseTaggedTemplateExpression(e, t, r, i)
                    return (n.typeParameters = l), n
                  }
                }
                this.unexpected()
              })
              if ((s && this.unexpected(s, 10), o)) return o
            }
            return super.parseSubscript(e, t, r, n, i)
          }
          parseNewArguments(e) {
            if (this.match(47) || this.match(51)) {
              const t = this.tsTryParseAndCatch(() => {
                const e = this.tsParseTypeArgumentsInExpression()
                return this.match(10) || this.unexpected(), e
              })
              t && (e.typeParameters = t)
            }
            super.parseNewArguments(e)
          }
          parseExprOp(e, t, r, n) {
            if (
              Ad(58) > n &&
              !this.hasPrecedingLineBreak() &&
              this.isContextual(93)
            ) {
              const i = this.startNodeAt(t, r)
              i.expression = e
              const a = this.tsTryNextParseConstantContext()
              return (
                (i.typeAnnotation = a || this.tsNextThenParseType()),
                this.finishNode(i, 'TSAsExpression'),
                this.reScan_lt_gt(),
                this.parseExprOp(i, t, r, n)
              )
            }
            return super.parseExprOp(e, t, r, n)
          }
          checkReservedWord(e, t, r, n) {
            this.state.isAmbientContext || super.checkReservedWord(e, t, r, n)
          }
          checkDuplicateExports() {}
          parseImport(e) {
            if (
              ((e.importKind = 'value'),
              xd(this.state.type) || this.match(55) || this.match(5))
            ) {
              let t = this.lookahead()
              if (
                (this.isContextual(126) &&
                  12 !== t.type &&
                  97 !== t.type &&
                  29 !== t.type &&
                  ((e.importKind = 'type'),
                  this.next(),
                  (t = this.lookahead())),
                xd(this.state.type) && 29 === t.type)
              )
                return this.tsParseImportEqualsDeclaration(e)
            }
            const t = super.parseImport(e)
            return (
              'type' === t.importKind &&
                t.specifiers.length > 1 &&
                'ImportDefaultSpecifier' === t.specifiers[0].type &&
                this.raise(Yf.TypeImportCannotSpecifyDefaultAndNamed, {
                  at: t,
                }),
              t
            )
          }
          parseExport(e) {
            if (this.match(83))
              return (
                this.next(),
                this.isContextual(126) && 61 !== this.lookaheadCharCode()
                  ? ((e.importKind = 'type'), this.next())
                  : (e.importKind = 'value'),
                this.tsParseImportEqualsDeclaration(e, !0)
              )
            if (this.eat(29)) {
              const t = e
              return (
                (t.expression = this.parseExpression()),
                this.semicolon(),
                this.finishNode(t, 'TSExportAssignment')
              )
            }
            if (this.eatContextual(93)) {
              const t = e
              return (
                this.expectContextual(124),
                (t.id = this.parseIdentifier()),
                this.semicolon(),
                this.finishNode(t, 'TSNamespaceExportDeclaration')
              )
            }
            return (
              this.isContextual(126) && 5 === this.lookahead().type
                ? (this.next(), (e.exportKind = 'type'))
                : (e.exportKind = 'value'),
              super.parseExport(e)
            )
          }
          isAbstractClass() {
            return this.isContextual(120) && 80 === this.lookahead().type
          }
          parseExportDefaultExpression() {
            if (this.isAbstractClass()) {
              const e = this.startNode()
              return (
                this.next(), (e.abstract = !0), this.parseClass(e, !0, !0), e
              )
            }
            if (this.match(125)) {
              const e = this.tsParseInterfaceDeclaration(this.startNode())
              if (e) return e
            }
            return super.parseExportDefaultExpression()
          }
          parseVarStatement(e, t, r = !1) {
            const { isAmbientContext: n } = this.state,
              i = super.parseVarStatement(e, t, r || n)
            if (!n) return i
            for (const { id: e, init: r } of i.declarations)
              r &&
                ('const' !== t || e.typeAnnotation
                  ? this.raise(Yf.InitializerNotAllowedInAmbientContext, {
                      at: r,
                    })
                  : 'StringLiteral' !== r.type &&
                    'BooleanLiteral' !== r.type &&
                    'NumericLiteral' !== r.type &&
                    'BigIntLiteral' !== r.type &&
                    ('TemplateLiteral' !== r.type ||
                      r.expressions.length > 0) &&
                    !Qf(r) &&
                    this.raise(
                      Yf.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,
                      { at: r }
                    ))
            return i
          }
          parseStatementContent(e, t) {
            if (this.match(75) && this.isLookaheadContextual('enum')) {
              const e = this.startNode()
              return (
                this.expect(75), this.tsParseEnumDeclaration(e, { const: !0 })
              )
            }
            if (this.isContextual(122))
              return this.tsParseEnumDeclaration(this.startNode())
            if (this.isContextual(125)) {
              const e = this.tsParseInterfaceDeclaration(this.startNode())
              if (e) return e
            }
            return super.parseStatementContent(e, t)
          }
          parseAccessModifier() {
            return this.tsParseModifier(['public', 'protected', 'private'])
          }
          tsHasSomeModifiers(e, t) {
            return t.some((t) => (Jf(t) ? e.accessibility === t : !!e[t]))
          }
          tsIsStartOfStaticBlocks() {
            return this.isContextual(104) && 123 === this.lookaheadCharCode()
          }
          parseClassMember(e, t, r) {
            const n = [
              'declare',
              'private',
              'public',
              'protected',
              'override',
              'abstract',
              'readonly',
              'static',
            ]
            this.tsParseModifiers({
              modified: t,
              allowedModifiers: n,
              stopOnStartOfClassStaticBlock: !0,
            })
            const i = () => {
              this.tsIsStartOfStaticBlocks()
                ? (this.next(),
                  this.next(),
                  this.tsHasSomeModifiers(t, n) &&
                    this.raise(Yf.StaticBlockCannotHaveModifier, {
                      at: this.state.curPosition(),
                    }),
                  this.parseClassStaticBlock(e, t))
                : this.parseClassMemberWithIsStatic(e, t, r, !!t.static)
            }
            t.declare ? this.tsInAmbientContext(i) : i()
          }
          parseClassMemberWithIsStatic(e, t, r, n) {
            const i = this.tsTryParseIndexSignature(t)
            if (i)
              return (
                e.body.push(i),
                t.abstract &&
                  this.raise(Yf.IndexSignatureHasAbstract, { at: t }),
                t.accessibility &&
                  this.raise(Yf.IndexSignatureHasAccessibility, {
                    at: t,
                    modifier: t.accessibility,
                  }),
                t.declare && this.raise(Yf.IndexSignatureHasDeclare, { at: t }),
                void (
                  t.override &&
                  this.raise(Yf.IndexSignatureHasOverride, { at: t })
                )
              )
            !this.state.inAbstractClass &&
              t.abstract &&
              this.raise(Yf.NonAbstractClassHasAbstractMethod, { at: t }),
              t.override &&
                (r.hadSuperClass ||
                  this.raise(Yf.OverrideNotInSubClass, { at: t })),
              super.parseClassMemberWithIsStatic(e, t, r, n)
          }
          parsePostMemberNameModifiers(e) {
            this.eat(17) && (e.optional = !0),
              e.readonly &&
                this.match(10) &&
                this.raise(Yf.ClassMethodHasReadonly, { at: e }),
              e.declare &&
                this.match(10) &&
                this.raise(Yf.ClassMethodHasDeclare, { at: e })
          }
          parseExpressionStatement(e, t) {
            return (
              ('Identifier' === t.type
                ? this.tsParseExpressionStatement(e, t)
                : void 0) || super.parseExpressionStatement(e, t)
            )
          }
          shouldParseExportDeclaration() {
            return (
              !!this.tsIsDeclarationStart() ||
              super.shouldParseExportDeclaration()
            )
          }
          parseConditional(e, t, r, n) {
            if (!this.state.maybeInArrowParameters || !this.match(17))
              return super.parseConditional(e, t, r, n)
            const i = this.tryParse(() => super.parseConditional(e, t, r))
            return i.node
              ? (i.error && (this.state = i.failState), i.node)
              : (i.error && super.setOptionalParametersError(n, i.error), e)
          }
          parseParenItem(e, t, r) {
            if (
              ((e = super.parseParenItem(e, t, r)),
              this.eat(17) && ((e.optional = !0), this.resetEndLocation(e)),
              this.match(14))
            ) {
              const n = this.startNodeAt(t, r)
              return (
                (n.expression = e),
                (n.typeAnnotation = this.tsParseTypeAnnotation()),
                this.finishNode(n, 'TSTypeCastExpression')
              )
            }
            return e
          }
          parseExportDeclaration(e) {
            if (!this.state.isAmbientContext && this.isContextual(121))
              return this.tsInAmbientContext(() =>
                this.parseExportDeclaration(e)
              )
            const t = this.state.start,
              r = this.state.startLoc,
              n = this.eatContextual(121)
            if (
              n &&
              (this.isContextual(121) || !this.shouldParseExportDeclaration())
            )
              throw this.raise(Yf.ExpectedAmbientAfterExportDeclare, {
                at: this.state.startLoc,
              })
            const i =
              (xd(this.state.type) && this.tsTryParseExportDeclaration()) ||
              super.parseExportDeclaration(e)
            return i
              ? (('TSInterfaceDeclaration' === i.type ||
                  'TSTypeAliasDeclaration' === i.type ||
                  n) &&
                  (e.exportKind = 'type'),
                n && (this.resetStartLocation(i, t, r), (i.declare = !0)),
                i)
              : null
          }
          parseClassId(e, t, r) {
            if ((!t || r) && this.isContextual(110)) return
            super.parseClassId(e, t, r, e.declare ? 1024 : 139)
            const n = this.tsTryParseTypeParameters()
            n && (e.typeParameters = n)
          }
          parseClassPropertyAnnotation(e) {
            !e.optional && this.eat(35) && (e.definite = !0)
            const t = this.tsTryParseTypeAnnotation()
            t && (e.typeAnnotation = t)
          }
          parseClassProperty(e) {
            if (
              (this.parseClassPropertyAnnotation(e),
              this.state.isAmbientContext &&
                this.match(29) &&
                this.raise(Yf.DeclareClassFieldHasInitializer, {
                  at: this.state.startLoc,
                }),
              e.abstract && this.match(29))
            ) {
              const { key: t } = e
              this.raise(Yf.AbstractPropertyHasInitializer, {
                at: this.state.startLoc,
                propertyName:
                  'Identifier' !== t.type || e.computed
                    ? `[${this.input.slice(t.start, t.end)}]`
                    : t.name,
              })
            }
            return super.parseClassProperty(e)
          }
          parseClassPrivateProperty(e) {
            return (
              e.abstract && this.raise(Yf.PrivateElementHasAbstract, { at: e }),
              e.accessibility &&
                this.raise(Yf.PrivateElementHasAccessibility, {
                  at: e,
                  modifier: e.accessibility,
                }),
              this.parseClassPropertyAnnotation(e),
              super.parseClassPrivateProperty(e)
            )
          }
          pushClassMethod(e, t, r, n, i, a) {
            const s = this.tsTryParseTypeParameters()
            s && i && this.raise(Yf.ConstructorHasTypeParameters, { at: s })
            const { declare: o = !1, kind: l } = t
            !o ||
              ('get' !== l && 'set' !== l) ||
              this.raise(Yf.DeclareAccessor, { at: t, kind: l }),
              s && (t.typeParameters = s),
              super.pushClassMethod(e, t, r, n, i, a)
          }
          pushClassPrivateMethod(e, t, r, n) {
            const i = this.tsTryParseTypeParameters()
            i && (t.typeParameters = i),
              super.pushClassPrivateMethod(e, t, r, n)
          }
          declareClassPrivateMethodInScope(e, t) {
            'TSDeclareMethod' !== e.type &&
              ('MethodDefinition' !== e.type || e.value.body) &&
              super.declareClassPrivateMethodInScope(e, t)
          }
          parseClassSuper(e) {
            super.parseClassSuper(e),
              e.superClass &&
                (this.match(47) || this.match(51)) &&
                (e.superTypeParameters =
                  this.tsParseTypeArgumentsInExpression()),
              this.eatContextual(110) &&
                (e.implements = this.tsParseHeritageClause('implements'))
          }
          parseObjPropValue(e, ...t) {
            const r = this.tsTryParseTypeParameters()
            r && (e.typeParameters = r), super.parseObjPropValue(e, ...t)
          }
          parseFunctionParams(e, t) {
            const r = this.tsTryParseTypeParameters()
            r && (e.typeParameters = r), super.parseFunctionParams(e, t)
          }
          parseVarId(e, t) {
            super.parseVarId(e, t),
              'Identifier' === e.id.type &&
                !this.hasPrecedingLineBreak() &&
                this.eat(35) &&
                (e.definite = !0)
            const r = this.tsTryParseTypeAnnotation()
            r && ((e.id.typeAnnotation = r), this.resetEndLocation(e.id))
          }
          parseAsyncArrowFromCallExpression(e, t) {
            return (
              this.match(14) && (e.returnType = this.tsParseTypeAnnotation()),
              super.parseAsyncArrowFromCallExpression(e, t)
            )
          }
          parseMaybeAssign(...e) {
            var t, r, n, i, a, s, o
            let l, c, u, p
            if (this.hasPlugin('jsx') && (this.match(138) || this.match(47))) {
              if (
                ((l = this.state.clone()),
                (c = this.tryParse(() => super.parseMaybeAssign(...e), l)),
                !c.error)
              )
                return c.node
              const { context: t } = this.state,
                r = t[t.length - 1]
              ;(r !== ed.j_oTag && r !== ed.j_expr) || t.pop()
            }
            if (!((null != (t = c) && t.error) || this.match(47)))
              return super.parseMaybeAssign(...e)
            l = l || this.state.clone()
            const h = this.tryParse((t) => {
              var r, n, i
              p = this.tsParseTypeParameters()
              const a = super.parseMaybeAssign(...e)
              if (
                (('ArrowFunctionExpression' !== a.type ||
                  (null != (r = a.extra) && r.parenthesized)) &&
                  t(),
                0 !== (null == (n = p) ? void 0 : n.params.length) &&
                  this.resetStartLocationFromNode(a, p),
                (a.typeParameters = p),
                this.hasPlugin('jsx') &&
                  1 === a.typeParameters.params.length &&
                  (null == (i = a.typeParameters.extra) || !i.trailingComma))
              ) {
                a.typeParameters.params[0].constraint
              }
              return a
            }, l)
            if (!h.error && !h.aborted)
              return p && this.reportReservedArrowTypeParam(p), h.node
            if (
              !c &&
              (Xf(!this.hasPlugin('jsx')),
              (u = this.tryParse(() => super.parseMaybeAssign(...e), l)),
              !u.error)
            )
              return u.node
            if (null != (r = c) && r.node)
              return (this.state = c.failState), c.node
            if (h.node)
              return (
                (this.state = h.failState),
                p && this.reportReservedArrowTypeParam(p),
                h.node
              )
            if (null != (n = u) && n.node)
              return (this.state = u.failState), u.node
            if (null != (i = c) && i.thrown) throw c.error
            if (h.thrown) throw h.error
            if (null != (a = u) && a.thrown) throw u.error
            throw (
              (null == (s = c) ? void 0 : s.error) ||
              h.error ||
              (null == (o = u) ? void 0 : o.error)
            )
          }
          reportReservedArrowTypeParam(e) {
            var t
            1 !== e.params.length ||
              (null != (t = e.extra) && t.trailingComma) ||
              !this.getPluginOption('typescript', 'disallowAmbiguousJSXLike') ||
              this.raise(Yf.ReservedArrowTypeParam, { at: e })
          }
          parseMaybeUnary(e) {
            return !this.hasPlugin('jsx') && this.match(47)
              ? this.tsParseTypeAssertion()
              : super.parseMaybeUnary(e)
          }
          parseArrow(e) {
            if (this.match(14)) {
              const t = this.tryParse((e) => {
                const t = this.tsParseTypeOrTypePredicateAnnotation(14)
                return (!this.canInsertSemicolon() && this.match(19)) || e(), t
              })
              if (t.aborted) return
              t.thrown ||
                (t.error && (this.state = t.failState), (e.returnType = t.node))
            }
            return super.parseArrow(e)
          }
          parseAssignableListItemTypes(e) {
            this.eat(17) &&
              ('Identifier' === e.type ||
                this.state.isAmbientContext ||
                this.state.inType ||
                this.raise(Yf.PatternIsOptional, { at: e }),
              (e.optional = !0))
            const t = this.tsTryParseTypeAnnotation()
            return t && (e.typeAnnotation = t), this.resetEndLocation(e), e
          }
          isAssignable(e, t) {
            switch (e.type) {
              case 'TSTypeCastExpression':
                return this.isAssignable(e.expression, t)
              case 'TSParameterProperty':
                return !0
              default:
                return super.isAssignable(e, t)
            }
          }
          toAssignable(e, t = !1) {
            switch (e.type) {
              case 'TSTypeCastExpression':
                return super.toAssignable(this.typeCastToParameter(e), t)
              case 'TSParameterProperty':
              default:
                return super.toAssignable(e, t)
              case 'ParenthesizedExpression':
                return this.toAssignableParenthesizedExpression(e, t)
              case 'TSAsExpression':
              case 'TSNonNullExpression':
              case 'TSTypeAssertion':
                return (e.expression = this.toAssignable(e.expression, t)), e
            }
          }
          toAssignableParenthesizedExpression(e, t) {
            switch (e.expression.type) {
              case 'TSAsExpression':
              case 'TSNonNullExpression':
              case 'TSTypeAssertion':
              case 'ParenthesizedExpression':
                return (e.expression = this.toAssignable(e.expression, t)), e
              default:
                return super.toAssignable(e, t)
            }
          }
          isValidLVal(e, t, r) {
            return (
              (n = {
                TSTypeCastExpression: !0,
                TSParameterProperty: 'parameter',
                TSNonNullExpression: 'expression',
                TSAsExpression: (r !== tf || t) && ['expression', !0],
                TSTypeAssertion: (r !== tf || t) && ['expression', !0],
              }),
              (i = e),
              (Object.hasOwnProperty.call(n, i) && n[i]) ||
                super.isValidLVal(e, t, r)
            )
            var n, i
          }
          parseBindingAtom() {
            return 78 === this.state.type
              ? this.parseIdentifier(!0)
              : super.parseBindingAtom()
          }
          parseMaybeDecoratorArguments(e) {
            if (this.match(47) || this.match(51)) {
              const t = this.tsParseTypeArgumentsInExpression()
              if (this.match(10)) {
                const r = super.parseMaybeDecoratorArguments(e)
                return (r.typeParameters = t), r
              }
              this.unexpected(null, 10)
            }
            return super.parseMaybeDecoratorArguments(e)
          }
          checkCommaAfterRest(e) {
            return this.state.isAmbientContext &&
              this.match(12) &&
              this.lookaheadCharCode() === e
              ? (this.next(), !1)
              : super.checkCommaAfterRest(e)
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod()
          }
          isClassProperty() {
            return this.match(35) || this.match(14) || super.isClassProperty()
          }
          parseMaybeDefault(...e) {
            const t = super.parseMaybeDefault(...e)
            return (
              'AssignmentPattern' === t.type &&
                t.typeAnnotation &&
                t.right.start < t.typeAnnotation.start &&
                this.raise(Yf.TypeAnnotationAfterAssign, {
                  at: t.typeAnnotation,
                }),
              t
            )
          }
          getTokenFromCode(e) {
            if (this.state.inType) {
              if (62 === e) return this.finishOp(48, 1)
              if (60 === e) return this.finishOp(47, 1)
            }
            return super.getTokenFromCode(e)
          }
          reScan_lt_gt() {
            const { type: e } = this.state
            47 === e
              ? ((this.state.pos -= 1), this.readToken_lt())
              : 48 === e && ((this.state.pos -= 1), this.readToken_gt())
          }
          reScan_lt() {
            const { type: e } = this.state
            return 51 === e
              ? ((this.state.pos -= 2), this.finishOp(47, 1), 47)
              : e
          }
          toAssignableList(e) {
            for (let t = 0; t < e.length; t++) {
              const r = e[t]
              if (r)
                switch (r.type) {
                  case 'TSTypeCastExpression':
                    e[t] = this.typeCastToParameter(r)
                    break
                  case 'TSAsExpression':
                  case 'TSTypeAssertion':
                    this.state.maybeInArrowParameters
                      ? this.raise(Yf.UnexpectedTypeCastInParameter, { at: r })
                      : (e[t] = this.typeCastToParameter(r))
                }
            }
            return super.toAssignableList(...arguments)
          }
          typeCastToParameter(e) {
            return (
              (e.expression.typeAnnotation = e.typeAnnotation),
              this.resetEndLocation(e.expression, e.typeAnnotation.loc.end),
              e.expression
            )
          }
          shouldParseArrow(e) {
            return this.match(14)
              ? e.every((e) => this.isAssignable(e, !0))
              : super.shouldParseArrow(e)
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow()
          }
          canHaveLeadingDecorator() {
            return super.canHaveLeadingDecorator() || this.isAbstractClass()
          }
          jsxParseOpeningElementAfterName(e) {
            if (this.match(47) || this.match(51)) {
              const t = this.tsTryParseAndCatch(() =>
                this.tsParseTypeArgumentsInExpression()
              )
              t && (e.typeParameters = t)
            }
            return super.jsxParseOpeningElementAfterName(e)
          }
          getGetterSetterExpectedParamCount(e) {
            const t = super.getGetterSetterExpectedParamCount(e),
              r = this.getObjectOrClassMethodParams(e)[0]
            return r && this.isThisParam(r) ? t + 1 : t
          }
          parseCatchClauseParam() {
            const e = super.parseCatchClauseParam(),
              t = this.tsTryParseTypeAnnotation()
            return t && ((e.typeAnnotation = t), this.resetEndLocation(e)), e
          }
          tsInAmbientContext(e) {
            const t = this.state.isAmbientContext
            this.state.isAmbientContext = !0
            try {
              return e()
            } finally {
              this.state.isAmbientContext = t
            }
          }
          parseClass(e, ...t) {
            const r = this.state.inAbstractClass
            this.state.inAbstractClass = !!e.abstract
            try {
              return super.parseClass(e, ...t)
            } finally {
              this.state.inAbstractClass = r
            }
          }
          tsParseAbstractDeclaration(e) {
            if (this.match(80))
              return (e.abstract = !0), this.parseClass(e, !0, !1)
            if (this.isContextual(125)) {
              if (!this.hasFollowingLineBreak())
                return (
                  (e.abstract = !0),
                  this.raise(Yf.NonClassMethodPropertyHasAbstractModifer, {
                    at: e,
                  }),
                  this.tsParseInterfaceDeclaration(e)
                )
            } else this.unexpected(null, 80)
          }
          parseMethod(...e) {
            const t = super.parseMethod(...e)
            if (t.abstract) {
              if (this.hasPlugin('estree') ? !!t.value.body : !!t.body) {
                const { key: e } = t
                this.raise(Yf.AbstractMethodHasImplementation, {
                  at: t,
                  methodName:
                    'Identifier' !== e.type || t.computed
                      ? `[${this.input.slice(e.start, e.end)}]`
                      : e.name,
                })
              }
            }
            return t
          }
          tsParseTypeParameterName() {
            return this.parseIdentifier().name
          }
          shouldParseAsAmbientContext() {
            return !!this.getPluginOption('typescript', 'dts')
          }
          parse() {
            return (
              this.shouldParseAsAmbientContext() &&
                (this.state.isAmbientContext = !0),
              super.parse()
            )
          }
          getExpression() {
            return (
              this.shouldParseAsAmbientContext() &&
                (this.state.isAmbientContext = !0),
              super.getExpression()
            )
          }
          parseExportSpecifier(e, t, r, n) {
            return !t && n
              ? (this.parseTypeOnlyImportExportSpecifier(e, !1, r),
                this.finishNode(e, 'ExportSpecifier'))
              : ((e.exportKind = 'value'),
                super.parseExportSpecifier(e, t, r, n))
          }
          parseImportSpecifier(e, t, r, n) {
            return !t && n
              ? (this.parseTypeOnlyImportExportSpecifier(e, !0, r),
                this.finishNode(e, 'ImportSpecifier'))
              : ((e.importKind = 'value'),
                super.parseImportSpecifier(e, t, r, n))
          }
          parseTypeOnlyImportExportSpecifier(e, t, r) {
            const n = t ? 'imported' : 'local',
              i = t ? 'local' : 'exported'
            let a,
              s = e[n],
              o = !1,
              l = !0
            const c = s.loc.start
            if (this.isContextual(93)) {
              const e = this.parseIdentifier()
              if (this.isContextual(93)) {
                const r = this.parseIdentifier()
                wd(this.state.type)
                  ? ((o = !0),
                    (s = e),
                    (a = t
                      ? this.parseIdentifier()
                      : this.parseModuleExportName()),
                    (l = !1))
                  : ((a = r), (l = !1))
              } else
                wd(this.state.type)
                  ? ((l = !1),
                    (a = t
                      ? this.parseIdentifier()
                      : this.parseModuleExportName()))
                  : ((o = !0), (s = e))
            } else
              wd(this.state.type) &&
                ((o = !0),
                (s = t ? this.parseIdentifier() : this.parseModuleExportName()))
            o &&
              r &&
              this.raise(
                t
                  ? Yf.TypeModifierIsUsedInTypeImports
                  : Yf.TypeModifierIsUsedInTypeExports,
                { at: c }
              ),
              (e[n] = s),
              (e[i] = a)
            ;(e[t ? 'importKind' : 'exportKind'] = o ? 'type' : 'value'),
              l &&
                this.eatContextual(93) &&
                (e[i] = t
                  ? this.parseIdentifier()
                  : this.parseModuleExportName()),
              e[i] || (e[i] = _f(e[n])),
              t && this.checkIdentifier(e[i], 9)
          }
        },
      v8intrinsic: (e) =>
        class extends e {
          parseV8Intrinsic() {
            if (this.match(54)) {
              const e = this.state.startLoc,
                t = this.startNode()
              if ((this.next(), xd(this.state.type))) {
                const e = this.parseIdentifierName(this.state.start),
                  r = this.createIdentifier(t, e)
                if (((r.type = 'V8IntrinsicIdentifier'), this.match(10)))
                  return r
              }
              this.unexpected(e)
            }
          }
          parseExprAtom() {
            return this.parseV8Intrinsic() || super.parseExprAtom(...arguments)
          }
        },
      placeholders: (e) =>
        class extends e {
          parsePlaceholder(e) {
            if (this.match(140)) {
              const t = this.startNode()
              return (
                this.next(),
                this.assertNoSpace(),
                (t.name = super.parseIdentifier(!0)),
                this.assertNoSpace(),
                this.expect(140),
                this.finishPlaceholder(t, e)
              )
            }
          }
          finishPlaceholder(e, t) {
            const r = !(!e.expectedNode || 'Placeholder' !== e.type)
            return (
              (e.expectedNode = t), r ? e : this.finishNode(e, 'Placeholder')
            )
          }
          getTokenFromCode(e) {
            return 37 === e && 37 === this.input.charCodeAt(this.state.pos + 1)
              ? this.finishOp(140, 2)
              : super.getTokenFromCode(...arguments)
          }
          parseExprAtom() {
            return (
              this.parsePlaceholder('Expression') ||
              super.parseExprAtom(...arguments)
            )
          }
          parseIdentifier() {
            return (
              this.parsePlaceholder('Identifier') ||
              super.parseIdentifier(...arguments)
            )
          }
          checkReservedWord(e) {
            void 0 !== e && super.checkReservedWord(...arguments)
          }
          parseBindingAtom() {
            return (
              this.parsePlaceholder('Pattern') ||
              super.parseBindingAtom(...arguments)
            )
          }
          isValidLVal(e, ...t) {
            return 'Placeholder' === e || super.isValidLVal(e, ...t)
          }
          toAssignable(e) {
            return e &&
              'Placeholder' === e.type &&
              'Expression' === e.expectedNode
              ? ((e.expectedNode = 'Pattern'), e)
              : super.toAssignable(...arguments)
          }
          isLet(e) {
            if (super.isLet(e)) return !0
            if (!this.isContextual(99)) return !1
            if (e) return !1
            return 140 === this.lookahead().type
          }
          verifyBreakContinue(e) {
            ;(e.label && 'Placeholder' === e.label.type) ||
              super.verifyBreakContinue(...arguments)
          }
          parseExpressionStatement(e, t) {
            if ('Placeholder' !== t.type || (t.extra && t.extra.parenthesized))
              return super.parseExpressionStatement(...arguments)
            if (this.match(14)) {
              const r = e
              return (
                (r.label = this.finishPlaceholder(t, 'Identifier')),
                this.next(),
                (r.body = this.parseStatement('label')),
                this.finishNode(r, 'LabeledStatement')
              )
            }
            return (
              this.semicolon(),
              (e.name = t.name),
              this.finishPlaceholder(e, 'Statement')
            )
          }
          parseBlock() {
            return (
              this.parsePlaceholder('BlockStatement') ||
              super.parseBlock(...arguments)
            )
          }
          parseFunctionId() {
            return (
              this.parsePlaceholder('Identifier') ||
              super.parseFunctionId(...arguments)
            )
          }
          parseClass(e, t, r) {
            const n = t ? 'ClassDeclaration' : 'ClassExpression'
            this.next(), this.takeDecorators(e)
            const i = this.state.strict,
              a = this.parsePlaceholder('Identifier')
            if (a) {
              if (!(this.match(81) || this.match(140) || this.match(5))) {
                if (r || !t)
                  return (
                    (e.id = null),
                    (e.body = this.finishPlaceholder(a, 'ClassBody')),
                    this.finishNode(e, n)
                  )
                throw this.raise(em.ClassNameIsRequired, {
                  at: this.state.startLoc,
                })
              }
              e.id = a
            } else this.parseClassId(e, t, r)
            return (
              this.parseClassSuper(e),
              (e.body =
                this.parsePlaceholder('ClassBody') ||
                this.parseClassBody(!!e.superClass, i)),
              this.finishNode(e, n)
            )
          }
          parseExport(e) {
            const t = this.parsePlaceholder('Identifier')
            if (!t) return super.parseExport(...arguments)
            if (!this.isContextual(97) && !this.match(12))
              return (
                (e.specifiers = []),
                (e.source = null),
                (e.declaration = this.finishPlaceholder(t, 'Declaration')),
                this.finishNode(e, 'ExportNamedDeclaration')
              )
            this.expectPlugin('exportDefaultFrom')
            const r = this.startNode()
            return (
              (r.exported = t),
              (e.specifiers = [this.finishNode(r, 'ExportDefaultSpecifier')]),
              super.parseExport(e)
            )
          }
          isExportDefaultSpecifier() {
            if (this.match(65)) {
              const e = this.nextTokenStart()
              if (
                this.isUnparsedContextual(e, 'from') &&
                this.input.startsWith(Cd(140), this.nextTokenStartSince(e + 4))
              )
                return !0
            }
            return super.isExportDefaultSpecifier()
          }
          maybeParseExportDefaultSpecifier(e) {
            return (
              !!(e.specifiers && e.specifiers.length > 0) ||
              super.maybeParseExportDefaultSpecifier(...arguments)
            )
          }
          checkExport(e) {
            const { specifiers: t } = e
            null != t &&
              t.length &&
              (e.specifiers = t.filter(
                (e) => 'Placeholder' === e.exported.type
              )),
              super.checkExport(e),
              (e.specifiers = t)
          }
          parseImport(e) {
            const t = this.parsePlaceholder('Identifier')
            if (!t) return super.parseImport(...arguments)
            if (
              ((e.specifiers = []), !this.isContextual(97) && !this.match(12))
            )
              return (
                (e.source = this.finishPlaceholder(t, 'StringLiteral')),
                this.semicolon(),
                this.finishNode(e, 'ImportDeclaration')
              )
            const r = this.startNodeAtNode(t)
            if (
              ((r.local = t),
              this.finishNode(r, 'ImportDefaultSpecifier'),
              e.specifiers.push(r),
              this.eat(12))
            ) {
              this.maybeParseStarImportSpecifier(e) ||
                this.parseNamedImportSpecifiers(e)
            }
            return (
              this.expectContextual(97),
              (e.source = this.parseImportSource()),
              this.semicolon(),
              this.finishNode(e, 'ImportDeclaration')
            )
          }
          parseImportSource() {
            return (
              this.parsePlaceholder('StringLiteral') ||
              super.parseImportSource(...arguments)
            )
          }
          assertNoSpace() {
            this.state.start > this.state.lastTokEndLoc.index &&
              this.raise(em.UnexpectedSpace, { at: this.state.lastTokEndLoc })
          }
        },
    },
    om = Object.keys(sm),
    lm = {
      sourceType: 'script',
      sourceFilename: void 0,
      startColumn: 0,
      startLine: 1,
      allowAwaitOutsideFunction: !1,
      allowReturnOutsideFunction: !1,
      allowImportExportEverywhere: !1,
      allowSuperOutsideMethod: !1,
      allowUndeclaredExports: !1,
      plugins: [],
      strictMode: null,
      ranges: !1,
      tokens: !1,
      createParenthesizedExpressions: !1,
      errorRecovery: !1,
      attachComment: !0,
    }
  const cm = (e) =>
    'ParenthesizedExpression' === e.type ? cm(e.expression) : e
  const um = { kind: 'loop' },
    pm = { kind: 'switch' },
    hm = /[\uD800-\uDFFF]/u,
    dm = /in(?:stanceof)?/y
  class fm extends class extends class extends class extends class extends class extends class extends class extends class {
    constructor() {
      ;(this.sawUnambiguousESM = !1), (this.ambiguousScriptDifferentAst = !1)
    }
    hasPlugin(e) {
      if ('string' == typeof e) return this.plugins.has(e)
      {
        const [t, r] = e
        if (!this.hasPlugin(t)) return !1
        const n = this.plugins.get(t)
        for (const e of Object.keys(r))
          if ((null == n ? void 0 : n[e]) !== r[e]) return !1
        return !0
      }
    }
    getPluginOption(e, t) {
      var r
      return null == (r = this.plugins.get(e)) ? void 0 : r[t]
    }
  } {
    addComment(e) {
      this.filename && (e.loc.filename = this.filename),
        this.state.comments.push(e)
    }
    processComment(e) {
      const { commentStack: t } = this.state,
        r = t.length
      if (0 === r) return
      let n = r - 1
      const i = t[n]
      i.start === e.end && ((i.leadingNode = e), n--)
      const { start: a } = e
      for (; n >= 0; n--) {
        const r = t[n],
          i = r.end
        if (!(i > a)) {
          i === a && (r.trailingNode = e)
          break
        }
        ;(r.containingNode = e), this.finalizeComment(r), t.splice(n, 1)
      }
    }
    finalizeComment(e) {
      const { comments: t } = e
      if (null !== e.leadingNode || null !== e.trailingNode)
        null !== e.leadingNode && rf(e.leadingNode, t),
          null !== e.trailingNode &&
            (function (e, t) {
              void 0 === e.leadingComments
                ? (e.leadingComments = t)
                : e.leadingComments.unshift(...t)
            })(e.trailingNode, t)
      else {
        const { containingNode: r, start: n } = e
        if (44 === this.input.charCodeAt(n - 1))
          switch (r.type) {
            case 'ObjectExpression':
            case 'ObjectPattern':
            case 'RecordExpression':
              af(r, r.properties, e)
              break
            case 'CallExpression':
            case 'OptionalCallExpression':
              af(r, r.arguments, e)
              break
            case 'FunctionDeclaration':
            case 'FunctionExpression':
            case 'ArrowFunctionExpression':
            case 'ObjectMethod':
            case 'ClassMethod':
            case 'ClassPrivateMethod':
              af(r, r.params, e)
              break
            case 'ArrayExpression':
            case 'ArrayPattern':
            case 'TupleExpression':
              af(r, r.elements, e)
              break
            case 'ExportNamedDeclaration':
            case 'ImportDeclaration':
              af(r, r.specifiers, e)
              break
            default:
              nf(r, t)
          }
        else nf(r, t)
      }
    }
    finalizeRemainingComments() {
      const { commentStack: e } = this.state
      for (let t = e.length - 1; t >= 0; t--) this.finalizeComment(e[t])
      this.state.commentStack = []
    }
    resetPreviousNodeTrailingComments(e) {
      const { commentStack: t } = this.state,
        { length: r } = t
      if (0 === r) return
      const n = t[r - 1]
      n.leadingNode === e && (n.leadingNode = null)
    }
    takeSurroundingComments(e, t, r) {
      const { commentStack: n } = this.state,
        i = n.length
      if (0 === i) return
      let a = i - 1
      for (; a >= 0; a--) {
        const i = n[a],
          s = i.end
        if (i.start === r) i.leadingNode = e
        else if (s === t) i.trailingNode = e
        else if (s < t) break
      }
    }
  } {
    constructor(e, t) {
      super(),
        (this.isLookahead = void 0),
        (this.tokens = []),
        (this.state = new hf()),
        this.state.init(e),
        (this.input = t),
        (this.length = t.length),
        (this.isLookahead = !1)
    }
    pushToken(e) {
      ;(this.tokens.length = this.state.tokensLength),
        this.tokens.push(e),
        ++this.state.tokensLength
    }
    next() {
      this.checkKeywordEscapes(),
        this.options.tokens && this.pushToken(new vf(this.state)),
        (this.state.lastTokStart = this.state.start),
        (this.state.lastTokEndLoc = this.state.endLoc),
        (this.state.lastTokStartLoc = this.state.startLoc),
        this.nextToken()
    }
    eat(e) {
      return !!this.match(e) && (this.next(), !0)
    }
    match(e) {
      return this.state.type === e
    }
    createLookaheadState(e) {
      return {
        pos: e.pos,
        value: null,
        type: e.type,
        start: e.start,
        end: e.end,
        context: [this.curContext()],
        inType: e.inType,
        startLoc: e.startLoc,
        lastTokEndLoc: e.lastTokEndLoc,
        curLine: e.curLine,
        lineStart: e.lineStart,
        curPosition: e.curPosition,
      }
    }
    lookahead() {
      const e = this.state
      ;(this.state = this.createLookaheadState(e)),
        (this.isLookahead = !0),
        this.nextToken(),
        (this.isLookahead = !1)
      const t = this.state
      return (this.state = e), t
    }
    nextTokenStart() {
      return this.nextTokenStartSince(this.state.pos)
    }
    nextTokenStartSince(e) {
      return (cf.lastIndex = e), cf.test(this.input) ? cf.lastIndex : e
    }
    lookaheadCharCode() {
      return this.input.charCodeAt(this.nextTokenStart())
    }
    codePointAtPos(e) {
      let t = this.input.charCodeAt(e)
      if (55296 == (64512 & t) && ++e < this.input.length) {
        const r = this.input.charCodeAt(e)
        56320 == (64512 & r) && (t = 65536 + ((1023 & t) << 10) + (1023 & r))
      }
      return t
    }
    setStrict(e) {
      ;(this.state.strict = e),
        e &&
          (this.state.strictErrors.forEach(([e, t]) =>
            this.raise(e, { at: t })
          ),
          this.state.strictErrors.clear())
    }
    curContext() {
      return this.state.context[this.state.context.length - 1]
    }
    nextToken() {
      this.skipSpace(),
        (this.state.start = this.state.pos),
        this.isLookahead || (this.state.startLoc = this.state.curPosition()),
        this.state.pos >= this.length
          ? this.finishToken(135)
          : this.getTokenFromCode(this.codePointAtPos(this.state.pos))
    }
    skipBlockComment() {
      let e
      this.isLookahead || (e = this.state.curPosition())
      const t = this.state.pos,
        r = this.input.indexOf('*/', t + 2)
      if (-1 === r)
        throw this.raise(Xh.UnterminatedComment, {
          at: this.state.curPosition(),
        })
      for (
        this.state.pos = r + 2, of.lastIndex = t + 2;
        of.test(this.input) && of.lastIndex <= r;

      )
        ++this.state.curLine, (this.state.lineStart = of.lastIndex)
      if (this.isLookahead) return
      const n = {
        type: 'CommentBlock',
        value: this.input.slice(t + 2, r),
        start: t,
        end: r + 2,
        loc: new Lh(e, this.state.curPosition()),
      }
      return this.options.tokens && this.pushToken(n), n
    }
    skipLineComment(e) {
      const t = this.state.pos
      let r
      this.isLookahead || (r = this.state.curPosition())
      let n = this.input.charCodeAt((this.state.pos += e))
      if (this.state.pos < this.length)
        for (; !lf(n) && ++this.state.pos < this.length; )
          n = this.input.charCodeAt(this.state.pos)
      if (this.isLookahead) return
      const i = this.state.pos,
        a = {
          type: 'CommentLine',
          value: this.input.slice(t + e, i),
          start: t,
          end: i,
          loc: new Lh(r, this.state.curPosition()),
        }
      return this.options.tokens && this.pushToken(a), a
    }
    skipSpace() {
      const e = this.state.pos,
        t = []
      e: for (; this.state.pos < this.length; ) {
        const r = this.input.charCodeAt(this.state.pos)
        switch (r) {
          case 32:
          case 160:
          case 9:
            ++this.state.pos
            break
          case 13:
            10 === this.input.charCodeAt(this.state.pos + 1) && ++this.state.pos
          case 10:
          case 8232:
          case 8233:
            ++this.state.pos,
              ++this.state.curLine,
              (this.state.lineStart = this.state.pos)
            break
          case 47:
            switch (this.input.charCodeAt(this.state.pos + 1)) {
              case 42: {
                const e = this.skipBlockComment()
                void 0 !== e &&
                  (this.addComment(e), this.options.attachComment && t.push(e))
                break
              }
              case 47: {
                const e = this.skipLineComment(2)
                void 0 !== e &&
                  (this.addComment(e), this.options.attachComment && t.push(e))
                break
              }
              default:
                break e
            }
            break
          default:
            if (pf(r)) ++this.state.pos
            else if (45 !== r || this.inModule) {
              if (60 !== r || this.inModule) break e
              {
                const e = this.state.pos
                if (
                  33 !== this.input.charCodeAt(e + 1) ||
                  45 !== this.input.charCodeAt(e + 2) ||
                  45 !== this.input.charCodeAt(e + 3)
                )
                  break e
                {
                  const e = this.skipLineComment(4)
                  void 0 !== e &&
                    (this.addComment(e),
                    this.options.attachComment && t.push(e))
                }
              }
            } else {
              const r = this.state.pos
              if (
                45 !== this.input.charCodeAt(r + 1) ||
                62 !== this.input.charCodeAt(r + 2) ||
                !(0 === e || this.state.lineStart > e)
              )
                break e
              {
                const e = this.skipLineComment(3)
                void 0 !== e &&
                  (this.addComment(e), this.options.attachComment && t.push(e))
              }
            }
        }
      }
      if (t.length > 0) {
        const r = {
          start: e,
          end: this.state.pos,
          comments: t,
          leadingNode: null,
          trailingNode: null,
          containingNode: null,
        }
        this.state.commentStack.push(r)
      }
    }
    finishToken(e, t) {
      ;(this.state.end = this.state.pos),
        (this.state.endLoc = this.state.curPosition())
      const r = this.state.type
      ;(this.state.type = e),
        (this.state.value = t),
        this.isLookahead || this.updateContext(r)
    }
    replaceToken(e) {
      ;(this.state.type = e), this.updateContext()
    }
    readToken_numberSign() {
      if (0 === this.state.pos && this.readToken_interpreter()) return
      const e = this.state.pos + 1,
        t = this.codePointAtPos(e)
      if (t >= 48 && t <= 57)
        throw this.raise(Xh.UnexpectedDigitAfterHash, {
          at: this.state.curPosition(),
        })
      if (123 === t || (91 === t && this.hasPlugin('recordAndTuple'))) {
        if (
          (this.expectPlugin('recordAndTuple'),
          'hash' !== this.getPluginOption('recordAndTuple', 'syntaxType'))
        )
          throw this.raise(
            123 === t
              ? Xh.RecordExpressionHashIncorrectStartSyntaxType
              : Xh.TupleExpressionHashIncorrectStartSyntaxType,
            { at: this.state.curPosition() }
          )
        ;(this.state.pos += 2),
          123 === t ? this.finishToken(7) : this.finishToken(1)
      } else Dd(t) ? (++this.state.pos, this.finishToken(134, this.readWord1(t))) : 92 === t ? (++this.state.pos, this.finishToken(134, this.readWord1())) : this.finishOp(27, 1)
    }
    readToken_dot() {
      const e = this.input.charCodeAt(this.state.pos + 1)
      e >= 48 && e <= 57
        ? this.readNumber(!0)
        : 46 === e && 46 === this.input.charCodeAt(this.state.pos + 2)
        ? ((this.state.pos += 3), this.finishToken(21))
        : (++this.state.pos, this.finishToken(16))
    }
    readToken_slash() {
      61 === this.input.charCodeAt(this.state.pos + 1)
        ? this.finishOp(31, 2)
        : this.finishOp(56, 1)
    }
    readToken_interpreter() {
      if (0 !== this.state.pos || this.length < 2) return !1
      let e = this.input.charCodeAt(this.state.pos + 1)
      if (33 !== e) return !1
      const t = this.state.pos
      for (this.state.pos += 1; !lf(e) && ++this.state.pos < this.length; )
        e = this.input.charCodeAt(this.state.pos)
      const r = this.input.slice(t + 2, this.state.pos)
      return this.finishToken(28, r), !0
    }
    readToken_mult_modulo(e) {
      let t = 42 === e ? 55 : 54,
        r = 1,
        n = this.input.charCodeAt(this.state.pos + 1)
      42 === e &&
        42 === n &&
        (r++, (n = this.input.charCodeAt(this.state.pos + 2)), (t = 57)),
        61 !== n || this.state.inType || (r++, (t = 37 === e ? 33 : 30)),
        this.finishOp(t, r)
    }
    readToken_pipe_amp(e) {
      const t = this.input.charCodeAt(this.state.pos + 1)
      if (t !== e) {
        if (124 === e) {
          if (62 === t) return void this.finishOp(39, 2)
          if (this.hasPlugin('recordAndTuple') && 125 === t) {
            if ('bar' !== this.getPluginOption('recordAndTuple', 'syntaxType'))
              throw this.raise(Xh.RecordExpressionBarIncorrectEndSyntaxType, {
                at: this.state.curPosition(),
              })
            return (this.state.pos += 2), void this.finishToken(9)
          }
          if (this.hasPlugin('recordAndTuple') && 93 === t) {
            if ('bar' !== this.getPluginOption('recordAndTuple', 'syntaxType'))
              throw this.raise(Xh.TupleExpressionBarIncorrectEndSyntaxType, {
                at: this.state.curPosition(),
              })
            return (this.state.pos += 2), void this.finishToken(4)
          }
        }
        61 !== t ? this.finishOp(124 === e ? 43 : 45, 1) : this.finishOp(30, 2)
      } else 61 === this.input.charCodeAt(this.state.pos + 2) ? this.finishOp(30, 3) : this.finishOp(124 === e ? 41 : 42, 2)
    }
    readToken_caret() {
      const e = this.input.charCodeAt(this.state.pos + 1)
      if (61 !== e || this.state.inType)
        if (
          94 === e &&
          this.hasPlugin([
            'pipelineOperator',
            { proposal: 'hack', topicToken: '^^' },
          ])
        ) {
          this.finishOp(37, 2)
          if (94 === this.input.codePointAt(this.state.pos))
            throw this.unexpected()
        } else this.finishOp(44, 1)
      else this.finishOp(32, 2)
    }
    readToken_atSign() {
      64 === this.input.charCodeAt(this.state.pos + 1) &&
      this.hasPlugin([
        'pipelineOperator',
        { proposal: 'hack', topicToken: '@@' },
      ])
        ? this.finishOp(38, 2)
        : this.finishOp(26, 1)
    }
    readToken_plus_min(e) {
      const t = this.input.charCodeAt(this.state.pos + 1)
      t !== e
        ? 61 === t
          ? this.finishOp(30, 2)
          : this.finishOp(53, 1)
        : this.finishOp(34, 2)
    }
    readToken_lt() {
      const { pos: e } = this.state,
        t = this.input.charCodeAt(e + 1)
      if (60 === t)
        return 61 === this.input.charCodeAt(e + 2)
          ? void this.finishOp(30, 3)
          : void this.finishOp(51, 2)
      61 !== t ? this.finishOp(47, 1) : this.finishOp(49, 2)
    }
    readToken_gt() {
      const { pos: e } = this.state,
        t = this.input.charCodeAt(e + 1)
      if (62 === t) {
        const t = 62 === this.input.charCodeAt(e + 2) ? 3 : 2
        return 61 === this.input.charCodeAt(e + t)
          ? void this.finishOp(30, t + 1)
          : void this.finishOp(52, t)
      }
      61 !== t ? this.finishOp(48, 1) : this.finishOp(49, 2)
    }
    readToken_eq_excl(e) {
      const t = this.input.charCodeAt(this.state.pos + 1)
      if (61 !== t)
        return 61 === e && 62 === t
          ? ((this.state.pos += 2), void this.finishToken(19))
          : void this.finishOp(61 === e ? 29 : 35, 1)
      this.finishOp(
        46,
        61 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2
      )
    }
    readToken_question() {
      const e = this.input.charCodeAt(this.state.pos + 1),
        t = this.input.charCodeAt(this.state.pos + 2)
      63 === e
        ? 61 === t
          ? this.finishOp(30, 3)
          : this.finishOp(40, 2)
        : 46 !== e || (t >= 48 && t <= 57)
        ? (++this.state.pos, this.finishToken(17))
        : ((this.state.pos += 2), this.finishToken(18))
    }
    getTokenFromCode(e) {
      switch (e) {
        case 46:
          return void this.readToken_dot()
        case 40:
          return ++this.state.pos, void this.finishToken(10)
        case 41:
          return ++this.state.pos, void this.finishToken(11)
        case 59:
          return ++this.state.pos, void this.finishToken(13)
        case 44:
          return ++this.state.pos, void this.finishToken(12)
        case 91:
          if (
            this.hasPlugin('recordAndTuple') &&
            124 === this.input.charCodeAt(this.state.pos + 1)
          ) {
            if ('bar' !== this.getPluginOption('recordAndTuple', 'syntaxType'))
              throw this.raise(Xh.TupleExpressionBarIncorrectStartSyntaxType, {
                at: this.state.curPosition(),
              })
            ;(this.state.pos += 2), this.finishToken(2)
          } else ++this.state.pos, this.finishToken(0)
          return
        case 93:
          return ++this.state.pos, void this.finishToken(3)
        case 123:
          if (
            this.hasPlugin('recordAndTuple') &&
            124 === this.input.charCodeAt(this.state.pos + 1)
          ) {
            if ('bar' !== this.getPluginOption('recordAndTuple', 'syntaxType'))
              throw this.raise(Xh.RecordExpressionBarIncorrectStartSyntaxType, {
                at: this.state.curPosition(),
              })
            ;(this.state.pos += 2), this.finishToken(6)
          } else ++this.state.pos, this.finishToken(5)
          return
        case 125:
          return ++this.state.pos, void this.finishToken(8)
        case 58:
          return void (this.hasPlugin('functionBind') &&
          58 === this.input.charCodeAt(this.state.pos + 1)
            ? this.finishOp(15, 2)
            : (++this.state.pos, this.finishToken(14)))
        case 63:
          return void this.readToken_question()
        case 96:
          return void this.readTemplateToken()
        case 48: {
          const e = this.input.charCodeAt(this.state.pos + 1)
          if (120 === e || 88 === e) return void this.readRadixNumber(16)
          if (111 === e || 79 === e) return void this.readRadixNumber(8)
          if (98 === e || 66 === e) return void this.readRadixNumber(2)
        }
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          return void this.readNumber(!1)
        case 34:
        case 39:
          return void this.readString(e)
        case 47:
          return void this.readToken_slash()
        case 37:
        case 42:
          return void this.readToken_mult_modulo(e)
        case 124:
        case 38:
          return void this.readToken_pipe_amp(e)
        case 94:
          return void this.readToken_caret()
        case 43:
        case 45:
          return void this.readToken_plus_min(e)
        case 60:
          return void this.readToken_lt()
        case 62:
          return void this.readToken_gt()
        case 61:
        case 33:
          return void this.readToken_eq_excl(e)
        case 126:
          return void this.finishOp(36, 1)
        case 64:
          return void this.readToken_atSign()
        case 35:
          return void this.readToken_numberSign()
        case 92:
          return void this.readWord()
        default:
          if (Dd(e)) return void this.readWord(e)
      }
      throw this.raise(Xh.InvalidOrUnexpectedToken, {
        at: this.state.curPosition(),
        unexpected: String.fromCodePoint(e),
      })
    }
    finishOp(e, t) {
      const r = this.input.slice(this.state.pos, this.state.pos + t)
      ;(this.state.pos += t), this.finishToken(e, r)
    }
    readRegexp() {
      const e = this.state.startLoc,
        t = this.state.start + 1
      let r,
        n,
        { pos: i } = this.state
      for (; ; ++i) {
        if (i >= this.length)
          throw this.raise(Xh.UnterminatedRegExp, { at: Bh(e, 1) })
        const t = this.input.charCodeAt(i)
        if (lf(t)) throw this.raise(Xh.UnterminatedRegExp, { at: Bh(e, 1) })
        if (r) r = !1
        else {
          if (91 === t) n = !0
          else if (93 === t && n) n = !1
          else if (47 === t && !n) break
          r = 92 === t
        }
      }
      const a = this.input.slice(t, i)
      ++i
      let s = ''
      const o = () => Bh(e, i + 2 - t)
      for (; i < this.length; ) {
        const e = this.codePointAtPos(i),
          t = String.fromCharCode(e)
        if (yf.has(e))
          118 === e
            ? (this.expectPlugin('regexpUnicodeSets', o()),
              s.includes('u') &&
                this.raise(Xh.IncompatibleRegExpUVFlags, { at: o() }))
            : 117 === e &&
              s.includes('v') &&
              this.raise(Xh.IncompatibleRegExpUVFlags, { at: o() }),
            s.includes(t) && this.raise(Xh.DuplicateRegExpFlags, { at: o() })
        else {
          if (!Ld(e) && 92 !== e) break
          this.raise(Xh.MalformedRegExpFlags, { at: o() })
        }
        ++i, (s += t)
      }
      ;(this.state.pos = i), this.finishToken(133, { pattern: a, flags: s })
    }
    readInt(e, t, r, n = !0) {
      const i = this.state.pos,
        a = 16 === e ? gf.hex : gf.decBinOct,
        s = 16 === e ? bf.hex : 10 === e ? bf.dec : 8 === e ? bf.oct : bf.bin
      let o = !1,
        l = 0
      for (let i = 0, c = null == t ? 1 / 0 : t; i < c; ++i) {
        const t = this.input.charCodeAt(this.state.pos)
        let i
        if (95 !== t || 'bail' === n) {
          if (
            ((i =
              t >= 97
                ? t - 97 + 10
                : t >= 65
                ? t - 65 + 10
                : mf(t)
                ? t - 48
                : 1 / 0),
            i >= e)
          )
            if (this.options.errorRecovery && i <= 9)
              (i = 0),
                this.raise(Xh.InvalidDigit, {
                  at: this.state.curPosition(),
                  radix: e,
                })
            else {
              if (!r) break
              ;(i = 0), (o = !0)
            }
          ++this.state.pos, (l = l * e + i)
        } else {
          const e = this.input.charCodeAt(this.state.pos - 1),
            t = this.input.charCodeAt(this.state.pos + 1)
          n
            ? (Number.isNaN(t) || !s.has(t) || a.has(e) || a.has(t)) &&
              this.raise(Xh.UnexpectedNumericSeparator, {
                at: this.state.curPosition(),
              })
            : this.raise(Xh.NumericSeparatorInEscapeSequence, {
                at: this.state.curPosition(),
              }),
            ++this.state.pos
        }
      }
      return this.state.pos === i ||
        (null != t && this.state.pos - i !== t) ||
        o
        ? null
        : l
    }
    readRadixNumber(e) {
      const t = this.state.curPosition()
      let r = !1
      this.state.pos += 2
      const n = this.readInt(e)
      null == n && this.raise(Xh.InvalidDigit, { at: Bh(t, 2), radix: e })
      const i = this.input.charCodeAt(this.state.pos)
      if (110 === i) ++this.state.pos, (r = !0)
      else if (109 === i) throw this.raise(Xh.InvalidDecimal, { at: t })
      if (Dd(this.codePointAtPos(this.state.pos)))
        throw this.raise(Xh.NumberIdentifier, { at: this.state.curPosition() })
      if (r) {
        const e = this.input.slice(t.index, this.state.pos).replace(/[_n]/g, '')
        this.finishToken(131, e)
      } else this.finishToken(130, n)
    }
    readNumber(e) {
      const t = this.state.pos,
        r = this.state.curPosition()
      let n = !1,
        i = !1,
        a = !1,
        s = !1,
        o = !1
      e ||
        null !== this.readInt(10) ||
        this.raise(Xh.InvalidNumber, { at: this.state.curPosition() })
      const l = this.state.pos - t >= 2 && 48 === this.input.charCodeAt(t)
      if (l) {
        const e = this.input.slice(t, this.state.pos)
        if (
          (this.recordStrictModeErrors(Xh.StrictOctalLiteral, { at: r }),
          !this.state.strict)
        ) {
          const t = e.indexOf('_')
          t > 0 && this.raise(Xh.ZeroDigitNumericSeparator, { at: Bh(r, t) })
        }
        o = l && !/[89]/.test(e)
      }
      let c = this.input.charCodeAt(this.state.pos)
      if (
        (46 !== c ||
          o ||
          (++this.state.pos,
          this.readInt(10),
          (n = !0),
          (c = this.input.charCodeAt(this.state.pos))),
        (69 !== c && 101 !== c) ||
          o ||
          ((c = this.input.charCodeAt(++this.state.pos)),
          (43 !== c && 45 !== c) || ++this.state.pos,
          null === this.readInt(10) &&
            this.raise(Xh.InvalidOrMissingExponent, { at: r }),
          (n = !0),
          (s = !0),
          (c = this.input.charCodeAt(this.state.pos))),
        110 === c &&
          ((n || l) && this.raise(Xh.InvalidBigIntLiteral, { at: r }),
          ++this.state.pos,
          (i = !0)),
        109 === c &&
          (this.expectPlugin('decimal', this.state.curPosition()),
          (s || l) && this.raise(Xh.InvalidDecimal, { at: r }),
          ++this.state.pos,
          (a = !0)),
        Dd(this.codePointAtPos(this.state.pos)))
      )
        throw this.raise(Xh.NumberIdentifier, { at: this.state.curPosition() })
      const u = this.input.slice(t, this.state.pos).replace(/[_mn]/g, '')
      if (i) return void this.finishToken(131, u)
      if (a) return void this.finishToken(132, u)
      const p = o ? parseInt(u, 8) : parseFloat(u)
      this.finishToken(130, p)
    }
    readCodePoint(e) {
      let t
      if (123 === this.input.charCodeAt(this.state.pos)) {
        if (
          (++this.state.pos,
          (t = this.readHexChar(
            this.input.indexOf('}', this.state.pos) - this.state.pos,
            !0,
            e
          )),
          ++this.state.pos,
          null !== t && t > 1114111)
        ) {
          if (!e) return null
          this.raise(Xh.InvalidCodePoint, { at: this.state.curPosition() })
        }
      } else t = this.readHexChar(4, !1, e)
      return t
    }
    readString(e) {
      let t = '',
        r = ++this.state.pos
      for (;;) {
        if (this.state.pos >= this.length)
          throw this.raise(Xh.UnterminatedString, { at: this.state.startLoc })
        const n = this.input.charCodeAt(this.state.pos)
        if (n === e) break
        if (92 === n)
          (t += this.input.slice(r, this.state.pos)),
            (t += this.readEscapedChar(!1)),
            (r = this.state.pos)
        else if (8232 === n || 8233 === n)
          ++this.state.pos,
            ++this.state.curLine,
            (this.state.lineStart = this.state.pos)
        else {
          if (lf(n))
            throw this.raise(Xh.UnterminatedString, { at: this.state.startLoc })
          ++this.state.pos
        }
      }
      ;(t += this.input.slice(r, this.state.pos++)), this.finishToken(129, t)
    }
    readTemplateContinuation() {
      this.match(8) || this.unexpected(null, 8),
        this.state.pos--,
        this.readTemplateToken()
    }
    readTemplateToken() {
      let e = '',
        t = this.state.pos,
        r = !1
      for (++this.state.pos; ; ) {
        if (this.state.pos >= this.length)
          throw this.raise(Xh.UnterminatedTemplate, {
            at: Bh(this.state.startLoc, 1),
          })
        const n = this.input.charCodeAt(this.state.pos)
        if (96 === n)
          return (
            ++this.state.pos,
            (e += this.input.slice(t, this.state.pos)),
            void this.finishToken(24, r ? null : e)
          )
        if (36 === n && 123 === this.input.charCodeAt(this.state.pos + 1))
          return (
            (this.state.pos += 2),
            (e += this.input.slice(t, this.state.pos)),
            void this.finishToken(25, r ? null : e)
          )
        if (92 === n) {
          e += this.input.slice(t, this.state.pos)
          const n = this.readEscapedChar(!0)
          null === n ? (r = !0) : (e += n), (t = this.state.pos)
        } else if (lf(n)) {
          switch (
            ((e += this.input.slice(t, this.state.pos)), ++this.state.pos, n)
          ) {
            case 13:
              10 === this.input.charCodeAt(this.state.pos) && ++this.state.pos
            case 10:
              e += '\n'
              break
            default:
              e += String.fromCharCode(n)
          }
          ++this.state.curLine,
            (this.state.lineStart = this.state.pos),
            (t = this.state.pos)
        } else ++this.state.pos
      }
    }
    recordStrictModeErrors(e, { at: t }) {
      const r = t.index
      this.state.strict && !this.state.strictErrors.has(r)
        ? this.raise(e, { at: t })
        : this.state.strictErrors.set(r, [e, t])
    }
    readEscapedChar(e) {
      const t = !e,
        r = this.input.charCodeAt(++this.state.pos)
      switch ((++this.state.pos, r)) {
        case 110:
          return '\n'
        case 114:
          return '\r'
        case 120: {
          const e = this.readHexChar(2, !1, t)
          return null === e ? null : String.fromCharCode(e)
        }
        case 117: {
          const e = this.readCodePoint(t)
          return null === e ? null : String.fromCodePoint(e)
        }
        case 116:
          return '\t'
        case 98:
          return '\b'
        case 118:
          return '\v'
        case 102:
          return '\f'
        case 13:
          10 === this.input.charCodeAt(this.state.pos) && ++this.state.pos
        case 10:
          ;(this.state.lineStart = this.state.pos), ++this.state.curLine
        case 8232:
        case 8233:
          return ''
        case 56:
        case 57:
          if (e) return null
          this.recordStrictModeErrors(Xh.StrictNumericEscape, {
            at: Bh(this.state.curPosition(), -1),
          })
        default:
          if (r >= 48 && r <= 55) {
            const t = Bh(this.state.curPosition(), -1)
            let r = this.input
                .substr(this.state.pos - 1, 3)
                .match(/^[0-7]+/)[0],
              n = parseInt(r, 8)
            n > 255 && ((r = r.slice(0, -1)), (n = parseInt(r, 8))),
              (this.state.pos += r.length - 1)
            const i = this.input.charCodeAt(this.state.pos)
            if ('0' !== r || 56 === i || 57 === i) {
              if (e) return null
              this.recordStrictModeErrors(Xh.StrictNumericEscape, { at: t })
            }
            return String.fromCharCode(n)
          }
          return String.fromCharCode(r)
      }
    }
    readHexChar(e, t, r) {
      const n = this.state.curPosition(),
        i = this.readInt(16, e, t, !1)
      return (
        null === i &&
          (r
            ? this.raise(Xh.InvalidEscapeSequence, { at: n })
            : (this.state.pos = n.index - 1)),
        i
      )
    }
    readWord1(e) {
      this.state.containsEsc = !1
      let t = ''
      const r = this.state.pos
      let n = this.state.pos
      for (
        void 0 !== e && (this.state.pos += e <= 65535 ? 1 : 2);
        this.state.pos < this.length;

      ) {
        const e = this.codePointAtPos(this.state.pos)
        if (Ld(e)) this.state.pos += e <= 65535 ? 1 : 2
        else {
          if (92 !== e) break
          {
            ;(this.state.containsEsc = !0),
              (t += this.input.slice(n, this.state.pos))
            const e = this.state.curPosition(),
              i = this.state.pos === r ? Dd : Ld
            if (117 !== this.input.charCodeAt(++this.state.pos)) {
              this.raise(Xh.MissingUnicodeEscape, {
                at: this.state.curPosition(),
              }),
                (n = this.state.pos - 1)
              continue
            }
            ++this.state.pos
            const a = this.readCodePoint(!0)
            null !== a &&
              (i(a) || this.raise(Xh.EscapedCharNotAnIdentifier, { at: e }),
              (t += String.fromCodePoint(a))),
              (n = this.state.pos)
          }
        }
      }
      return t + this.input.slice(n, this.state.pos)
    }
    readWord(e) {
      const t = this.readWord1(e),
        r = od.get(t)
      void 0 !== r ? this.finishToken(r, Cd(r)) : this.finishToken(128, t)
    }
    checkKeywordEscapes() {
      const { type: e } = this.state
      Td(e) &&
        this.state.containsEsc &&
        this.raise(Xh.InvalidEscapedReservedWord, {
          at: this.state.startLoc,
          reservedWord: Cd(e),
        })
    }
    raise(e, t) {
      const { at: r } = t,
        n = Mh(t, df),
        i = e({ loc: r instanceof Dh ? r : r.loc.start, details: n })
      if (!this.options.errorRecovery) throw i
      return this.isLookahead || this.state.errors.push(i), i
    }
    raiseOverwrite(e, t) {
      const { at: r } = t,
        n = Mh(t, ff),
        i = r instanceof Dh ? r : r.loc.start,
        a = i.index,
        s = this.state.errors
      for (let t = s.length - 1; t >= 0; t--) {
        const r = s[t]
        if (r.loc.index === a) return (s[t] = e({ loc: i, details: n }))
        if (r.loc.index < a) break
      }
      return this.raise(e, t)
    }
    updateContext(e) {}
    unexpected(e, t) {
      throw this.raise(Xh.UnexpectedToken, {
        expected: t ? Cd(t) : null,
        at: null != e ? e : this.state.startLoc,
      })
    }
    expectPlugin(e, t) {
      if (this.hasPlugin(e)) return !0
      throw this.raise(Xh.MissingPlugin, {
        at: null != t ? t : this.state.startLoc,
        missingPlugin: [e],
      })
    }
    expectOnePlugin(e) {
      if (!e.some((e) => this.hasPlugin(e)))
        throw this.raise(Xh.MissingOneOfPlugins, {
          at: this.state.startLoc,
          missingPlugin: e,
        })
    }
  } {
    addExtra(e, t, r, n = !0) {
      if (!e) return
      const i = (e.extra = e.extra || {})
      n ? (i[t] = r) : Object.defineProperty(i, t, { enumerable: n, value: r })
    }
    isContextual(e) {
      return this.state.type === e && !this.state.containsEsc
    }
    isUnparsedContextual(e, t) {
      const r = e + t.length
      if (this.input.slice(e, r) === t) {
        const e = this.input.charCodeAt(r)
        return !(Ld(e) || 55296 == (64512 & e))
      }
      return !1
    }
    isLookaheadContextual(e) {
      const t = this.nextTokenStart()
      return this.isUnparsedContextual(t, e)
    }
    eatContextual(e) {
      return !!this.isContextual(e) && (this.next(), !0)
    }
    expectContextual(e, t) {
      if (!this.eatContextual(e)) {
        if (null != t) throw this.raise(t, { at: this.state.startLoc })
        throw this.unexpected(null, e)
      }
    }
    canInsertSemicolon() {
      return this.match(135) || this.match(8) || this.hasPrecedingLineBreak()
    }
    hasPrecedingLineBreak() {
      return sf.test(
        this.input.slice(this.state.lastTokEndLoc.index, this.state.start)
      )
    }
    hasFollowingLineBreak() {
      return (uf.lastIndex = this.state.end), uf.test(this.input)
    }
    isLineTerminator() {
      return this.eat(13) || this.canInsertSemicolon()
    }
    semicolon(e = !0) {
      ;(e ? this.isLineTerminator() : this.eat(13)) ||
        this.raise(Xh.MissingSemicolon, { at: this.state.lastTokEndLoc })
    }
    expect(e, t) {
      this.eat(e) || this.unexpected(t, e)
    }
    tryParse(e, t = this.state.clone()) {
      const r = { node: null }
      try {
        const n = e((e = null) => {
          throw ((r.node = e), r)
        })
        if (this.state.errors.length > t.errors.length) {
          const e = this.state
          return (
            (this.state = t),
            (this.state.tokensLength = e.tokensLength),
            {
              node: n,
              error: e.errors[t.errors.length],
              thrown: !1,
              aborted: !1,
              failState: e,
            }
          )
        }
        return {
          node: n,
          error: null,
          thrown: !1,
          aborted: !1,
          failState: null,
        }
      } catch (e) {
        const n = this.state
        if (((this.state = t), e instanceof SyntaxError))
          return { node: null, error: e, thrown: !0, aborted: !1, failState: n }
        if (e === r)
          return {
            node: r.node,
            error: null,
            thrown: !1,
            aborted: !0,
            failState: n,
          }
        throw e
      }
    }
    checkExpressionErrors(e, t) {
      if (!e) return !1
      const {
        shorthandAssignLoc: r,
        doubleProtoLoc: n,
        privateKeyLoc: i,
        optionalParametersLoc: a,
      } = e
      if (!t) return !!(r || n || a || i)
      null != r && this.raise(Xh.InvalidCoverInitializedName, { at: r }),
        null != n && this.raise(Xh.DuplicateProto, { at: n }),
        null != i && this.raise(Xh.UnexpectedPrivateField, { at: i }),
        null != a && this.unexpected(a)
    }
    isLiteralPropertyName() {
      return Ed(this.state.type)
    }
    isPrivateName(e) {
      return 'PrivateName' === e.type
    }
    getPrivateNameSV(e) {
      return e.id.name
    }
    hasPropertyAsPrivateName(e) {
      return (
        ('MemberExpression' === e.type ||
          'OptionalMemberExpression' === e.type) &&
        this.isPrivateName(e.property)
      )
    }
    isOptionalChain(e) {
      return (
        'OptionalMemberExpression' === e.type ||
        'OptionalCallExpression' === e.type
      )
    }
    isObjectProperty(e) {
      return 'ObjectProperty' === e.type
    }
    isObjectMethod(e) {
      return 'ObjectMethod' === e.type
    }
    initializeScopes(e = 'module' === this.options.sourceType) {
      const t = this.state.labels
      this.state.labels = []
      const r = this.exportedIdentifiers
      this.exportedIdentifiers = new Set()
      const n = this.inModule
      this.inModule = e
      const i = this.scope,
        a = this.getScopeHandler()
      this.scope = new a(this, e)
      const s = this.prodParam
      this.prodParam = new Nf()
      const o = this.classScope
      this.classScope = new Tf(this)
      const l = this.expressionScope
      return (
        (this.expressionScope = new Rf(this)),
        () => {
          ;(this.state.labels = t),
            (this.exportedIdentifiers = r),
            (this.inModule = n),
            (this.scope = i),
            (this.prodParam = s),
            (this.classScope = o),
            (this.expressionScope = l)
        }
      )
    }
    enterInitialScopes() {
      let e = 0
      this.inModule && (e |= 2), this.scope.enter(1), this.prodParam.enter(e)
    }
    checkDestructuringPrivate(e) {
      const { privateKeyLoc: t } = e
      null !== t && this.expectPlugin('destructuringPrivate', t)
    }
  } {
    startNode() {
      return new Ff(this, this.state.start, this.state.startLoc)
    }
    startNodeAt(e, t) {
      return new Ff(this, e, t)
    }
    startNodeAtNode(e) {
      return this.startNodeAt(e.start, e.loc.start)
    }
    finishNode(e, t) {
      return this.finishNodeAt(e, t, this.state.lastTokEndLoc)
    }
    finishNodeAt(e, t, r) {
      return (
        (e.type = t),
        (e.end = r.index),
        (e.loc.end = r),
        this.options.ranges && (e.range[1] = r.index),
        this.options.attachComment && this.processComment(e),
        e
      )
    }
    resetStartLocation(e, t, r) {
      ;(e.start = t), (e.loc.start = r), this.options.ranges && (e.range[0] = t)
    }
    resetEndLocation(e, t = this.state.lastTokEndLoc) {
      ;(e.end = t.index),
        (e.loc.end = t),
        this.options.ranges && (e.range[1] = t.index)
    }
    resetStartLocationFromNode(e, t) {
      this.resetStartLocation(e, t.start, t.loc.start)
    }
  } {
    toAssignable(e, t = !1) {
      var r, n
      let i
      switch (
        (('ParenthesizedExpression' === e.type ||
          (null != (r = e.extra) && r.parenthesized)) &&
          ((i = cm(e)),
          t
            ? 'Identifier' === i.type
              ? this.expressionScope.recordParenthesizedIdentifierError({
                  at: e,
                })
              : 'MemberExpression' !== i.type &&
                this.raise(Xh.InvalidParenthesizedAssignment, { at: e })
            : this.raise(Xh.InvalidParenthesizedAssignment, { at: e })),
        e.type)
      ) {
        case 'Identifier':
        case 'ObjectPattern':
        case 'ArrayPattern':
        case 'AssignmentPattern':
        case 'RestElement':
          break
        case 'ObjectExpression':
          e.type = 'ObjectPattern'
          for (let r = 0, n = e.properties.length, i = n - 1; r < n; r++) {
            var a
            const n = e.properties[r],
              s = r === i
            this.toAssignableObjectExpressionProp(n, s, t),
              s &&
                'RestElement' === n.type &&
                null != (a = e.extra) &&
                a.trailingCommaLoc &&
                this.raise(Xh.RestTrailingComma, {
                  at: e.extra.trailingCommaLoc,
                })
          }
          break
        case 'ObjectProperty': {
          const { key: r, value: n } = e
          this.isPrivateName(r) &&
            this.classScope.usePrivateName(
              this.getPrivateNameSV(r),
              r.loc.start
            ),
            this.toAssignable(n, t)
          break
        }
        case 'SpreadElement': {
          this.checkToRestConversion(e), (e.type = 'RestElement')
          const r = e.argument
          this.toAssignable(r, t)
          break
        }
        case 'ArrayExpression':
          ;(e.type = 'ArrayPattern'),
            this.toAssignableList(
              e.elements,
              null == (n = e.extra) ? void 0 : n.trailingCommaLoc,
              t
            )
          break
        case 'AssignmentExpression':
          '=' !== e.operator &&
            this.raise(Xh.MissingEqInAssignment, { at: e.left.loc.end }),
            (e.type = 'AssignmentPattern'),
            delete e.operator,
            this.toAssignable(e.left, t)
          break
        case 'ParenthesizedExpression':
          this.toAssignable(i, t)
      }
      return e
    }
    toAssignableObjectExpressionProp(e, t, r) {
      'ObjectMethod' === e.type
        ? this.raise(
            'get' === e.kind || 'set' === e.kind
              ? Xh.PatternHasAccessor
              : Xh.PatternHasMethod,
            { at: e.key }
          )
        : 'SpreadElement' !== e.type || t
        ? this.toAssignable(e, r)
        : this.raise(Xh.RestTrailingComma, { at: e })
    }
    toAssignableList(e, t, r) {
      let n = e.length
      if (n) {
        const i = e[n - 1]
        if ('RestElement' === (null == i ? void 0 : i.type)) --n
        else if ('SpreadElement' === (null == i ? void 0 : i.type)) {
          i.type = 'RestElement'
          let e = i.argument
          this.toAssignable(e, r),
            (e = cm(e)),
            'Identifier' !== e.type &&
              'MemberExpression' !== e.type &&
              'ArrayPattern' !== e.type &&
              'ObjectPattern' !== e.type &&
              this.unexpected(e.start),
            t && this.raise(Xh.RestTrailingComma, { at: t }),
            --n
        }
      }
      for (let t = 0; t < n; t++) {
        const n = e[t]
        n &&
          (this.toAssignable(n, r),
          'RestElement' === n.type &&
            this.raise(Xh.RestTrailingComma, { at: n }))
      }
      return e
    }
    isAssignable(e, t) {
      switch (e.type) {
        case 'Identifier':
        case 'ObjectPattern':
        case 'ArrayPattern':
        case 'AssignmentPattern':
        case 'RestElement':
          return !0
        case 'ObjectExpression': {
          const t = e.properties.length - 1
          return e.properties.every(
            (e, r) =>
              'ObjectMethod' !== e.type &&
              (r === t || 'SpreadElement' !== e.type) &&
              this.isAssignable(e)
          )
        }
        case 'ObjectProperty':
          return this.isAssignable(e.value)
        case 'SpreadElement':
          return this.isAssignable(e.argument)
        case 'ArrayExpression':
          return e.elements.every((e) => null === e || this.isAssignable(e))
        case 'AssignmentExpression':
          return '=' === e.operator
        case 'ParenthesizedExpression':
          return this.isAssignable(e.expression)
        case 'MemberExpression':
        case 'OptionalMemberExpression':
          return !t
        default:
          return !1
      }
    }
    toReferencedList(e, t) {
      return e
    }
    toReferencedListDeep(e, t) {
      this.toReferencedList(e, t)
      for (const t of e)
        'ArrayExpression' === (null == t ? void 0 : t.type) &&
          this.toReferencedListDeep(t.elements)
    }
    parseSpread(e, t) {
      const r = this.startNode()
      return (
        this.next(),
        (r.argument = this.parseMaybeAssignAllowIn(e, void 0, t)),
        this.finishNode(r, 'SpreadElement')
      )
    }
    parseRestBinding() {
      const e = this.startNode()
      return (
        this.next(),
        (e.argument = this.parseBindingAtom()),
        this.finishNode(e, 'RestElement')
      )
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 0: {
          const e = this.startNode()
          return (
            this.next(),
            (e.elements = this.parseBindingList(3, 93, !0)),
            this.finishNode(e, 'ArrayPattern')
          )
        }
        case 5:
          return this.parseObjectLike(8, !0)
      }
      return this.parseIdentifier()
    }
    parseBindingList(e, t, r, n) {
      const i = []
      let a = !0
      for (; !this.eat(e); )
        if ((a ? (a = !1) : this.expect(12), r && this.match(12))) i.push(null)
        else {
          if (this.eat(e)) break
          if (this.match(21)) {
            if (
              (i.push(
                this.parseAssignableListItemTypes(this.parseRestBinding())
              ),
              !this.checkCommaAfterRest(t))
            ) {
              this.expect(e)
              break
            }
          } else {
            const e = []
            for (
              this.match(26) &&
              this.hasPlugin('decorators') &&
              this.raise(Xh.UnsupportedParameterDecorator, {
                at: this.state.startLoc,
              });
              this.match(26);

            )
              e.push(this.parseDecorator())
            i.push(this.parseAssignableListItem(n, e))
          }
        }
      return i
    }
    parseBindingRestProperty(e) {
      return (
        this.next(),
        (e.argument = this.parseIdentifier()),
        this.checkCommaAfterRest(125),
        this.finishNode(e, 'RestElement')
      )
    }
    parseBindingProperty() {
      const e = this.startNode(),
        { type: t, start: r, startLoc: n } = this.state
      return 21 === t
        ? this.parseBindingRestProperty(e)
        : (134 === t
            ? (this.expectPlugin('destructuringPrivate', n),
              this.classScope.usePrivateName(this.state.value, n),
              (e.key = this.parsePrivateName()))
            : this.parsePropertyName(e),
          (e.method = !1),
          this.parseObjPropValue(e, r, n, !1, !1, !0, !1),
          e)
    }
    parseAssignableListItem(e, t) {
      const r = this.parseMaybeDefault()
      this.parseAssignableListItemTypes(r)
      const n = this.parseMaybeDefault(r.start, r.loc.start, r)
      return t.length && (r.decorators = t), n
    }
    parseAssignableListItemTypes(e) {
      return e
    }
    parseMaybeDefault(e, t, r) {
      var n, i, a
      if (
        ((t = null != (n = t) ? n : this.state.startLoc),
        (e = null != (i = e) ? i : this.state.start),
        (r = null != (a = r) ? a : this.parseBindingAtom()),
        !this.eat(29))
      )
        return r
      const s = this.startNodeAt(e, t)
      return (
        (s.left = r),
        (s.right = this.parseMaybeAssignAllowIn()),
        this.finishNode(s, 'AssignmentPattern')
      )
    }
    isValidLVal(e, t, r) {
      return (
        (n = {
          AssignmentPattern: 'left',
          RestElement: 'argument',
          ObjectProperty: 'value',
          ParenthesizedExpression: 'expression',
          ArrayPattern: 'elements',
          ObjectPattern: 'properties',
        }),
        (i = e),
        Object.hasOwnProperty.call(n, i) && n[i]
      )
      var n, i
    }
    checkLVal(
      e,
      {
        in: t,
        binding: r = 64,
        checkClashes: n = !1,
        strictModeChanged: i = !1,
        allowingSloppyLetBinding: a = !(8 & r),
        hasParenthesizedAncestor: s = !1,
      }
    ) {
      var o
      const l = e.type
      if (this.isObjectMethod(e)) return
      if ('MemberExpression' === l)
        return void (
          r !== tf && this.raise(Xh.InvalidPropertyBindingPattern, { at: e })
        )
      if ('Identifier' === e.type) {
        this.checkIdentifier(e, r, i, a)
        const { name: t } = e
        return void (
          n && (n.has(t) ? this.raise(Xh.ParamDupe, { at: e }) : n.add(t))
        )
      }
      const c = this.isValidLVal(
        e.type,
        s || (null == (o = e.extra) ? void 0 : o.parenthesized),
        r
      )
      if (!0 === c) return
      if (!1 === c) {
        const n = r === tf ? Xh.InvalidLhs : Xh.InvalidLhsBinding
        return void this.raise(n, {
          at: e,
          ancestor:
            'UpdateExpression' === t.type
              ? { type: 'UpdateExpression', prefix: t.prefix }
              : { type: t.type },
        })
      }
      const [u, p] = Array.isArray(c)
          ? c
          : [c, 'ParenthesizedExpression' === l],
        h =
          'ArrayPattern' === e.type ||
          'ObjectPattern' === e.type ||
          'ParenthesizedExpression' === e.type
            ? e
            : t
      for (const t of [].concat(e[u]))
        t &&
          this.checkLVal(t, {
            in: h,
            binding: r,
            checkClashes: n,
            allowingSloppyLetBinding: a,
            strictModeChanged: i,
            hasParenthesizedAncestor: p,
          })
    }
    checkIdentifier(e, t, r = !1, n = !(8 & t)) {
      this.state.strict &&
        (r ? Kd(e.name, this.inModule) : qd(e.name)) &&
        (t === tf
          ? this.raise(Xh.StrictEvalArguments, { at: e, referenceName: e.name })
          : this.raise(Xh.StrictEvalArgumentsBinding, {
              at: e,
              bindingName: e.name,
            })),
        n || 'let' !== e.name || this.raise(Xh.LetInLexicalBinding, { at: e }),
        t & tf || this.declareNameFromIdentifier(e, t)
    }
    declareNameFromIdentifier(e, t) {
      this.scope.declareName(e.name, t, e.loc.start)
    }
    checkToRestConversion(e) {
      'Identifier' !== e.argument.type &&
        'MemberExpression' !== e.argument.type &&
        this.raise(Xh.InvalidRestAssignmentPattern, { at: e.argument })
    }
    checkCommaAfterRest(e) {
      return (
        !!this.match(12) &&
        (this.raise(
          this.lookaheadCharCode() === e
            ? Xh.RestTrailingComma
            : Xh.ElementAfterRest,
          { at: this.state.startLoc }
        ),
        !0)
      )
    }
  } {
    checkProto(e, t, r, n) {
      if (
        'SpreadElement' === e.type ||
        this.isObjectMethod(e) ||
        e.computed ||
        e.shorthand
      )
        return
      const i = e.key
      if ('__proto__' === ('Identifier' === i.type ? i.name : i.value)) {
        if (t) return void this.raise(Xh.RecordNoProto, { at: i })
        r.used &&
          (n
            ? null === n.doubleProtoLoc && (n.doubleProtoLoc = i.loc.start)
            : this.raise(Xh.DuplicateProto, { at: i })),
          (r.used = !0)
      }
    }
    shouldExitDescending(e, t) {
      return 'ArrowFunctionExpression' === e.type && e.start === t
    }
    getExpression() {
      this.enterInitialScopes(), this.nextToken()
      const e = this.parseExpression()
      return (
        this.match(135) || this.unexpected(),
        this.finalizeRemainingComments(),
        (e.comments = this.state.comments),
        (e.errors = this.state.errors),
        this.options.tokens && (e.tokens = this.tokens),
        e
      )
    }
    parseExpression(e, t) {
      return e
        ? this.disallowInAnd(() => this.parseExpressionBase(t))
        : this.allowInAnd(() => this.parseExpressionBase(t))
    }
    parseExpressionBase(e) {
      const t = this.state.start,
        r = this.state.startLoc,
        n = this.parseMaybeAssign(e)
      if (this.match(12)) {
        const i = this.startNodeAt(t, r)
        for (i.expressions = [n]; this.eat(12); )
          i.expressions.push(this.parseMaybeAssign(e))
        return (
          this.toReferencedList(i.expressions),
          this.finishNode(i, 'SequenceExpression')
        )
      }
      return n
    }
    parseMaybeAssignDisallowIn(e, t) {
      return this.disallowInAnd(() => this.parseMaybeAssign(e, t))
    }
    parseMaybeAssignAllowIn(e, t) {
      return this.allowInAnd(() => this.parseMaybeAssign(e, t))
    }
    setOptionalParametersError(e, t) {
      var r
      e.optionalParametersLoc =
        null != (r = null == t ? void 0 : t.loc) ? r : this.state.startLoc
    }
    parseMaybeAssign(e, t) {
      const r = this.state.start,
        n = this.state.startLoc
      if (this.isContextual(105) && this.prodParam.hasYield) {
        let e = this.parseYield()
        return t && (e = t.call(this, e, r, n)), e
      }
      let i
      e ? (i = !1) : ((e = new If()), (i = !0))
      const { type: a } = this.state
      ;(10 === a || xd(a)) && (this.state.potentialArrowAt = this.state.start)
      let s = this.parseMaybeConditional(e)
      if (
        (t && (s = t.call(this, s, r, n)),
        (o = this.state.type) >= 29 && o <= 33)
      ) {
        const t = this.startNodeAt(r, n),
          i = this.state.value
        return (
          (t.operator = i),
          this.match(29)
            ? ((t.left = this.toAssignable(s, !0)),
              null != e.doubleProtoLoc &&
                e.doubleProtoLoc.index >= r &&
                (e.doubleProtoLoc = null),
              null != e.shorthandAssignLoc &&
                e.shorthandAssignLoc.index >= r &&
                (e.shorthandAssignLoc = null),
              null != e.privateKeyLoc &&
                e.privateKeyLoc.index >= r &&
                (this.checkDestructuringPrivate(e), (e.privateKeyLoc = null)))
            : (t.left = s),
          this.next(),
          (t.right = this.parseMaybeAssign()),
          this.checkLVal(s, { in: this.finishNode(t, 'AssignmentExpression') }),
          t
        )
      }
      var o
      return i && this.checkExpressionErrors(e, !0), s
    }
    parseMaybeConditional(e) {
      const t = this.state.start,
        r = this.state.startLoc,
        n = this.state.potentialArrowAt,
        i = this.parseExprOps(e)
      return this.shouldExitDescending(i, n)
        ? i
        : this.parseConditional(i, t, r, e)
    }
    parseConditional(e, t, r, n) {
      if (this.eat(17)) {
        const n = this.startNodeAt(t, r)
        return (
          (n.test = e),
          (n.consequent = this.parseMaybeAssignAllowIn()),
          this.expect(14),
          (n.alternate = this.parseMaybeAssign()),
          this.finishNode(n, 'ConditionalExpression')
        )
      }
      return e
    }
    parseMaybeUnaryOrPrivate(e) {
      return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(e)
    }
    parseExprOps(e) {
      const t = this.state.start,
        r = this.state.startLoc,
        n = this.state.potentialArrowAt,
        i = this.parseMaybeUnaryOrPrivate(e)
      return this.shouldExitDescending(i, n) ? i : this.parseExprOp(i, t, r, -1)
    }
    parseExprOp(e, t, r, n) {
      if (this.isPrivateName(e)) {
        const t = this.getPrivateNameSV(e)
        ;(n >= Ad(58) || !this.prodParam.hasIn || !this.match(58)) &&
          this.raise(Xh.PrivateInExpectedIn, { at: e, identifierName: t }),
          this.classScope.usePrivateName(t, e.loc.start)
      }
      const i = this.state.type
      if (
        (a = i) >= 39 &&
        a <= 59 &&
        (this.prodParam.hasIn || !this.match(58))
      ) {
        let a = Ad(i)
        if (a > n) {
          if (39 === i) {
            if (
              (this.expectPlugin('pipelineOperator'),
              this.state.inFSharpPipelineDirectBody)
            )
              return e
            this.checkPipelineAtInfixOperator(e, r)
          }
          const s = this.startNodeAt(t, r)
          ;(s.left = e), (s.operator = this.state.value)
          const o = 41 === i || 42 === i,
            l = 40 === i
          if (
            (l && (a = Ad(42)),
            this.next(),
            39 === i &&
              this.hasPlugin(['pipelineOperator', { proposal: 'minimal' }]) &&
              96 === this.state.type &&
              this.prodParam.hasAwait)
          )
            throw this.raise(Xh.UnexpectedAwaitAfterPipelineBody, {
              at: this.state.startLoc,
            })
          ;(s.right = this.parseExprOpRightExpr(i, a)),
            this.finishNode(
              s,
              o || l ? 'LogicalExpression' : 'BinaryExpression'
            )
          const c = this.state.type
          if ((l && (41 === c || 42 === c)) || (o && 40 === c))
            throw this.raise(Xh.MixingCoalesceWithLogical, {
              at: this.state.startLoc,
            })
          return this.parseExprOp(s, t, r, n)
        }
      }
      var a
      return e
    }
    parseExprOpRightExpr(e, t) {
      const r = this.state.start,
        n = this.state.startLoc
      if (39 === e)
        switch (this.getPluginOption('pipelineOperator', 'proposal')) {
          case 'hack':
            return this.withTopicBindingContext(() => this.parseHackPipeBody())
          case 'smart':
            return this.withTopicBindingContext(() => {
              if (this.prodParam.hasYield && this.isContextual(105))
                throw this.raise(Xh.PipeBodyIsTighter, {
                  at: this.state.startLoc,
                })
              return this.parseSmartPipelineBodyInStyle(
                this.parseExprOpBaseRightExpr(e, t),
                r,
                n
              )
            })
          case 'fsharp':
            return this.withSoloAwaitPermittingContext(() =>
              this.parseFSharpPipelineBody(t)
            )
        }
      return this.parseExprOpBaseRightExpr(e, t)
    }
    parseExprOpBaseRightExpr(e, t) {
      const r = this.state.start,
        n = this.state.startLoc
      return this.parseExprOp(
        this.parseMaybeUnaryOrPrivate(),
        r,
        n,
        57 === e ? t - 1 : t
      )
    }
    parseHackPipeBody() {
      var e
      const { startLoc: t } = this.state,
        r = this.parseMaybeAssign()
      return (
        !Vh.has(r.type) ||
          (null != (e = r.extra) && e.parenthesized) ||
          this.raise(Xh.PipeUnparenthesizedBody, { at: t, type: r.type }),
        this.topicReferenceWasUsedInCurrentContext() ||
          this.raise(Xh.PipeTopicUnused, { at: t }),
        r
      )
    }
    checkExponentialAfterUnary(e) {
      this.match(57) &&
        this.raise(Xh.UnexpectedTokenUnaryExponentiation, { at: e.argument })
    }
    parseMaybeUnary(e, t) {
      const r = this.state.start,
        n = this.state.startLoc,
        i = this.isContextual(96)
      if (i && this.isAwaitAllowed()) {
        this.next()
        const e = this.parseAwait(r, n)
        return t || this.checkExponentialAfterUnary(e), e
      }
      const a = this.match(34),
        s = this.startNode()
      if (((o = this.state.type), yd[o])) {
        ;(s.operator = this.state.value),
          (s.prefix = !0),
          this.match(72) && this.expectPlugin('throwExpressions')
        const r = this.match(89)
        if (
          (this.next(),
          (s.argument = this.parseMaybeUnary(null, !0)),
          this.checkExpressionErrors(e, !0),
          this.state.strict && r)
        ) {
          const e = s.argument
          'Identifier' === e.type
            ? this.raise(Xh.StrictDelete, { at: s })
            : this.hasPropertyAsPrivateName(e) &&
              this.raise(Xh.DeletePrivateField, { at: s })
        }
        if (!a)
          return (
            t || this.checkExponentialAfterUnary(s),
            this.finishNode(s, 'UnaryExpression')
          )
      }
      var o
      const l = this.parseUpdate(s, a, e)
      if (i) {
        const { type: e } = this.state
        if (
          (this.hasPlugin('v8intrinsic') ? Pd(e) : Pd(e) && !this.match(54)) &&
          !this.isAmbiguousAwait()
        )
          return (
            this.raiseOverwrite(Xh.AwaitNotInAsyncContext, { at: n }),
            this.parseAwait(r, n)
          )
      }
      return l
    }
    parseUpdate(e, t, r) {
      if (t)
        return (
          this.checkLVal(e.argument, {
            in: this.finishNode(e, 'UpdateExpression'),
          }),
          e
        )
      const n = this.state.start,
        i = this.state.startLoc
      let a = this.parseExprSubscripts(r)
      if (this.checkExpressionErrors(r, !1)) return a
      for (; 34 === this.state.type && !this.canInsertSemicolon(); ) {
        const e = this.startNodeAt(n, i)
        ;(e.operator = this.state.value),
          (e.prefix = !1),
          (e.argument = a),
          this.next(),
          this.checkLVal(a, {
            in: (a = this.finishNode(e, 'UpdateExpression')),
          })
      }
      return a
    }
    parseExprSubscripts(e) {
      const t = this.state.start,
        r = this.state.startLoc,
        n = this.state.potentialArrowAt,
        i = this.parseExprAtom(e)
      return this.shouldExitDescending(i, n) ? i : this.parseSubscripts(i, t, r)
    }
    parseSubscripts(e, t, r, n) {
      const i = {
        optionalChainMember: !1,
        maybeAsyncArrow: this.atPossibleAsyncArrow(e),
        stop: !1,
      }
      do {
        ;(e = this.parseSubscript(e, t, r, n, i)), (i.maybeAsyncArrow = !1)
      } while (!i.stop)
      return e
    }
    parseSubscript(e, t, r, n, i) {
      const { type: a } = this.state
      if (!n && 15 === a) return this.parseBind(e, t, r, n, i)
      if (Rd(a)) return this.parseTaggedTemplateExpression(e, t, r, i)
      let s = !1
      if (18 === a) {
        if (n && 40 === this.lookaheadCharCode()) return (i.stop = !0), e
        ;(i.optionalChainMember = s = !0), this.next()
      }
      if (!n && this.match(10))
        return this.parseCoverCallAndAsyncArrowHead(e, t, r, i, s)
      {
        const n = this.eat(0)
        return n || s || this.eat(16)
          ? this.parseMember(e, t, r, i, n, s)
          : ((i.stop = !0), e)
      }
    }
    parseMember(e, t, r, n, i, a) {
      const s = this.startNodeAt(t, r)
      return (
        (s.object = e),
        (s.computed = i),
        i
          ? ((s.property = this.parseExpression()), this.expect(3))
          : this.match(134)
          ? ('Super' === e.type && this.raise(Xh.SuperPrivateField, { at: r }),
            this.classScope.usePrivateName(
              this.state.value,
              this.state.startLoc
            ),
            (s.property = this.parsePrivateName()))
          : (s.property = this.parseIdentifier(!0)),
        n.optionalChainMember
          ? ((s.optional = a), this.finishNode(s, 'OptionalMemberExpression'))
          : this.finishNode(s, 'MemberExpression')
      )
    }
    parseBind(e, t, r, n, i) {
      const a = this.startNodeAt(t, r)
      return (
        (a.object = e),
        this.next(),
        (a.callee = this.parseNoCallExpr()),
        (i.stop = !0),
        this.parseSubscripts(this.finishNode(a, 'BindExpression'), t, r, n)
      )
    }
    parseCoverCallAndAsyncArrowHead(e, t, r, n, i) {
      const a = this.state.maybeInArrowParameters
      let s = null
      ;(this.state.maybeInArrowParameters = !0), this.next()
      let o = this.startNodeAt(t, r)
      o.callee = e
      const { maybeAsyncArrow: l, optionalChainMember: c } = n
      return (
        l && (this.expressionScope.enter(new Af(2)), (s = new If())),
        c && (o.optional = i),
        (o.arguments = i
          ? this.parseCallExpressionArguments(11)
          : this.parseCallExpressionArguments(
              11,
              'Import' === e.type,
              'Super' !== e.type,
              o,
              s
            )),
        this.finishCallExpression(o, c),
        l && this.shouldParseAsyncArrow() && !i
          ? ((n.stop = !0),
            this.checkDestructuringPrivate(s),
            this.expressionScope.validateAsPattern(),
            this.expressionScope.exit(),
            (o = this.parseAsyncArrowFromCallExpression(
              this.startNodeAt(t, r),
              o
            )))
          : (l &&
              (this.checkExpressionErrors(s, !0), this.expressionScope.exit()),
            this.toReferencedArguments(o)),
        (this.state.maybeInArrowParameters = a),
        o
      )
    }
    toReferencedArguments(e, t) {
      this.toReferencedListDeep(e.arguments, t)
    }
    parseTaggedTemplateExpression(e, t, r, n) {
      const i = this.startNodeAt(t, r)
      return (
        (i.tag = e),
        (i.quasi = this.parseTemplate(!0)),
        n.optionalChainMember &&
          this.raise(Xh.OptionalChainingNoTemplate, { at: r }),
        this.finishNode(i, 'TaggedTemplateExpression')
      )
    }
    atPossibleAsyncArrow(e) {
      return (
        'Identifier' === e.type &&
        'async' === e.name &&
        this.state.lastTokEndLoc.index === e.end &&
        !this.canInsertSemicolon() &&
        e.end - e.start == 5 &&
        e.start === this.state.potentialArrowAt
      )
    }
    finishCallExpression(e, t) {
      if ('Import' === e.callee.type)
        if (
          (2 === e.arguments.length &&
            (this.hasPlugin('moduleAttributes') ||
              this.expectPlugin('importAssertions')),
          0 === e.arguments.length || e.arguments.length > 2)
        )
          this.raise(Xh.ImportCallArity, {
            at: e,
            maxArgumentCount:
              this.hasPlugin('importAssertions') ||
              this.hasPlugin('moduleAttributes')
                ? 2
                : 1,
          })
        else
          for (const t of e.arguments)
            'SpreadElement' === t.type &&
              this.raise(Xh.ImportCallSpreadArgument, { at: t })
      return this.finishNode(e, t ? 'OptionalCallExpression' : 'CallExpression')
    }
    parseCallExpressionArguments(e, t, r, n, i) {
      const a = []
      let s = !0
      const o = this.state.inFSharpPipelineDirectBody
      for (this.state.inFSharpPipelineDirectBody = !1; !this.eat(e); ) {
        if (s) s = !1
        else if ((this.expect(12), this.match(e))) {
          !t ||
            this.hasPlugin('importAssertions') ||
            this.hasPlugin('moduleAttributes') ||
            this.raise(Xh.ImportCallArgumentTrailingComma, {
              at: this.state.lastTokStartLoc,
            }),
            n && this.addTrailingCommaExtraToNode(n),
            this.next()
          break
        }
        a.push(this.parseExprListItem(!1, i, r))
      }
      return (this.state.inFSharpPipelineDirectBody = o), a
    }
    shouldParseAsyncArrow() {
      return this.match(19) && !this.canInsertSemicolon()
    }
    parseAsyncArrowFromCallExpression(e, t) {
      var r
      return (
        this.resetPreviousNodeTrailingComments(t),
        this.expect(19),
        this.parseArrowExpression(
          e,
          t.arguments,
          !0,
          null == (r = t.extra) ? void 0 : r.trailingCommaLoc
        ),
        t.innerComments && nf(e, t.innerComments),
        t.callee.trailingComments && nf(e, t.callee.trailingComments),
        e
      )
    }
    parseNoCallExpr() {
      const e = this.state.start,
        t = this.state.startLoc
      return this.parseSubscripts(this.parseExprAtom(), e, t, !0)
    }
    parseExprAtom(e) {
      let t
      const { type: r } = this.state
      switch (r) {
        case 79:
          return this.parseSuper()
        case 83:
          return (
            (t = this.startNode()),
            this.next(),
            this.match(16)
              ? this.parseImportMetaProperty(t)
              : (this.match(10) ||
                  this.raise(Xh.UnsupportedImport, {
                    at: this.state.lastTokStartLoc,
                  }),
                this.finishNode(t, 'Import'))
          )
        case 78:
          return (
            (t = this.startNode()),
            this.next(),
            this.finishNode(t, 'ThisExpression')
          )
        case 90:
          return this.parseDo(this.startNode(), !1)
        case 56:
        case 31:
          return this.readRegexp(), this.parseRegExpLiteral(this.state.value)
        case 130:
          return this.parseNumericLiteral(this.state.value)
        case 131:
          return this.parseBigIntLiteral(this.state.value)
        case 132:
          return this.parseDecimalLiteral(this.state.value)
        case 129:
          return this.parseStringLiteral(this.state.value)
        case 84:
          return this.parseNullLiteral()
        case 85:
          return this.parseBooleanLiteral(!0)
        case 86:
          return this.parseBooleanLiteral(!1)
        case 10: {
          const e = this.state.potentialArrowAt === this.state.start
          return this.parseParenAndDistinguishExpression(e)
        }
        case 2:
        case 1:
          return this.parseArrayLike(2 === this.state.type ? 4 : 3, !1, !0)
        case 0:
          return this.parseArrayLike(3, !0, !1, e)
        case 6:
        case 7:
          return this.parseObjectLike(6 === this.state.type ? 9 : 8, !1, !0)
        case 5:
          return this.parseObjectLike(8, !1, !1, e)
        case 68:
          return this.parseFunctionOrFunctionSent()
        case 26:
          this.parseDecorators()
        case 80:
          return (
            (t = this.startNode()),
            this.takeDecorators(t),
            this.parseClass(t, !1)
          )
        case 77:
          return this.parseNewOrNewTarget()
        case 25:
        case 24:
          return this.parseTemplate(!1)
        case 15: {
          ;(t = this.startNode()), this.next(), (t.object = null)
          const e = (t.callee = this.parseNoCallExpr())
          if ('MemberExpression' === e.type)
            return this.finishNode(t, 'BindExpression')
          throw this.raise(Xh.UnsupportedBind, { at: e })
        }
        case 134:
          return (
            this.raise(Xh.PrivateInExpectedIn, {
              at: this.state.startLoc,
              identifierName: this.state.value,
            }),
            this.parsePrivateName()
          )
        case 33:
          return this.parseTopicReferenceThenEqualsSign(54, '%')
        case 32:
          return this.parseTopicReferenceThenEqualsSign(44, '^')
        case 37:
        case 38:
          return this.parseTopicReference('hack')
        case 44:
        case 54:
        case 27: {
          const e = this.getPluginOption('pipelineOperator', 'proposal')
          if (e) return this.parseTopicReference(e)
          throw this.unexpected()
        }
        case 47: {
          const e = this.input.codePointAt(this.nextTokenStart())
          if (Dd(e) || 62 === e) {
            this.expectOnePlugin(['jsx', 'flow', 'typescript'])
            break
          }
          throw this.unexpected()
        }
        default:
          if (xd(r)) {
            if (
              this.isContextual(123) &&
              123 === this.lookaheadCharCode() &&
              !this.hasFollowingLineBreak()
            )
              return this.parseModuleExpression()
            const e = this.state.potentialArrowAt === this.state.start,
              t = this.state.containsEsc,
              r = this.parseIdentifier()
            if (!t && 'async' === r.name && !this.canInsertSemicolon()) {
              const { type: e } = this.state
              if (68 === e)
                return (
                  this.resetPreviousNodeTrailingComments(r),
                  this.next(),
                  this.parseFunction(this.startNodeAtNode(r), void 0, !0)
                )
              if (xd(e))
                return 61 === this.lookaheadCharCode()
                  ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(r))
                  : r
              if (90 === e)
                return (
                  this.resetPreviousNodeTrailingComments(r),
                  this.parseDo(this.startNodeAtNode(r), !0)
                )
            }
            return e && this.match(19) && !this.canInsertSemicolon()
              ? (this.next(),
                this.parseArrowExpression(this.startNodeAtNode(r), [r], !1))
              : r
          }
          throw this.unexpected()
      }
    }
    parseTopicReferenceThenEqualsSign(e, t) {
      const r = this.getPluginOption('pipelineOperator', 'proposal')
      if (r)
        return (
          (this.state.type = e),
          (this.state.value = t),
          this.state.pos--,
          this.state.end--,
          (this.state.endLoc = Bh(this.state.endLoc, -1)),
          this.parseTopicReference(r)
        )
      throw this.unexpected()
    }
    parseTopicReference(e) {
      const t = this.startNode(),
        r = this.state.startLoc,
        n = this.state.type
      return this.next(), this.finishTopicReference(t, r, e, n)
    }
    finishTopicReference(e, t, r, n) {
      if (this.testTopicReferenceConfiguration(r, t, n)) {
        const n =
          'smart' === r ? 'PipelinePrimaryTopicReference' : 'TopicReference'
        return (
          this.topicReferenceIsAllowedInCurrentContext() ||
            this.raise(
              'smart' === r ? Xh.PrimaryTopicNotAllowed : Xh.PipeTopicUnbound,
              { at: t }
            ),
          this.registerTopicReference(),
          this.finishNode(e, n)
        )
      }
      throw this.raise(Xh.PipeTopicUnconfiguredToken, { at: t, token: Cd(n) })
    }
    testTopicReferenceConfiguration(e, t, r) {
      switch (e) {
        case 'hack':
          return this.hasPlugin(['pipelineOperator', { topicToken: Cd(r) }])
        case 'smart':
          return 27 === r
        default:
          throw this.raise(Xh.PipeTopicRequiresHackPipes, { at: t })
      }
    }
    parseAsyncArrowUnaryFunction(e) {
      this.prodParam.enter(Of(!0, this.prodParam.hasYield))
      const t = [this.parseIdentifier()]
      return (
        this.prodParam.exit(),
        this.hasPrecedingLineBreak() &&
          this.raise(Xh.LineTerminatorBeforeArrow, {
            at: this.state.curPosition(),
          }),
        this.expect(19),
        this.parseArrowExpression(e, t, !0),
        e
      )
    }
    parseDo(e, t) {
      this.expectPlugin('doExpressions'),
        t && this.expectPlugin('asyncDoExpressions'),
        (e.async = t),
        this.next()
      const r = this.state.labels
      return (
        (this.state.labels = []),
        t
          ? (this.prodParam.enter(2),
            (e.body = this.parseBlock()),
            this.prodParam.exit())
          : (e.body = this.parseBlock()),
        (this.state.labels = r),
        this.finishNode(e, 'DoExpression')
      )
    }
    parseSuper() {
      const e = this.startNode()
      return (
        this.next(),
        !this.match(10) ||
        this.scope.allowDirectSuper ||
        this.options.allowSuperOutsideMethod
          ? this.scope.allowSuper ||
            this.options.allowSuperOutsideMethod ||
            this.raise(Xh.UnexpectedSuper, { at: e })
          : this.raise(Xh.SuperNotAllowed, { at: e }),
        this.match(10) ||
          this.match(0) ||
          this.match(16) ||
          this.raise(Xh.UnsupportedSuper, { at: e }),
        this.finishNode(e, 'Super')
      )
    }
    parsePrivateName() {
      const e = this.startNode(),
        t = this.startNodeAt(
          this.state.start + 1,
          new Dh(
            this.state.curLine,
            this.state.start + 1 - this.state.lineStart,
            this.state.start + 1
          )
        ),
        r = this.state.value
      return (
        this.next(),
        (e.id = this.createIdentifier(t, r)),
        this.finishNode(e, 'PrivateName')
      )
    }
    parseFunctionOrFunctionSent() {
      const e = this.startNode()
      if ((this.next(), this.prodParam.hasYield && this.match(16))) {
        const t = this.createIdentifier(this.startNodeAtNode(e), 'function')
        return (
          this.next(),
          this.match(102)
            ? this.expectPlugin('functionSent')
            : this.hasPlugin('functionSent') || this.unexpected(),
          this.parseMetaProperty(e, t, 'sent')
        )
      }
      return this.parseFunction(e)
    }
    parseMetaProperty(e, t, r) {
      e.meta = t
      const n = this.state.containsEsc
      return (
        (e.property = this.parseIdentifier(!0)),
        (e.property.name !== r || n) &&
          this.raise(Xh.UnsupportedMetaProperty, {
            at: e.property,
            target: t.name,
            onlyValidPropertyName: r,
          }),
        this.finishNode(e, 'MetaProperty')
      )
    }
    parseImportMetaProperty(e) {
      const t = this.createIdentifier(this.startNodeAtNode(e), 'import')
      return (
        this.next(),
        this.isContextual(100) &&
          (this.inModule || this.raise(Xh.ImportMetaOutsideModule, { at: t }),
          (this.sawUnambiguousESM = !0)),
        this.parseMetaProperty(e, t, 'meta')
      )
    }
    parseLiteralAtNode(e, t, r) {
      return (
        this.addExtra(r, 'rawValue', e),
        this.addExtra(r, 'raw', this.input.slice(r.start, this.state.end)),
        (r.value = e),
        this.next(),
        this.finishNode(r, t)
      )
    }
    parseLiteral(e, t) {
      const r = this.startNode()
      return this.parseLiteralAtNode(e, t, r)
    }
    parseStringLiteral(e) {
      return this.parseLiteral(e, 'StringLiteral')
    }
    parseNumericLiteral(e) {
      return this.parseLiteral(e, 'NumericLiteral')
    }
    parseBigIntLiteral(e) {
      return this.parseLiteral(e, 'BigIntLiteral')
    }
    parseDecimalLiteral(e) {
      return this.parseLiteral(e, 'DecimalLiteral')
    }
    parseRegExpLiteral(e) {
      const t = this.parseLiteral(e.value, 'RegExpLiteral')
      return (t.pattern = e.pattern), (t.flags = e.flags), t
    }
    parseBooleanLiteral(e) {
      const t = this.startNode()
      return (t.value = e), this.next(), this.finishNode(t, 'BooleanLiteral')
    }
    parseNullLiteral() {
      const e = this.startNode()
      return this.next(), this.finishNode(e, 'NullLiteral')
    }
    parseParenAndDistinguishExpression(e) {
      const t = this.state.start,
        r = this.state.startLoc
      let n
      this.next(), this.expressionScope.enter(new Af(1))
      const i = this.state.maybeInArrowParameters,
        a = this.state.inFSharpPipelineDirectBody
      ;(this.state.maybeInArrowParameters = !0),
        (this.state.inFSharpPipelineDirectBody = !1)
      const s = this.state.start,
        o = this.state.startLoc,
        l = [],
        c = new If()
      let u,
        p,
        h = !0
      for (; !this.match(11); ) {
        if (h) h = !1
        else if (
          (this.expect(
            12,
            null === c.optionalParametersLoc ? null : c.optionalParametersLoc
          ),
          this.match(11))
        ) {
          p = this.state.startLoc
          break
        }
        if (this.match(21)) {
          const e = this.state.start,
            t = this.state.startLoc
          if (
            ((u = this.state.startLoc),
            l.push(this.parseParenItem(this.parseRestBinding(), e, t)),
            !this.checkCommaAfterRest(41))
          )
            break
        } else l.push(this.parseMaybeAssignAllowIn(c, this.parseParenItem))
      }
      const d = this.state.lastTokEndLoc
      this.expect(11),
        (this.state.maybeInArrowParameters = i),
        (this.state.inFSharpPipelineDirectBody = a)
      let f = this.startNodeAt(t, r)
      if (e && this.shouldParseArrow(l) && (f = this.parseArrow(f)))
        return (
          this.checkDestructuringPrivate(c),
          this.expressionScope.validateAsPattern(),
          this.expressionScope.exit(),
          this.parseArrowExpression(f, l, !1),
          f
        )
      if (
        (this.expressionScope.exit(),
        l.length || this.unexpected(this.state.lastTokStartLoc),
        p && this.unexpected(p),
        u && this.unexpected(u),
        this.checkExpressionErrors(c, !0),
        this.toReferencedListDeep(l, !0),
        l.length > 1
          ? ((n = this.startNodeAt(s, o)),
            (n.expressions = l),
            this.finishNode(n, 'SequenceExpression'),
            this.resetEndLocation(n, d))
          : (n = l[0]),
        !this.options.createParenthesizedExpressions)
      )
        return (
          this.addExtra(n, 'parenthesized', !0),
          this.addExtra(n, 'parenStart', t),
          this.takeSurroundingComments(n, t, this.state.lastTokEndLoc.index),
          n
        )
      const m = this.startNodeAt(t, r)
      return (
        (m.expression = n), this.finishNode(m, 'ParenthesizedExpression'), m
      )
    }
    shouldParseArrow(e) {
      return !this.canInsertSemicolon()
    }
    parseArrow(e) {
      if (this.eat(19)) return e
    }
    parseParenItem(e, t, r) {
      return e
    }
    parseNewOrNewTarget() {
      const e = this.startNode()
      if ((this.next(), this.match(16))) {
        const t = this.createIdentifier(this.startNodeAtNode(e), 'new')
        this.next()
        const r = this.parseMetaProperty(e, t, 'target')
        return (
          this.scope.inNonArrowFunction ||
            this.scope.inClass ||
            this.raise(Xh.UnexpectedNewTarget, { at: r }),
          r
        )
      }
      return this.parseNew(e)
    }
    parseNew(e) {
      return (
        (e.callee = this.parseNoCallExpr()),
        'Import' === e.callee.type
          ? this.raise(Xh.ImportCallNotNewExpression, { at: e.callee })
          : this.isOptionalChain(e.callee)
          ? this.raise(Xh.OptionalChainingNoNew, {
              at: this.state.lastTokEndLoc,
            })
          : this.eat(18) &&
            this.raise(Xh.OptionalChainingNoNew, { at: this.state.startLoc }),
        this.parseNewArguments(e),
        this.finishNode(e, 'NewExpression')
      )
    }
    parseNewArguments(e) {
      if (this.eat(10)) {
        const t = this.parseExprList(11)
        this.toReferencedList(t), (e.arguments = t)
      } else e.arguments = []
    }
    parseTemplateElement(e) {
      const { start: t, startLoc: r, end: n, value: i } = this.state,
        a = t + 1,
        s = this.startNodeAt(a, Bh(r, 1))
      null === i &&
        (e || this.raise(Xh.InvalidEscapeSequenceTemplate, { at: Bh(r, 2) }))
      const o = this.match(24),
        l = o ? -1 : -2,
        c = n + l
      return (
        (s.value = {
          raw: this.input.slice(a, c).replace(/\r\n?/g, '\n'),
          cooked: null === i ? null : i.slice(1, l),
        }),
        (s.tail = o),
        this.next(),
        this.finishNode(s, 'TemplateElement'),
        this.resetEndLocation(s, Bh(this.state.lastTokEndLoc, l)),
        s
      )
    }
    parseTemplate(e) {
      const t = this.startNode()
      t.expressions = []
      let r = this.parseTemplateElement(e)
      for (t.quasis = [r]; !r.tail; )
        t.expressions.push(this.parseTemplateSubstitution()),
          this.readTemplateContinuation(),
          t.quasis.push((r = this.parseTemplateElement(e)))
      return this.finishNode(t, 'TemplateLiteral')
    }
    parseTemplateSubstitution() {
      return this.parseExpression()
    }
    parseObjectLike(e, t, r, n) {
      r && this.expectPlugin('recordAndTuple')
      const i = this.state.inFSharpPipelineDirectBody
      this.state.inFSharpPipelineDirectBody = !1
      const a = Object.create(null)
      let s = !0
      const o = this.startNode()
      for (o.properties = [], this.next(); !this.match(e); ) {
        if (s) s = !1
        else if ((this.expect(12), this.match(e))) {
          this.addTrailingCommaExtraToNode(o)
          break
        }
        let i
        t
          ? (i = this.parseBindingProperty())
          : ((i = this.parsePropertyDefinition(n)),
            this.checkProto(i, r, a, n)),
          r &&
            !this.isObjectProperty(i) &&
            'SpreadElement' !== i.type &&
            this.raise(Xh.InvalidRecordProperty, { at: i }),
          i.shorthand && this.addExtra(i, 'shorthand', !0),
          o.properties.push(i)
      }
      this.next(), (this.state.inFSharpPipelineDirectBody = i)
      let l = 'ObjectExpression'
      return (
        t ? (l = 'ObjectPattern') : r && (l = 'RecordExpression'),
        this.finishNode(o, l)
      )
    }
    addTrailingCommaExtraToNode(e) {
      this.addExtra(e, 'trailingComma', this.state.lastTokStart),
        this.addExtra(e, 'trailingCommaLoc', this.state.lastTokStartLoc, !1)
    }
    maybeAsyncOrAccessorProp(e) {
      return (
        !e.computed &&
        'Identifier' === e.key.type &&
        (this.isLiteralPropertyName() || this.match(0) || this.match(55))
      )
    }
    parsePropertyDefinition(e) {
      let t = []
      if (this.match(26))
        for (
          this.hasPlugin('decorators') &&
          this.raise(Xh.UnsupportedPropertyDecorator, {
            at: this.state.startLoc,
          });
          this.match(26);

        )
          t.push(this.parseDecorator())
      const r = this.startNode()
      let n,
        i,
        a = !1,
        s = !1
      if (this.match(21))
        return t.length && this.unexpected(), this.parseSpread()
      t.length && ((r.decorators = t), (t = [])),
        (r.method = !1),
        e && ((n = this.state.start), (i = this.state.startLoc))
      let o = this.eat(55)
      this.parsePropertyNamePrefixOperator(r)
      const l = this.state.containsEsc,
        c = this.parsePropertyName(r, e)
      if (!o && !l && this.maybeAsyncOrAccessorProp(r)) {
        const e = c.name
        'async' !== e ||
          this.hasPrecedingLineBreak() ||
          ((a = !0),
          this.resetPreviousNodeTrailingComments(c),
          (o = this.eat(55)),
          this.parsePropertyName(r)),
          ('get' !== e && 'set' !== e) ||
            ((s = !0),
            this.resetPreviousNodeTrailingComments(c),
            (r.kind = e),
            this.match(55) &&
              ((o = !0),
              this.raise(Xh.AccessorIsGenerator, {
                at: this.state.curPosition(),
                kind: e,
              }),
              this.next()),
            this.parsePropertyName(r))
      }
      return this.parseObjPropValue(r, n, i, o, a, !1, s, e), r
    }
    getGetterSetterExpectedParamCount(e) {
      return 'get' === e.kind ? 0 : 1
    }
    getObjectOrClassMethodParams(e) {
      return e.params
    }
    checkGetterSetterParams(e) {
      var t
      const r = this.getGetterSetterExpectedParamCount(e),
        n = this.getObjectOrClassMethodParams(e)
      n.length !== r &&
        this.raise('get' === e.kind ? Xh.BadGetterArity : Xh.BadSetterArity, {
          at: e,
        }),
        'set' === e.kind &&
          'RestElement' === (null == (t = n[n.length - 1]) ? void 0 : t.type) &&
          this.raise(Xh.BadSetterRestParameter, { at: e })
    }
    parseObjectMethod(e, t, r, n, i) {
      return i
        ? (this.parseMethod(e, t, !1, !1, !1, 'ObjectMethod'),
          this.checkGetterSetterParams(e),
          e)
        : r || t || this.match(10)
        ? (n && this.unexpected(),
          (e.kind = 'method'),
          (e.method = !0),
          this.parseMethod(e, t, r, !1, !1, 'ObjectMethod'))
        : void 0
    }
    parseObjectProperty(e, t, r, n, i) {
      if (((e.shorthand = !1), this.eat(14)))
        return (
          (e.value = n
            ? this.parseMaybeDefault(this.state.start, this.state.startLoc)
            : this.parseMaybeAssignAllowIn(i)),
          this.finishNode(e, 'ObjectProperty')
        )
      if (!e.computed && 'Identifier' === e.key.type) {
        if ((this.checkReservedWord(e.key.name, e.key.loc.start, !0, !1), n))
          e.value = this.parseMaybeDefault(t, r, _f(e.key))
        else if (this.match(29)) {
          const n = this.state.startLoc
          null != i
            ? null === i.shorthandAssignLoc && (i.shorthandAssignLoc = n)
            : this.raise(Xh.InvalidCoverInitializedName, { at: n }),
            (e.value = this.parseMaybeDefault(t, r, _f(e.key)))
        } else e.value = _f(e.key)
        return (e.shorthand = !0), this.finishNode(e, 'ObjectProperty')
      }
    }
    parseObjPropValue(e, t, r, n, i, a, s, o) {
      const l =
        this.parseObjectMethod(e, n, i, a, s) ||
        this.parseObjectProperty(e, t, r, a, o)
      return l || this.unexpected(), l
    }
    parsePropertyName(e, t) {
      if (this.eat(0))
        (e.computed = !0),
          (e.key = this.parseMaybeAssignAllowIn()),
          this.expect(3)
      else {
        const { type: r, value: n } = this.state
        let i
        if (wd(r)) i = this.parseIdentifier(!0)
        else
          switch (r) {
            case 130:
              i = this.parseNumericLiteral(n)
              break
            case 129:
              i = this.parseStringLiteral(n)
              break
            case 131:
              i = this.parseBigIntLiteral(n)
              break
            case 132:
              i = this.parseDecimalLiteral(n)
              break
            case 134: {
              const e = this.state.startLoc
              null != t
                ? null === t.privateKeyLoc && (t.privateKeyLoc = e)
                : this.raise(Xh.UnexpectedPrivateField, { at: e }),
                (i = this.parsePrivateName())
              break
            }
            default:
              throw this.unexpected()
          }
        ;(e.key = i), 134 !== r && (e.computed = !1)
      }
      return e.key
    }
    initFunction(e, t) {
      ;(e.id = null), (e.generator = !1), (e.async = !!t)
    }
    parseMethod(e, t, r, n, i, a, s = !1) {
      this.initFunction(e, r), (e.generator = !!t)
      const o = n
      return (
        this.scope.enter(18 | (s ? Xd : 0) | (i ? 32 : 0)),
        this.prodParam.enter(Of(r, e.generator)),
        this.parseFunctionParams(e, o),
        this.parseFunctionBodyAndFinish(e, a, !0),
        this.prodParam.exit(),
        this.scope.exit(),
        e
      )
    }
    parseArrayLike(e, t, r, n) {
      r && this.expectPlugin('recordAndTuple')
      const i = this.state.inFSharpPipelineDirectBody
      this.state.inFSharpPipelineDirectBody = !1
      const a = this.startNode()
      return (
        this.next(),
        (a.elements = this.parseExprList(e, !r, n, a)),
        (this.state.inFSharpPipelineDirectBody = i),
        this.finishNode(a, r ? 'TupleExpression' : 'ArrayExpression')
      )
    }
    parseArrowExpression(e, t, r, n) {
      this.scope.enter(6)
      let i = Of(r, !1)
      !this.match(5) && this.prodParam.hasIn && (i |= 8),
        this.prodParam.enter(i),
        this.initFunction(e, r)
      const a = this.state.maybeInArrowParameters
      return (
        t &&
          ((this.state.maybeInArrowParameters = !0),
          this.setArrowFunctionParameters(e, t, n)),
        (this.state.maybeInArrowParameters = !1),
        this.parseFunctionBody(e, !0),
        this.prodParam.exit(),
        this.scope.exit(),
        (this.state.maybeInArrowParameters = a),
        this.finishNode(e, 'ArrowFunctionExpression')
      )
    }
    setArrowFunctionParameters(e, t, r) {
      e.params = this.toAssignableList(t, r, !1)
    }
    parseFunctionBodyAndFinish(e, t, r = !1) {
      this.parseFunctionBody(e, !1, r), this.finishNode(e, t)
    }
    parseFunctionBody(e, t, r = !1) {
      const n = t && !this.match(5)
      if ((this.expressionScope.enter(kf()), n))
        (e.body = this.parseMaybeAssign()), this.checkParams(e, !1, t, !1)
      else {
        const n = this.state.strict,
          i = this.state.labels
        ;(this.state.labels = []),
          this.prodParam.enter(4 | this.prodParam.currentFlags()),
          (e.body = this.parseBlock(!0, !1, (i) => {
            const a = !this.isSimpleParamList(e.params)
            i &&
              a &&
              this.raise(Xh.IllegalLanguageModeDirective, {
                at:
                  ('method' !== e.kind && 'constructor' !== e.kind) || !e.key
                    ? e
                    : e.key.loc.end,
              })
            const s = !n && this.state.strict
            this.checkParams(e, !(this.state.strict || t || r || a), t, s),
              this.state.strict && e.id && this.checkIdentifier(e.id, 65, s)
          })),
          this.prodParam.exit(),
          (this.state.labels = i)
      }
      this.expressionScope.exit()
    }
    isSimpleParameter(e) {
      return 'Identifier' === e.type
    }
    isSimpleParamList(e) {
      for (let t = 0, r = e.length; t < r; t++)
        if (!this.isSimpleParameter(e[t])) return !1
      return !0
    }
    checkParams(e, t, r, n = !0) {
      const i = !t && new Set(),
        a = { type: 'FormalParameters' }
      for (const t of e.params)
        this.checkLVal(t, {
          in: a,
          binding: 5,
          checkClashes: i,
          strictModeChanged: n,
        })
    }
    parseExprList(e, t, r, n) {
      const i = []
      let a = !0
      for (; !this.eat(e); ) {
        if (a) a = !1
        else if ((this.expect(12), this.match(e))) {
          n && this.addTrailingCommaExtraToNode(n), this.next()
          break
        }
        i.push(this.parseExprListItem(t, r))
      }
      return i
    }
    parseExprListItem(e, t, r) {
      let n
      if (this.match(12))
        e ||
          this.raise(Xh.UnexpectedToken, {
            at: this.state.curPosition(),
            unexpected: ',',
          }),
          (n = null)
      else if (this.match(21)) {
        const e = this.state.start,
          r = this.state.startLoc
        n = this.parseParenItem(this.parseSpread(t), e, r)
      } else if (this.match(17)) {
        this.expectPlugin('partialApplication'),
          r ||
            this.raise(Xh.UnexpectedArgumentPlaceholder, {
              at: this.state.startLoc,
            })
        const e = this.startNode()
        this.next(), (n = this.finishNode(e, 'ArgumentPlaceholder'))
      } else n = this.parseMaybeAssignAllowIn(t, this.parseParenItem)
      return n
    }
    parseIdentifier(e) {
      const t = this.startNode(),
        r = this.parseIdentifierName(t.start, e)
      return this.createIdentifier(t, r)
    }
    createIdentifier(e, t) {
      return (
        (e.name = t),
        (e.loc.identifierName = t),
        this.finishNode(e, 'Identifier')
      )
    }
    parseIdentifierName(e, t) {
      let r
      const { startLoc: n, type: i } = this.state
      if (!wd(i)) throw this.unexpected()
      r = this.state.value
      const a = i <= 92
      return (
        t ? a && this.replaceToken(128) : this.checkReservedWord(r, n, a, !1),
        this.next(),
        r
      )
    }
    checkReservedWord(e, t, r, n) {
      if (e.length > 10) return
      if (
        !(function (e) {
          return Gd.has(e)
        })(e)
      )
        return
      if ('yield' === e) {
        if (this.prodParam.hasYield)
          return void this.raise(Xh.YieldBindingIdentifier, { at: t })
      } else if ('await' === e) {
        if (this.prodParam.hasAwait)
          return void this.raise(Xh.AwaitBindingIdentifier, { at: t })
        if (this.scope.inStaticBlock)
          return void this.raise(Xh.AwaitBindingIdentifierInStaticBlock, {
            at: t,
          })
        this.expressionScope.recordAsyncArrowParametersError({ at: t })
      } else if (
        'arguments' === e &&
        this.scope.inClassAndNotInNonArrowFunction
      )
        return void this.raise(Xh.ArgumentsInClass, { at: t })
      if (
        r &&
        (function (e) {
          return Ud.has(e)
        })(e)
      )
        return void this.raise(Xh.UnexpectedKeyword, { at: t, keyword: e })
      ;(this.state.strict ? (n ? Kd : $d) : Vd)(e, this.inModule) &&
        this.raise(Xh.UnexpectedReservedWord, { at: t, reservedWord: e })
    }
    isAwaitAllowed() {
      return (
        !!this.prodParam.hasAwait ||
        !(!this.options.allowAwaitOutsideFunction || this.scope.inFunction)
      )
    }
    parseAwait(e, t) {
      const r = this.startNodeAt(e, t)
      return (
        this.expressionScope.recordParameterInitializerError(
          Xh.AwaitExpressionFormalParameter,
          { at: r }
        ),
        this.eat(55) && this.raise(Xh.ObsoleteAwaitStar, { at: r }),
        this.scope.inFunction ||
          this.options.allowAwaitOutsideFunction ||
          (this.isAmbiguousAwait()
            ? (this.ambiguousScriptDifferentAst = !0)
            : (this.sawUnambiguousESM = !0)),
        this.state.soloAwait || (r.argument = this.parseMaybeUnary(null, !0)),
        this.finishNode(r, 'AwaitExpression')
      )
    }
    isAmbiguousAwait() {
      if (this.hasPrecedingLineBreak()) return !0
      const { type: e } = this.state
      return (
        53 === e ||
        10 === e ||
        0 === e ||
        Rd(e) ||
        133 === e ||
        56 === e ||
        (this.hasPlugin('v8intrinsic') && 54 === e)
      )
    }
    parseYield() {
      const e = this.startNode()
      this.expressionScope.recordParameterInitializerError(
        Xh.YieldInParameter,
        { at: e }
      ),
        this.next()
      let t = !1,
        r = null
      if (!this.hasPrecedingLineBreak())
        switch (((t = this.eat(55)), this.state.type)) {
          case 13:
          case 135:
          case 8:
          case 11:
          case 3:
          case 9:
          case 14:
          case 12:
            if (!t) break
          default:
            r = this.parseMaybeAssign()
        }
      return (
        (e.delegate = t),
        (e.argument = r),
        this.finishNode(e, 'YieldExpression')
      )
    }
    checkPipelineAtInfixOperator(e, t) {
      this.hasPlugin(['pipelineOperator', { proposal: 'smart' }]) &&
        'SequenceExpression' === e.type &&
        this.raise(Xh.PipelineHeadSequenceExpression, { at: t })
    }
    parseSmartPipelineBodyInStyle(e, t, r) {
      const n = this.startNodeAt(t, r)
      return this.isSimpleReference(e)
        ? ((n.callee = e), this.finishNode(n, 'PipelineBareFunction'))
        : (this.checkSmartPipeTopicBodyEarlyErrors(r),
          (n.expression = e),
          this.finishNode(n, 'PipelineTopicExpression'))
    }
    isSimpleReference(e) {
      switch (e.type) {
        case 'MemberExpression':
          return !e.computed && this.isSimpleReference(e.object)
        case 'Identifier':
          return !0
        default:
          return !1
      }
    }
    checkSmartPipeTopicBodyEarlyErrors(e) {
      if (this.match(19))
        throw this.raise(Xh.PipelineBodyNoArrow, { at: this.state.startLoc })
      this.topicReferenceWasUsedInCurrentContext() ||
        this.raise(Xh.PipelineTopicUnused, { at: e })
    }
    withTopicBindingContext(e) {
      const t = this.state.topicContext
      this.state.topicContext = {
        maxNumOfResolvableTopics: 1,
        maxTopicIndex: null,
      }
      try {
        return e()
      } finally {
        this.state.topicContext = t
      }
    }
    withSmartMixTopicForbiddingContext(e) {
      if (!this.hasPlugin(['pipelineOperator', { proposal: 'smart' }]))
        return e()
      {
        const t = this.state.topicContext
        this.state.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null,
        }
        try {
          return e()
        } finally {
          this.state.topicContext = t
        }
      }
    }
    withSoloAwaitPermittingContext(e) {
      const t = this.state.soloAwait
      this.state.soloAwait = !0
      try {
        return e()
      } finally {
        this.state.soloAwait = t
      }
    }
    allowInAnd(e) {
      const t = this.prodParam.currentFlags()
      if (8 & ~t) {
        this.prodParam.enter(8 | t)
        try {
          return e()
        } finally {
          this.prodParam.exit()
        }
      }
      return e()
    }
    disallowInAnd(e) {
      const t = this.prodParam.currentFlags()
      if (8 & t) {
        this.prodParam.enter(-9 & t)
        try {
          return e()
        } finally {
          this.prodParam.exit()
        }
      }
      return e()
    }
    registerTopicReference() {
      this.state.topicContext.maxTopicIndex = 0
    }
    topicReferenceIsAllowedInCurrentContext() {
      return this.state.topicContext.maxNumOfResolvableTopics >= 1
    }
    topicReferenceWasUsedInCurrentContext() {
      return (
        null != this.state.topicContext.maxTopicIndex &&
        this.state.topicContext.maxTopicIndex >= 0
      )
    }
    parseFSharpPipelineBody(e) {
      const t = this.state.start,
        r = this.state.startLoc
      this.state.potentialArrowAt = this.state.start
      const n = this.state.inFSharpPipelineDirectBody
      this.state.inFSharpPipelineDirectBody = !0
      const i = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), t, r, e)
      return (this.state.inFSharpPipelineDirectBody = n), i
    }
    parseModuleExpression() {
      this.expectPlugin('moduleBlocks')
      const e = this.startNode()
      this.next(), this.eat(5)
      const t = this.initializeScopes(!0)
      this.enterInitialScopes()
      const r = this.startNode()
      try {
        e.body = this.parseProgram(r, 8, 'module')
      } finally {
        t()
      }
      return this.eat(8), this.finishNode(e, 'ModuleExpression')
    }
    parsePropertyNamePrefixOperator(e) {}
  } {
    parseTopLevel(e, t) {
      return (
        (e.program = this.parseProgram(t)),
        (e.comments = this.state.comments),
        this.options.tokens &&
          (e.tokens = (function (e, t) {
            for (let r = 0; r < e.length; r++) {
              const n = e[r],
                { type: i } = n
              if ('number' == typeof i) {
                if (134 === i) {
                  const { loc: t, start: i, value: a, end: s } = n,
                    o = i + 1,
                    l = Bh(t.start, 1)
                  e.splice(
                    r,
                    1,
                    new vf({
                      type: kd(27),
                      value: '#',
                      start: i,
                      end: o,
                      startLoc: t.start,
                      endLoc: l,
                    }),
                    new vf({
                      type: kd(128),
                      value: a,
                      start: o,
                      end: s,
                      startLoc: l,
                      endLoc: t.end,
                    })
                  ),
                    r++
                  continue
                }
                if (Rd(i)) {
                  const { loc: a, start: s, value: o, end: l } = n,
                    c = s + 1,
                    u = Bh(a.start, 1)
                  let p, h, d, f, m
                  ;(p =
                    96 === t.charCodeAt(s)
                      ? new vf({
                          type: kd(22),
                          value: '`',
                          start: s,
                          end: c,
                          startLoc: a.start,
                          endLoc: u,
                        })
                      : new vf({
                          type: kd(8),
                          value: '}',
                          start: s,
                          end: c,
                          startLoc: a.start,
                          endLoc: u,
                        })),
                    24 === i
                      ? ((d = l - 1),
                        (f = Bh(a.end, -1)),
                        (h = null === o ? null : o.slice(1, -1)),
                        (m = new vf({
                          type: kd(22),
                          value: '`',
                          start: d,
                          end: l,
                          startLoc: f,
                          endLoc: a.end,
                        })))
                      : ((d = l - 2),
                        (f = Bh(a.end, -2)),
                        (h = null === o ? null : o.slice(1, -2)),
                        (m = new vf({
                          type: kd(23),
                          value: '${',
                          start: d,
                          end: l,
                          startLoc: f,
                          endLoc: a.end,
                        }))),
                    e.splice(
                      r,
                      1,
                      p,
                      new vf({
                        type: kd(20),
                        value: h,
                        start: c,
                        end: d,
                        startLoc: u,
                        endLoc: f,
                      }),
                      m
                    ),
                    (r += 2)
                  continue
                }
                n.type = kd(i)
              }
            }
            return e
          })(this.tokens, this.input)),
        this.finishNode(e, 'File')
      )
    }
    parseProgram(e, t = 135, r = this.options.sourceType) {
      if (
        ((e.sourceType = r),
        (e.interpreter = this.parseInterpreterDirective()),
        this.parseBlockBody(e, !0, !0, t),
        this.inModule &&
          !this.options.allowUndeclaredExports &&
          this.scope.undefinedExports.size > 0)
      )
        for (const [e, t] of Array.from(this.scope.undefinedExports))
          this.raise(Xh.ModuleExportUndefined, { at: t, localName: e })
      return this.finishNode(e, 'Program')
    }
    stmtToDirective(e) {
      const t = e
      ;(t.type = 'Directive'), (t.value = t.expression), delete t.expression
      const r = t.value,
        n = r.value,
        i = this.input.slice(r.start, r.end),
        a = (r.value = i.slice(1, -1))
      return (
        this.addExtra(r, 'raw', i),
        this.addExtra(r, 'rawValue', a),
        this.addExtra(r, 'expressionValue', n),
        (r.type = 'DirectiveLiteral'),
        t
      )
    }
    parseInterpreterDirective() {
      if (!this.match(28)) return null
      const e = this.startNode()
      return (
        (e.value = this.state.value),
        this.next(),
        this.finishNode(e, 'InterpreterDirective')
      )
    }
    isLet(e) {
      return !!this.isContextual(99) && this.isLetKeyword(e)
    }
    isLetKeyword(e) {
      const t = this.nextTokenStart(),
        r = this.codePointAtPos(t)
      if (92 === r || 91 === r) return !0
      if (e) return !1
      if (123 === r) return !0
      if (Dd(r)) {
        if (((dm.lastIndex = t), dm.test(this.input))) {
          const e = this.codePointAtPos(dm.lastIndex)
          if (!Ld(e) && 92 !== e) return !1
        }
        return !0
      }
      return !1
    }
    parseStatement(e, t) {
      return (
        this.match(26) && this.parseDecorators(!0),
        this.parseStatementContent(e, t)
      )
    }
    parseStatementContent(e, t) {
      let r = this.state.type
      const n = this.startNode()
      let i
      switch ((this.isLet(e) && ((r = 74), (i = 'let')), r)) {
        case 60:
          return this.parseBreakContinueStatement(n, !0)
        case 63:
          return this.parseBreakContinueStatement(n, !1)
        case 64:
          return this.parseDebuggerStatement(n)
        case 90:
          return this.parseDoStatement(n)
        case 91:
          return this.parseForStatement(n)
        case 68:
          if (46 === this.lookaheadCharCode()) break
          return (
            e &&
              (this.state.strict
                ? this.raise(Xh.StrictFunction, { at: this.state.startLoc })
                : 'if' !== e &&
                  'label' !== e &&
                  this.raise(Xh.SloppyFunction, { at: this.state.startLoc })),
            this.parseFunctionStatement(n, !1, !e)
          )
        case 80:
          return e && this.unexpected(), this.parseClass(n, !0)
        case 69:
          return this.parseIfStatement(n)
        case 70:
          return this.parseReturnStatement(n)
        case 71:
          return this.parseSwitchStatement(n)
        case 72:
          return this.parseThrowStatement(n)
        case 73:
          return this.parseTryStatement(n)
        case 75:
        case 74:
          return (
            (i = i || this.state.value),
            e &&
              'var' !== i &&
              this.raise(Xh.UnexpectedLexicalDeclaration, {
                at: this.state.startLoc,
              }),
            this.parseVarStatement(n, i)
          )
        case 92:
          return this.parseWhileStatement(n)
        case 76:
          return this.parseWithStatement(n)
        case 5:
          return this.parseBlock()
        case 13:
          return this.parseEmptyStatement(n)
        case 83: {
          const e = this.lookaheadCharCode()
          if (40 === e || 46 === e) break
        }
        case 82: {
          let e
          return (
            this.options.allowImportExportEverywhere ||
              t ||
              this.raise(Xh.UnexpectedImportExport, {
                at: this.state.startLoc,
              }),
            this.next(),
            83 === r
              ? ((e = this.parseImport(n)),
                'ImportDeclaration' !== e.type ||
                  (e.importKind && 'value' !== e.importKind) ||
                  (this.sawUnambiguousESM = !0))
              : ((e = this.parseExport(n)),
                (('ExportNamedDeclaration' !== e.type ||
                  (e.exportKind && 'value' !== e.exportKind)) &&
                  ('ExportAllDeclaration' !== e.type ||
                    (e.exportKind && 'value' !== e.exportKind)) &&
                  'ExportDefaultDeclaration' !== e.type) ||
                  (this.sawUnambiguousESM = !0)),
            this.assertModuleNodeAllowed(n),
            e
          )
        }
        default:
          if (this.isAsyncFunction())
            return (
              e &&
                this.raise(Xh.AsyncFunctionInSingleStatementContext, {
                  at: this.state.startLoc,
                }),
              this.next(),
              this.parseFunctionStatement(n, !0, !e)
            )
      }
      const a = this.state.value,
        s = this.parseExpression()
      return xd(r) && 'Identifier' === s.type && this.eat(14)
        ? this.parseLabeledStatement(n, a, s, e)
        : this.parseExpressionStatement(n, s)
    }
    assertModuleNodeAllowed(e) {
      this.options.allowImportExportEverywhere ||
        this.inModule ||
        this.raise(Xh.ImportOutsideModule, { at: e })
    }
    takeDecorators(e) {
      const t = this.state.decoratorStack[this.state.decoratorStack.length - 1]
      t.length &&
        ((e.decorators = t),
        this.resetStartLocationFromNode(e, t[0]),
        (this.state.decoratorStack[this.state.decoratorStack.length - 1] = []))
    }
    canHaveLeadingDecorator() {
      return this.match(80)
    }
    parseDecorators(e) {
      const t = this.state.decoratorStack[this.state.decoratorStack.length - 1]
      for (; this.match(26); ) {
        const e = this.parseDecorator()
        t.push(e)
      }
      if (this.match(82))
        e || this.unexpected(),
          this.hasPlugin('decorators') &&
            !this.getPluginOption('decorators', 'decoratorsBeforeExport') &&
            this.raise(Xh.DecoratorExportClass, { at: this.state.startLoc })
      else if (!this.canHaveLeadingDecorator())
        throw this.raise(Xh.UnexpectedLeadingDecorator, {
          at: this.state.startLoc,
        })
    }
    parseDecorator() {
      this.expectOnePlugin(['decorators-legacy', 'decorators'])
      const e = this.startNode()
      if ((this.next(), this.hasPlugin('decorators'))) {
        this.state.decoratorStack.push([])
        const t = this.state.start,
          r = this.state.startLoc
        let n
        if (this.eat(10)) (n = this.parseExpression()), this.expect(11)
        else
          for (n = this.parseIdentifier(!1); this.eat(16); ) {
            const e = this.startNodeAt(t, r)
            ;(e.object = n),
              (e.property = this.parseIdentifier(!0)),
              (e.computed = !1),
              (n = this.finishNode(e, 'MemberExpression'))
          }
        ;(e.expression = this.parseMaybeDecoratorArguments(n)),
          this.state.decoratorStack.pop()
      } else e.expression = this.parseExprSubscripts()
      return this.finishNode(e, 'Decorator')
    }
    parseMaybeDecoratorArguments(e) {
      if (this.eat(10)) {
        const t = this.startNodeAtNode(e)
        return (
          (t.callee = e),
          (t.arguments = this.parseCallExpressionArguments(11, !1)),
          this.toReferencedList(t.arguments),
          this.finishNode(t, 'CallExpression')
        )
      }
      return e
    }
    parseBreakContinueStatement(e, t) {
      return (
        this.next(),
        this.isLineTerminator()
          ? (e.label = null)
          : ((e.label = this.parseIdentifier()), this.semicolon()),
        this.verifyBreakContinue(e, t),
        this.finishNode(e, t ? 'BreakStatement' : 'ContinueStatement')
      )
    }
    verifyBreakContinue(e, t) {
      let r
      for (r = 0; r < this.state.labels.length; ++r) {
        const n = this.state.labels[r]
        if (null == e.label || n.name === e.label.name) {
          if (null != n.kind && (t || 'loop' === n.kind)) break
          if (e.label && t) break
        }
      }
      if (r === this.state.labels.length) {
        const r = t ? 'BreakStatement' : 'ContinueStatement'
        this.raise(Xh.IllegalBreakContinue, { at: e, type: r })
      }
    }
    parseDebuggerStatement(e) {
      return (
        this.next(), this.semicolon(), this.finishNode(e, 'DebuggerStatement')
      )
    }
    parseHeaderExpression() {
      this.expect(10)
      const e = this.parseExpression()
      return this.expect(11), e
    }
    parseDoStatement(e) {
      return (
        this.next(),
        this.state.labels.push(um),
        (e.body = this.withSmartMixTopicForbiddingContext(() =>
          this.parseStatement('do')
        )),
        this.state.labels.pop(),
        this.expect(92),
        (e.test = this.parseHeaderExpression()),
        this.eat(13),
        this.finishNode(e, 'DoWhileStatement')
      )
    }
    parseForStatement(e) {
      this.next(), this.state.labels.push(um)
      let t = null
      if (
        (this.isAwaitAllowed() &&
          this.eatContextual(96) &&
          (t = this.state.lastTokStartLoc),
        this.scope.enter(0),
        this.expect(10),
        this.match(13))
      )
        return null !== t && this.unexpected(t), this.parseFor(e, null)
      const r = this.isContextual(99),
        n = r && this.isLetKeyword()
      if (this.match(74) || this.match(75) || n) {
        const r = this.startNode(),
          i = n ? 'let' : this.state.value
        return (
          this.next(),
          this.parseVar(r, !0, i),
          this.finishNode(r, 'VariableDeclaration'),
          (this.match(58) || this.isContextual(101)) &&
          1 === r.declarations.length
            ? this.parseForIn(e, r, t)
            : (null !== t && this.unexpected(t), this.parseFor(e, r))
        )
      }
      const i = this.isContextual(95),
        a = new If(),
        s = this.parseExpression(!0, a),
        o = this.isContextual(101)
      if (
        (o &&
          (r && this.raise(Xh.ForOfLet, { at: s }),
          null === t &&
            i &&
            'Identifier' === s.type &&
            this.raise(Xh.ForOfAsync, { at: s })),
        o || this.match(58))
      ) {
        this.checkDestructuringPrivate(a), this.toAssignable(s, !0)
        const r = o ? 'ForOfStatement' : 'ForInStatement'
        return this.checkLVal(s, { in: { type: r } }), this.parseForIn(e, s, t)
      }
      return (
        this.checkExpressionErrors(a, !0),
        null !== t && this.unexpected(t),
        this.parseFor(e, s)
      )
    }
    parseFunctionStatement(e, t, r) {
      return this.next(), this.parseFunction(e, 1 | (r ? 0 : 2), t)
    }
    parseIfStatement(e) {
      return (
        this.next(),
        (e.test = this.parseHeaderExpression()),
        (e.consequent = this.parseStatement('if')),
        (e.alternate = this.eat(66) ? this.parseStatement('if') : null),
        this.finishNode(e, 'IfStatement')
      )
    }
    parseReturnStatement(e) {
      return (
        this.prodParam.hasReturn ||
          this.options.allowReturnOutsideFunction ||
          this.raise(Xh.IllegalReturn, { at: this.state.startLoc }),
        this.next(),
        this.isLineTerminator()
          ? (e.argument = null)
          : ((e.argument = this.parseExpression()), this.semicolon()),
        this.finishNode(e, 'ReturnStatement')
      )
    }
    parseSwitchStatement(e) {
      this.next(), (e.discriminant = this.parseHeaderExpression())
      const t = (e.cases = [])
      let r, n
      for (
        this.expect(5), this.state.labels.push(pm), this.scope.enter(0);
        !this.match(8);

      )
        if (this.match(61) || this.match(65)) {
          const e = this.match(61)
          r && this.finishNode(r, 'SwitchCase'),
            t.push((r = this.startNode())),
            (r.consequent = []),
            this.next(),
            e
              ? (r.test = this.parseExpression())
              : (n &&
                  this.raise(Xh.MultipleDefaultsInSwitch, {
                    at: this.state.lastTokStartLoc,
                  }),
                (n = !0),
                (r.test = null)),
            this.expect(14)
        } else
          r ? r.consequent.push(this.parseStatement(null)) : this.unexpected()
      return (
        this.scope.exit(),
        r && this.finishNode(r, 'SwitchCase'),
        this.next(),
        this.state.labels.pop(),
        this.finishNode(e, 'SwitchStatement')
      )
    }
    parseThrowStatement(e) {
      return (
        this.next(),
        this.hasPrecedingLineBreak() &&
          this.raise(Xh.NewlineAfterThrow, { at: this.state.lastTokEndLoc }),
        (e.argument = this.parseExpression()),
        this.semicolon(),
        this.finishNode(e, 'ThrowStatement')
      )
    }
    parseCatchClauseParam() {
      const e = this.parseBindingAtom(),
        t = 'Identifier' === e.type
      return (
        this.scope.enter(t ? 8 : 0),
        this.checkLVal(e, {
          in: { type: 'CatchClause' },
          binding: 9,
          allowingSloppyLetBinding: !0,
        }),
        e
      )
    }
    parseTryStatement(e) {
      if (
        (this.next(),
        (e.block = this.parseBlock()),
        (e.handler = null),
        this.match(62))
      ) {
        const t = this.startNode()
        this.next(),
          this.match(10)
            ? (this.expect(10),
              (t.param = this.parseCatchClauseParam()),
              this.expect(11))
            : ((t.param = null), this.scope.enter(0)),
          (t.body = this.withSmartMixTopicForbiddingContext(() =>
            this.parseBlock(!1, !1)
          )),
          this.scope.exit(),
          (e.handler = this.finishNode(t, 'CatchClause'))
      }
      return (
        (e.finalizer = this.eat(67) ? this.parseBlock() : null),
        e.handler || e.finalizer || this.raise(Xh.NoCatchOrFinally, { at: e }),
        this.finishNode(e, 'TryStatement')
      )
    }
    parseVarStatement(e, t, r = !1) {
      return (
        this.next(),
        this.parseVar(e, !1, t, r),
        this.semicolon(),
        this.finishNode(e, 'VariableDeclaration')
      )
    }
    parseWhileStatement(e) {
      return (
        this.next(),
        (e.test = this.parseHeaderExpression()),
        this.state.labels.push(um),
        (e.body = this.withSmartMixTopicForbiddingContext(() =>
          this.parseStatement('while')
        )),
        this.state.labels.pop(),
        this.finishNode(e, 'WhileStatement')
      )
    }
    parseWithStatement(e) {
      return (
        this.state.strict &&
          this.raise(Xh.StrictWith, { at: this.state.startLoc }),
        this.next(),
        (e.object = this.parseHeaderExpression()),
        (e.body = this.withSmartMixTopicForbiddingContext(() =>
          this.parseStatement('with')
        )),
        this.finishNode(e, 'WithStatement')
      )
    }
    parseEmptyStatement(e) {
      return this.next(), this.finishNode(e, 'EmptyStatement')
    }
    parseLabeledStatement(e, t, r, n) {
      for (const e of this.state.labels)
        e.name === t &&
          this.raise(Xh.LabelRedeclaration, { at: r, labelName: t })
      const i =
        (a = this.state.type) >= 90 && a <= 92
          ? 'loop'
          : this.match(71)
          ? 'switch'
          : null
      var a
      for (let t = this.state.labels.length - 1; t >= 0; t--) {
        const r = this.state.labels[t]
        if (r.statementStart !== e.start) break
        ;(r.statementStart = this.state.start), (r.kind = i)
      }
      return (
        this.state.labels.push({
          name: t,
          kind: i,
          statementStart: this.state.start,
        }),
        (e.body = this.parseStatement(
          n ? (-1 === n.indexOf('label') ? n + 'label' : n) : 'label'
        )),
        this.state.labels.pop(),
        (e.label = r),
        this.finishNode(e, 'LabeledStatement')
      )
    }
    parseExpressionStatement(e, t) {
      return (
        (e.expression = t),
        this.semicolon(),
        this.finishNode(e, 'ExpressionStatement')
      )
    }
    parseBlock(e = !1, t = !0, r) {
      const n = this.startNode()
      return (
        e && this.state.strictErrors.clear(),
        this.expect(5),
        t && this.scope.enter(0),
        this.parseBlockBody(n, e, !1, 8, r),
        t && this.scope.exit(),
        this.finishNode(n, 'BlockStatement')
      )
    }
    isValidDirective(e) {
      return (
        'ExpressionStatement' === e.type &&
        'StringLiteral' === e.expression.type &&
        !e.expression.extra.parenthesized
      )
    }
    parseBlockBody(e, t, r, n, i) {
      const a = (e.body = []),
        s = (e.directives = [])
      this.parseBlockOrModuleBlockBody(a, t ? s : void 0, r, n, i)
    }
    parseBlockOrModuleBlockBody(e, t, r, n, i) {
      const a = this.state.strict
      let s = !1,
        o = !1
      for (; !this.match(n); ) {
        const n = this.parseStatement(null, r)
        if (t && !o) {
          if (this.isValidDirective(n)) {
            const e = this.stmtToDirective(n)
            t.push(e),
              s ||
                'use strict' !== e.value.value ||
                ((s = !0), this.setStrict(!0))
            continue
          }
          ;(o = !0), this.state.strictErrors.clear()
        }
        e.push(n)
      }
      i && i.call(this, s), a || this.setStrict(!1), this.next()
    }
    parseFor(e, t) {
      return (
        (e.init = t),
        this.semicolon(!1),
        (e.test = this.match(13) ? null : this.parseExpression()),
        this.semicolon(!1),
        (e.update = this.match(11) ? null : this.parseExpression()),
        this.expect(11),
        (e.body = this.withSmartMixTopicForbiddingContext(() =>
          this.parseStatement('for')
        )),
        this.scope.exit(),
        this.state.labels.pop(),
        this.finishNode(e, 'ForStatement')
      )
    }
    parseForIn(e, t, r) {
      const n = this.match(58)
      return (
        this.next(),
        n ? null !== r && this.unexpected(r) : (e.await = null !== r),
        'VariableDeclaration' !== t.type ||
          null == t.declarations[0].init ||
          (n &&
            !this.state.strict &&
            'var' === t.kind &&
            'Identifier' === t.declarations[0].id.type) ||
          this.raise(Xh.ForInOfLoopInitializer, {
            at: t,
            type: n ? 'ForInStatement' : 'ForOfStatement',
          }),
        'AssignmentPattern' === t.type &&
          this.raise(Xh.InvalidLhs, {
            at: t,
            ancestor: { type: 'ForStatement' },
          }),
        (e.left = t),
        (e.right = n ? this.parseExpression() : this.parseMaybeAssignAllowIn()),
        this.expect(11),
        (e.body = this.withSmartMixTopicForbiddingContext(() =>
          this.parseStatement('for')
        )),
        this.scope.exit(),
        this.state.labels.pop(),
        this.finishNode(e, n ? 'ForInStatement' : 'ForOfStatement')
      )
    }
    parseVar(e, t, r, n = !1) {
      const i = (e.declarations = [])
      for (e.kind = r; ; ) {
        const e = this.startNode()
        if (
          (this.parseVarId(e, r),
          (e.init = this.eat(29)
            ? t
              ? this.parseMaybeAssignDisallowIn()
              : this.parseMaybeAssignAllowIn()
            : null),
          null !== e.init ||
            n ||
            ('Identifier' === e.id.type ||
            (t && (this.match(58) || this.isContextual(101)))
              ? 'const' !== r ||
                this.match(58) ||
                this.isContextual(101) ||
                this.raise(Xh.DeclarationMissingInitializer, {
                  at: this.state.lastTokEndLoc,
                  kind: 'const',
                })
              : this.raise(Xh.DeclarationMissingInitializer, {
                  at: this.state.lastTokEndLoc,
                  kind: 'destructuring',
                })),
          i.push(this.finishNode(e, 'VariableDeclarator')),
          !this.eat(12))
        )
          break
      }
      return e
    }
    parseVarId(e, t) {
      ;(e.id = this.parseBindingAtom()),
        this.checkLVal(e.id, {
          in: { type: 'VariableDeclarator' },
          binding: 'var' === t ? 5 : 9,
        })
    }
    parseFunction(e, t = 0, r = !1) {
      const n = 1 & t,
        i = 2 & t,
        a = !(!n || 4 & t)
      this.initFunction(e, r),
        this.match(55) &&
          i &&
          this.raise(Xh.GeneratorInSingleStatementContext, {
            at: this.state.startLoc,
          }),
        (e.generator = this.eat(55)),
        n && (e.id = this.parseFunctionId(a))
      const s = this.state.maybeInArrowParameters
      return (
        (this.state.maybeInArrowParameters = !1),
        this.scope.enter(2),
        this.prodParam.enter(Of(r, e.generator)),
        n || (e.id = this.parseFunctionId()),
        this.parseFunctionParams(e, !1),
        this.withSmartMixTopicForbiddingContext(() => {
          this.parseFunctionBodyAndFinish(
            e,
            n ? 'FunctionDeclaration' : 'FunctionExpression'
          )
        }),
        this.prodParam.exit(),
        this.scope.exit(),
        n && !i && this.registerFunctionStatementId(e),
        (this.state.maybeInArrowParameters = s),
        e
      )
    }
    parseFunctionId(e) {
      return e || xd(this.state.type) ? this.parseIdentifier() : null
    }
    parseFunctionParams(e, t) {
      this.expect(10),
        this.expressionScope.enter(new Cf(3)),
        (e.params = this.parseBindingList(11, 41, !1, t)),
        this.expressionScope.exit()
    }
    registerFunctionStatementId(e) {
      e.id &&
        this.scope.declareName(
          e.id.name,
          this.state.strict || e.generator || e.async
            ? this.scope.treatFunctionsAsVar
              ? 5
              : 9
            : 17,
          e.id.loc.start
        )
    }
    parseClass(e, t, r) {
      this.next(), this.takeDecorators(e)
      const n = this.state.strict
      return (
        (this.state.strict = !0),
        this.parseClassId(e, t, r),
        this.parseClassSuper(e),
        (e.body = this.parseClassBody(!!e.superClass, n)),
        this.finishNode(e, t ? 'ClassDeclaration' : 'ClassExpression')
      )
    }
    isClassProperty() {
      return this.match(29) || this.match(13) || this.match(8)
    }
    isClassMethod() {
      return this.match(10)
    }
    isNonstaticConstructor(e) {
      return !(
        e.computed ||
        e.static ||
        ('constructor' !== e.key.name && 'constructor' !== e.key.value)
      )
    }
    parseClassBody(e, t) {
      this.classScope.enter()
      const r = { hadConstructor: !1, hadSuperClass: e }
      let n = []
      const i = this.startNode()
      if (
        ((i.body = []),
        this.expect(5),
        this.withSmartMixTopicForbiddingContext(() => {
          for (; !this.match(8); ) {
            if (this.eat(13)) {
              if (n.length > 0)
                throw this.raise(Xh.DecoratorSemicolon, {
                  at: this.state.lastTokEndLoc,
                })
              continue
            }
            if (this.match(26)) {
              n.push(this.parseDecorator())
              continue
            }
            const e = this.startNode()
            n.length &&
              ((e.decorators = n),
              this.resetStartLocationFromNode(e, n[0]),
              (n = [])),
              this.parseClassMember(i, e, r),
              'constructor' === e.kind &&
                e.decorators &&
                e.decorators.length > 0 &&
                this.raise(Xh.DecoratorConstructor, { at: e })
          }
        }),
        (this.state.strict = t),
        this.next(),
        n.length)
      )
        throw this.raise(Xh.TrailingDecorator, { at: this.state.startLoc })
      return this.classScope.exit(), this.finishNode(i, 'ClassBody')
    }
    parseClassMemberFromModifier(e, t) {
      const r = this.parseIdentifier(!0)
      if (this.isClassMethod()) {
        const n = t
        return (
          (n.kind = 'method'),
          (n.computed = !1),
          (n.key = r),
          (n.static = !1),
          this.pushClassMethod(e, n, !1, !1, !1, !1),
          !0
        )
      }
      if (this.isClassProperty()) {
        const n = t
        return (
          (n.computed = !1),
          (n.key = r),
          (n.static = !1),
          e.body.push(this.parseClassProperty(n)),
          !0
        )
      }
      return this.resetPreviousNodeTrailingComments(r), !1
    }
    parseClassMember(e, t, r) {
      const n = this.isContextual(104)
      if (n) {
        if (this.parseClassMemberFromModifier(e, t)) return
        if (this.eat(5)) return void this.parseClassStaticBlock(e, t)
      }
      this.parseClassMemberWithIsStatic(e, t, r, n)
    }
    parseClassMemberWithIsStatic(e, t, r, n) {
      const i = t,
        a = t,
        s = t,
        o = t,
        l = t,
        c = i,
        u = i
      if (
        ((t.static = n), this.parsePropertyNamePrefixOperator(t), this.eat(55))
      ) {
        c.kind = 'method'
        const t = this.match(134)
        return (
          this.parseClassElementName(c),
          t
            ? void this.pushClassPrivateMethod(e, a, !0, !1)
            : (this.isNonstaticConstructor(i) &&
                this.raise(Xh.ConstructorIsGenerator, { at: i.key }),
              void this.pushClassMethod(e, i, !0, !1, !1, !1))
        )
      }
      const p = xd(this.state.type) && !this.state.containsEsc,
        h = this.match(134),
        d = this.parseClassElementName(t),
        f = this.state.startLoc
      if ((this.parsePostMemberNameModifiers(u), this.isClassMethod())) {
        if (((c.kind = 'method'), h))
          return void this.pushClassPrivateMethod(e, a, !1, !1)
        const n = this.isNonstaticConstructor(i)
        let s = !1
        n &&
          ((i.kind = 'constructor'),
          r.hadConstructor &&
            !this.hasPlugin('typescript') &&
            this.raise(Xh.DuplicateConstructor, { at: d }),
          n &&
            this.hasPlugin('typescript') &&
            t.override &&
            this.raise(Xh.OverrideOnConstructor, { at: d }),
          (r.hadConstructor = !0),
          (s = r.hadSuperClass)),
          this.pushClassMethod(e, i, !1, !1, n, s)
      } else if (this.isClassProperty())
        h ? this.pushClassPrivateProperty(e, o) : this.pushClassProperty(e, s)
      else if (p && 'async' === d.name && !this.isLineTerminator()) {
        this.resetPreviousNodeTrailingComments(d)
        const t = this.eat(55)
        u.optional && this.unexpected(f), (c.kind = 'method')
        const r = this.match(134)
        this.parseClassElementName(c),
          this.parsePostMemberNameModifiers(u),
          r
            ? this.pushClassPrivateMethod(e, a, t, !0)
            : (this.isNonstaticConstructor(i) &&
                this.raise(Xh.ConstructorIsAsync, { at: i.key }),
              this.pushClassMethod(e, i, t, !0, !1, !1))
      } else if (
        !p ||
        ('get' !== d.name && 'set' !== d.name) ||
        (this.match(55) && this.isLineTerminator())
      )
        if (p && 'accessor' === d.name && !this.isLineTerminator()) {
          this.expectPlugin('decoratorAutoAccessors'),
            this.resetPreviousNodeTrailingComments(d)
          const t = this.match(134)
          this.parseClassElementName(s), this.pushClassAccessorProperty(e, l, t)
        } else
          this.isLineTerminator()
            ? h
              ? this.pushClassPrivateProperty(e, o)
              : this.pushClassProperty(e, s)
            : this.unexpected()
      else {
        this.resetPreviousNodeTrailingComments(d), (c.kind = d.name)
        const t = this.match(134)
        this.parseClassElementName(i),
          t
            ? this.pushClassPrivateMethod(e, a, !1, !1)
            : (this.isNonstaticConstructor(i) &&
                this.raise(Xh.ConstructorIsAccessor, { at: i.key }),
              this.pushClassMethod(e, i, !1, !1, !1, !1)),
          this.checkGetterSetterParams(i)
      }
    }
    parseClassElementName(e) {
      const { type: t, value: r } = this.state
      if (
        ((128 !== t && 129 !== t) ||
          !e.static ||
          'prototype' !== r ||
          this.raise(Xh.StaticPrototype, { at: this.state.startLoc }),
        134 === t)
      ) {
        'constructor' === r &&
          this.raise(Xh.ConstructorClassPrivateField, {
            at: this.state.startLoc,
          })
        const t = this.parsePrivateName()
        return (e.key = t), t
      }
      return this.parsePropertyName(e)
    }
    parseClassStaticBlock(e, t) {
      var r
      this.scope.enter(208)
      const n = this.state.labels
      ;(this.state.labels = []), this.prodParam.enter(0)
      const i = (t.body = [])
      this.parseBlockOrModuleBlockBody(i, void 0, !1, 8),
        this.prodParam.exit(),
        this.scope.exit(),
        (this.state.labels = n),
        e.body.push(this.finishNode(t, 'StaticBlock')),
        null != (r = t.decorators) &&
          r.length &&
          this.raise(Xh.DecoratorStaticBlock, { at: t })
    }
    pushClassProperty(e, t) {
      t.computed ||
        ('constructor' !== t.key.name && 'constructor' !== t.key.value) ||
        this.raise(Xh.ConstructorClassField, { at: t.key }),
        e.body.push(this.parseClassProperty(t))
    }
    pushClassPrivateProperty(e, t) {
      const r = this.parseClassPrivateProperty(t)
      e.body.push(r),
        this.classScope.declarePrivateName(
          this.getPrivateNameSV(r.key),
          0,
          r.key.loc.start
        )
    }
    pushClassAccessorProperty(e, t, r) {
      if (!r && !t.computed) {
        const e = t.key
        ;('constructor' !== e.name && 'constructor' !== e.value) ||
          this.raise(Xh.ConstructorClassField, { at: e })
      }
      const n = this.parseClassAccessorProperty(t)
      e.body.push(n),
        r &&
          this.classScope.declarePrivateName(
            this.getPrivateNameSV(n.key),
            0,
            n.key.loc.start
          )
    }
    pushClassMethod(e, t, r, n, i, a) {
      e.body.push(this.parseMethod(t, r, n, i, a, 'ClassMethod', !0))
    }
    pushClassPrivateMethod(e, t, r, n) {
      const i = this.parseMethod(t, r, n, !1, !1, 'ClassPrivateMethod', !0)
      e.body.push(i)
      const a =
        'get' === i.kind
          ? i.static
            ? 6
            : 2
          : 'set' === i.kind
          ? i.static
            ? 5
            : 1
          : 0
      this.declareClassPrivateMethodInScope(i, a)
    }
    declareClassPrivateMethodInScope(e, t) {
      this.classScope.declarePrivateName(
        this.getPrivateNameSV(e.key),
        t,
        e.key.loc.start
      )
    }
    parsePostMemberNameModifiers(e) {}
    parseClassPrivateProperty(e) {
      return (
        this.parseInitializer(e),
        this.semicolon(),
        this.finishNode(e, 'ClassPrivateProperty')
      )
    }
    parseClassProperty(e) {
      return (
        this.parseInitializer(e),
        this.semicolon(),
        this.finishNode(e, 'ClassProperty')
      )
    }
    parseClassAccessorProperty(e) {
      return (
        this.parseInitializer(e),
        this.semicolon(),
        this.finishNode(e, 'ClassAccessorProperty')
      )
    }
    parseInitializer(e) {
      this.scope.enter(80),
        this.expressionScope.enter(kf()),
        this.prodParam.enter(0),
        (e.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null),
        this.expressionScope.exit(),
        this.prodParam.exit(),
        this.scope.exit()
    }
    parseClassId(e, t, r, n = 139) {
      if (xd(this.state.type))
        (e.id = this.parseIdentifier()),
          t && this.declareNameFromIdentifier(e.id, n)
      else {
        if (!r && t)
          throw this.raise(Xh.MissingClassName, { at: this.state.startLoc })
        e.id = null
      }
    }
    parseClassSuper(e) {
      e.superClass = this.eat(81) ? this.parseExprSubscripts() : null
    }
    parseExport(e) {
      const t = this.maybeParseExportDefaultSpecifier(e),
        r = !t || this.eat(12),
        n = r && this.eatExportStar(e),
        i = n && this.maybeParseExportNamespaceSpecifier(e),
        a = r && (!i || this.eat(12)),
        s = t || n
      if (n && !i)
        return (
          t && this.unexpected(),
          this.parseExportFrom(e, !0),
          this.finishNode(e, 'ExportAllDeclaration')
        )
      const o = this.maybeParseExportNamedSpecifiers(e)
      if ((t && r && !n && !o) || (i && a && !o)) throw this.unexpected(null, 5)
      let l
      if (
        (s || o
          ? ((l = !1), this.parseExportFrom(e, s))
          : (l = this.maybeParseExportDeclaration(e)),
        s || o || l)
      )
        return (
          this.checkExport(e, !0, !1, !!e.source),
          this.finishNode(e, 'ExportNamedDeclaration')
        )
      if (this.eat(65))
        return (
          (e.declaration = this.parseExportDefaultExpression()),
          this.checkExport(e, !0, !0),
          this.finishNode(e, 'ExportDefaultDeclaration')
        )
      throw this.unexpected(null, 5)
    }
    eatExportStar(e) {
      return this.eat(55)
    }
    maybeParseExportDefaultSpecifier(e) {
      if (this.isExportDefaultSpecifier()) {
        this.expectPlugin('exportDefaultFrom')
        const t = this.startNode()
        return (
          (t.exported = this.parseIdentifier(!0)),
          (e.specifiers = [this.finishNode(t, 'ExportDefaultSpecifier')]),
          !0
        )
      }
      return !1
    }
    maybeParseExportNamespaceSpecifier(e) {
      if (this.isContextual(93)) {
        e.specifiers || (e.specifiers = [])
        const t = this.startNodeAt(
          this.state.lastTokStart,
          this.state.lastTokStartLoc
        )
        return (
          this.next(),
          (t.exported = this.parseModuleExportName()),
          e.specifiers.push(this.finishNode(t, 'ExportNamespaceSpecifier')),
          !0
        )
      }
      return !1
    }
    maybeParseExportNamedSpecifiers(e) {
      if (this.match(5)) {
        e.specifiers || (e.specifiers = [])
        const t = 'type' === e.exportKind
        return (
          e.specifiers.push(...this.parseExportSpecifiers(t)),
          (e.source = null),
          (e.declaration = null),
          this.hasPlugin('importAssertions') && (e.assertions = []),
          !0
        )
      }
      return !1
    }
    maybeParseExportDeclaration(e) {
      return (
        !!this.shouldParseExportDeclaration() &&
        ((e.specifiers = []),
        (e.source = null),
        this.hasPlugin('importAssertions') && (e.assertions = []),
        (e.declaration = this.parseExportDeclaration(e)),
        !0)
      )
    }
    isAsyncFunction() {
      if (!this.isContextual(95)) return !1
      const e = this.nextTokenStart()
      return (
        !sf.test(this.input.slice(this.state.pos, e)) &&
        this.isUnparsedContextual(e, 'function')
      )
    }
    parseExportDefaultExpression() {
      const e = this.startNode(),
        t = this.isAsyncFunction()
      if (this.match(68) || t)
        return this.next(), t && this.next(), this.parseFunction(e, 5, t)
      if (this.match(80)) return this.parseClass(e, !0, !0)
      if (this.match(26))
        return (
          this.hasPlugin('decorators') &&
            this.getPluginOption('decorators', 'decoratorsBeforeExport') &&
            this.raise(Xh.DecoratorBeforeExport, { at: this.state.startLoc }),
          this.parseDecorators(!1),
          this.parseClass(e, !0, !0)
        )
      if (this.match(75) || this.match(74) || this.isLet())
        throw this.raise(Xh.UnsupportedDefaultExport, {
          at: this.state.startLoc,
        })
      const r = this.parseMaybeAssignAllowIn()
      return this.semicolon(), r
    }
    parseExportDeclaration(e) {
      return this.parseStatement(null)
    }
    isExportDefaultSpecifier() {
      const { type: e } = this.state
      if (xd(e)) {
        if ((95 === e && !this.state.containsEsc) || 99 === e) return !1
        if ((126 === e || 125 === e) && !this.state.containsEsc) {
          const { type: e } = this.lookahead()
          if ((xd(e) && 97 !== e) || 5 === e)
            return this.expectOnePlugin(['flow', 'typescript']), !1
        }
      } else if (!this.match(65)) return !1
      const t = this.nextTokenStart(),
        r = this.isUnparsedContextual(t, 'from')
      if (44 === this.input.charCodeAt(t) || (xd(this.state.type) && r))
        return !0
      if (this.match(65) && r) {
        const e = this.input.charCodeAt(this.nextTokenStartSince(t + 4))
        return 34 === e || 39 === e
      }
      return !1
    }
    parseExportFrom(e, t) {
      if (this.eatContextual(97)) {
        ;(e.source = this.parseImportSource()), this.checkExport(e)
        const t = this.maybeParseImportAssertions()
        t && (e.assertions = t)
      } else t && this.unexpected()
      this.semicolon()
    }
    shouldParseExportDeclaration() {
      const { type: e } = this.state
      if (
        26 === e &&
        (this.expectOnePlugin(['decorators', 'decorators-legacy']),
        this.hasPlugin('decorators'))
      ) {
        if (this.getPluginOption('decorators', 'decoratorsBeforeExport'))
          throw this.raise(Xh.DecoratorBeforeExport, {
            at: this.state.startLoc,
          })
        return !0
      }
      return (
        74 === e ||
        75 === e ||
        68 === e ||
        80 === e ||
        this.isLet() ||
        this.isAsyncFunction()
      )
    }
    checkExport(e, t, r, n) {
      if (t)
        if (r) {
          if (
            (this.checkDuplicateExports(e, 'default'),
            this.hasPlugin('exportDefaultFrom'))
          ) {
            var i
            const t = e.declaration
            'Identifier' !== t.type ||
              'from' !== t.name ||
              t.end - t.start != 4 ||
              (null != (i = t.extra) && i.parenthesized) ||
              this.raise(Xh.ExportDefaultFromAsIdentifier, { at: t })
          }
        } else if (e.specifiers && e.specifiers.length)
          for (const t of e.specifiers) {
            const { exported: e } = t,
              r = 'Identifier' === e.type ? e.name : e.value
            if ((this.checkDuplicateExports(t, r), !n && t.local)) {
              const { local: e } = t
              'Identifier' !== e.type
                ? this.raise(Xh.ExportBindingIsString, {
                    at: t,
                    localName: e.value,
                    exportName: r,
                  })
                : (this.checkReservedWord(e.name, e.loc.start, !0, !1),
                  this.scope.checkLocalExport(e))
            }
          }
        else if (e.declaration)
          if (
            'FunctionDeclaration' === e.declaration.type ||
            'ClassDeclaration' === e.declaration.type
          ) {
            const t = e.declaration.id
            if (!t) throw new Error('Assertion failure')
            this.checkDuplicateExports(e, t.name)
          } else if ('VariableDeclaration' === e.declaration.type)
            for (const t of e.declaration.declarations)
              this.checkDeclaration(t.id)
      if (
        this.state.decoratorStack[this.state.decoratorStack.length - 1].length
      )
        throw this.raise(Xh.UnsupportedDecoratorExport, { at: e })
    }
    checkDeclaration(e) {
      if ('Identifier' === e.type) this.checkDuplicateExports(e, e.name)
      else if ('ObjectPattern' === e.type)
        for (const t of e.properties) this.checkDeclaration(t)
      else if ('ArrayPattern' === e.type)
        for (const t of e.elements) t && this.checkDeclaration(t)
      else
        'ObjectProperty' === e.type
          ? this.checkDeclaration(e.value)
          : 'RestElement' === e.type
          ? this.checkDeclaration(e.argument)
          : 'AssignmentPattern' === e.type && this.checkDeclaration(e.left)
    }
    checkDuplicateExports(e, t) {
      this.exportedIdentifiers.has(t) &&
        ('default' === t
          ? this.raise(Xh.DuplicateDefaultExport, { at: e })
          : this.raise(Xh.DuplicateExport, { at: e, exportName: t })),
        this.exportedIdentifiers.add(t)
    }
    parseExportSpecifiers(e) {
      const t = []
      let r = !0
      for (this.expect(5); !this.eat(8); ) {
        if (r) r = !1
        else if ((this.expect(12), this.eat(8))) break
        const n = this.isContextual(126),
          i = this.match(129),
          a = this.startNode()
        ;(a.local = this.parseModuleExportName()),
          t.push(this.parseExportSpecifier(a, i, e, n))
      }
      return t
    }
    parseExportSpecifier(e, t, r, n) {
      return (
        this.eatContextual(93)
          ? (e.exported = this.parseModuleExportName())
          : t
          ? (e.exported = Mf(e.local))
          : e.exported || (e.exported = _f(e.local)),
        this.finishNode(e, 'ExportSpecifier')
      )
    }
    parseModuleExportName() {
      if (this.match(129)) {
        const e = this.parseStringLiteral(this.state.value),
          t = e.value.match(hm)
        return (
          t &&
            this.raise(Xh.ModuleExportNameHasLoneSurrogate, {
              at: e,
              surrogateCharCode: t[0].charCodeAt(0),
            }),
          e
        )
      }
      return this.parseIdentifier(!0)
    }
    parseImport(e) {
      if (((e.specifiers = []), !this.match(129))) {
        const t = !this.maybeParseDefaultImportSpecifier(e) || this.eat(12),
          r = t && this.maybeParseStarImportSpecifier(e)
        t && !r && this.parseNamedImportSpecifiers(e), this.expectContextual(97)
      }
      e.source = this.parseImportSource()
      const t = this.maybeParseImportAssertions()
      if (t) e.assertions = t
      else {
        const t = this.maybeParseModuleAttributes()
        t && (e.attributes = t)
      }
      return this.semicolon(), this.finishNode(e, 'ImportDeclaration')
    }
    parseImportSource() {
      return this.match(129) || this.unexpected(), this.parseExprAtom()
    }
    shouldParseDefaultImport(e) {
      return xd(this.state.type)
    }
    parseImportSpecifierLocal(e, t, r) {
      ;(t.local = this.parseIdentifier()),
        e.specifiers.push(this.finishImportSpecifier(t, r))
    }
    finishImportSpecifier(e, t) {
      return (
        this.checkLVal(e.local, { in: e, binding: 9 }), this.finishNode(e, t)
      )
    }
    parseAssertEntries() {
      const e = [],
        t = new Set()
      do {
        if (this.match(8)) break
        const r = this.startNode(),
          n = this.state.value
        if (
          (t.has(n) &&
            this.raise(Xh.ModuleAttributesWithDuplicateKeys, {
              at: this.state.startLoc,
              key: n,
            }),
          t.add(n),
          this.match(129)
            ? (r.key = this.parseStringLiteral(n))
            : (r.key = this.parseIdentifier(!0)),
          this.expect(14),
          !this.match(129))
        )
          throw this.raise(Xh.ModuleAttributeInvalidValue, {
            at: this.state.startLoc,
          })
        ;(r.value = this.parseStringLiteral(this.state.value)),
          this.finishNode(r, 'ImportAttribute'),
          e.push(r)
      } while (this.eat(12))
      return e
    }
    maybeParseModuleAttributes() {
      if (!this.match(76) || this.hasPrecedingLineBreak())
        return this.hasPlugin('moduleAttributes') ? [] : null
      this.expectPlugin('moduleAttributes'), this.next()
      const e = [],
        t = new Set()
      do {
        const r = this.startNode()
        if (
          ((r.key = this.parseIdentifier(!0)),
          'type' !== r.key.name &&
            this.raise(Xh.ModuleAttributeDifferentFromType, { at: r.key }),
          t.has(r.key.name) &&
            this.raise(Xh.ModuleAttributesWithDuplicateKeys, {
              at: r.key,
              key: r.key.name,
            }),
          t.add(r.key.name),
          this.expect(14),
          !this.match(129))
        )
          throw this.raise(Xh.ModuleAttributeInvalidValue, {
            at: this.state.startLoc,
          })
        ;(r.value = this.parseStringLiteral(this.state.value)),
          this.finishNode(r, 'ImportAttribute'),
          e.push(r)
      } while (this.eat(12))
      return e
    }
    maybeParseImportAssertions() {
      if (!this.isContextual(94) || this.hasPrecedingLineBreak())
        return this.hasPlugin('importAssertions') ? [] : null
      this.expectPlugin('importAssertions'), this.next(), this.eat(5)
      const e = this.parseAssertEntries()
      return this.eat(8), e
    }
    maybeParseDefaultImportSpecifier(e) {
      return (
        !!this.shouldParseDefaultImport(e) &&
        (this.parseImportSpecifierLocal(
          e,
          this.startNode(),
          'ImportDefaultSpecifier'
        ),
        !0)
      )
    }
    maybeParseStarImportSpecifier(e) {
      if (this.match(55)) {
        const t = this.startNode()
        return (
          this.next(),
          this.expectContextual(93),
          this.parseImportSpecifierLocal(e, t, 'ImportNamespaceSpecifier'),
          !0
        )
      }
      return !1
    }
    parseNamedImportSpecifiers(e) {
      let t = !0
      for (this.expect(5); !this.eat(8); ) {
        if (t) t = !1
        else {
          if (this.eat(14))
            throw this.raise(Xh.DestructureNamedImport, {
              at: this.state.startLoc,
            })
          if ((this.expect(12), this.eat(8))) break
        }
        const r = this.startNode(),
          n = this.match(129),
          i = this.isContextual(126)
        r.imported = this.parseModuleExportName()
        const a = this.parseImportSpecifier(
          r,
          n,
          'type' === e.importKind || 'typeof' === e.importKind,
          i
        )
        e.specifiers.push(a)
      }
    }
    parseImportSpecifier(e, t, r, n) {
      if (this.eatContextual(93)) e.local = this.parseIdentifier()
      else {
        const { imported: r } = e
        if (t)
          throw this.raise(Xh.ImportBindingIsString, {
            at: e,
            importName: r.value,
          })
        this.checkReservedWord(r.name, e.loc.start, !0, !0),
          e.local || (e.local = _f(r))
      }
      return this.finishImportSpecifier(e, 'ImportSpecifier')
    }
    isThisParam(e) {
      return 'Identifier' === e.type && 'this' === e.name
    }
  } {
    constructor(e, t) {
      super(
        (e = (function (e) {
          const t = {}
          for (const r of Object.keys(lm))
            t[r] = e && null != e[r] ? e[r] : lm[r]
          return t
        })(e)),
        t
      ),
        (this.options = e),
        this.initializeScopes(),
        (this.plugins = (function (e) {
          const t = new Map()
          for (const r of e) {
            const [e, n] = Array.isArray(r) ? r : [r, {}]
            t.has(e) || t.set(e, n || {})
          }
          return t
        })(this.options.plugins)),
        (this.filename = e.sourceFilename)
    }
    getScopeHandler() {
      return wf
    }
    parse() {
      this.enterInitialScopes()
      const e = this.startNode(),
        t = this.startNode()
      return (
        this.nextToken(),
        (e.errors = null),
        this.parseTopLevel(e, t),
        (e.errors = this.state.errors),
        e
      )
    }
  }
  function mm(e, t) {
    let r = fm
    return (
      null != e &&
        e.plugins &&
        (!(function (e) {
          if (tm(e, 'decorators')) {
            if (tm(e, 'decorators-legacy'))
              throw new Error(
                'Cannot use the decorators and decorators-legacy plugin together'
              )
            const t = rm(e, 'decorators', 'decoratorsBeforeExport')
            if (null == t)
              throw new Error(
                "The 'decorators' plugin requires a 'decoratorsBeforeExport' option, whose value must be a boolean. If you are migrating from Babylon/Babel 6 or want to use the old decorators proposal, you should use the 'decorators-legacy' plugin instead of 'decorators'."
              )
            if ('boolean' != typeof t)
              throw new Error("'decoratorsBeforeExport' must be a boolean.")
          }
          if (tm(e, 'flow') && tm(e, 'typescript'))
            throw new Error('Cannot combine flow and typescript plugins.')
          if (tm(e, 'placeholders') && tm(e, 'v8intrinsic'))
            throw new Error(
              'Cannot combine placeholders and v8intrinsic plugins.'
            )
          if (tm(e, 'pipelineOperator')) {
            const t = rm(e, 'pipelineOperator', 'proposal')
            if (!nm.includes(t)) {
              const e = nm.map((e) => `"${e}"`).join(', ')
              throw new Error(
                `"pipelineOperator" requires "proposal" option whose value must be one of: ${e}.`
              )
            }
            const r = tm(e, ['recordAndTuple', { syntaxType: 'hash' }])
            if ('hack' === t) {
              if (tm(e, 'placeholders'))
                throw new Error(
                  'Cannot combine placeholders plugin and Hack-style pipes.'
                )
              if (tm(e, 'v8intrinsic'))
                throw new Error(
                  'Cannot combine v8intrinsic plugin and Hack-style pipes.'
                )
              const t = rm(e, 'pipelineOperator', 'topicToken')
              if (!im.includes(t)) {
                const e = im.map((e) => `"${e}"`).join(', ')
                throw new Error(
                  `"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${e}.`
                )
              }
              if ('#' === t && r)
                throw new Error(
                  'Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.'
                )
            } else if ('smart' === t && r)
              throw new Error(
                'Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.'
              )
          }
          if (tm(e, 'moduleAttributes')) {
            if (tm(e, 'importAssertions'))
              throw new Error(
                'Cannot combine importAssertions and moduleAttributes plugins.'
              )
            if ('may-2020' !== rm(e, 'moduleAttributes', 'version'))
              throw new Error(
                "The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'."
              )
          }
          if (
            tm(e, 'recordAndTuple') &&
            !am.includes(rm(e, 'recordAndTuple', 'syntaxType'))
          )
            throw new Error(
              "'recordAndTuple' requires 'syntaxType' option whose value should be one of: " +
                am.map((e) => `'${e}'`).join(', ')
            )
          if (tm(e, 'asyncDoExpressions') && !tm(e, 'doExpressions')) {
            const e = new Error(
              "'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins."
            )
            throw ((e.missingPlugins = 'doExpressions'), e)
          }
        })(e.plugins),
        (r = (function (e) {
          const t = om.filter((t) => tm(e, t)),
            r = t.join('/')
          let n = ym[r]
          if (!n) {
            n = fm
            for (const e of t) n = sm[e](n)
            ym[r] = n
          }
          return n
        })(e.plugins))),
      new r(e, t)
    )
  }
  !(function (e) {
    const t = {}
    for (const r of Object.keys(e)) t[r] = kd(e[r])
  })(vd)
  const ym = {}
  var gm = function (e, t) {
      var r
      if ('unambiguous' !== (null == (r = t) ? void 0 : r.sourceType))
        return mm(t, e).parse()
      t = Object.assign({}, t)
      try {
        t.sourceType = 'module'
        const r = mm(t, e),
          n = r.parse()
        if (r.sawUnambiguousESM) return n
        if (r.ambiguousScriptDifferentAst)
          try {
            return (t.sourceType = 'script'), mm(t, e).parse()
          } catch (e) {}
        else n.program.sourceType = 'script'
        return n
      } catch (r) {
        try {
          return (t.sourceType = 'script'), mm(t, e).parse()
        } catch (e) {}
        throw r
      }
    },
    bm = function (e, t) {
      const r = mm(t, e)
      return r.options.strictMode && (r.state.strict = !0), r.getExpression()
    },
    vm = { prettier: null },
    xm = function (e, t) {
      return ah(void 0, void 0, void 0, function () {
        return sh(this, function (r) {
          return (
            (vm.prettier =
              vm.prettier ||
              new Function(
                'return import("'.concat(
                  B(),
                  '/prettier@2.x/esm/standalone.mjs")'
                )
              )()),
            [
              2,
              vm.prettier.then(function (r) {
                return 'javascript.expression' === e ||
                  'typescript.expression' === e
                  ? t
                  : /(?:javascript|typescript)/gi.test(e)
                  ? r.default.format(t, {
                      semi: !1,
                      parser: function (e) {
                        return gm(e, {
                          sourceType: 'module',
                          plugins: ['typescript', 'jsx'],
                        })
                      },
                    })
                  : 'json' === e
                  ? JSON.stringify(JSON.parse(t), null, 2)
                  : t
              }),
            ]
          )
        })
      })
    },
    wm = {
      base: 'vs',
      inherit: !0,
      rules: [
        { foreground: 'c41a16', token: 'string' },
        { foreground: '1c00cf', token: 'constant.numeric' },
        { foreground: 'aa0d91', token: 'keyword' },
        { foreground: '000000', token: 'keyword.operator' },
        { foreground: 'aa0d91', token: 'constant.language' },
        { foreground: '990000', token: 'support.class.exception' },
        { foreground: '000000', token: 'entity.name.function' },
        { fontStyle: 'bold underline', token: 'entity.name.type' },
        { fontStyle: 'italic', token: 'variable.parameter' },
        { foreground: '007400', token: 'comment' },
        { foreground: 'ff0000', token: 'invalid' },
        {
          background: 'e71a1100',
          token: 'invalid.deprecated.trailing-whitespace',
        },
        { foreground: '000000', background: 'fafafafc', token: 'text source' },
        { foreground: 'aa0d91', token: 'meta.tag' },
        { foreground: 'aa0d91', token: 'declaration.tag' },
        { foreground: '000000', fontStyle: 'bold', token: 'support' },
        { foreground: 'aa0d91', token: 'storage' },
        { fontStyle: 'bold underline', token: 'entity.name.section' },
        {
          foreground: '000000',
          fontStyle: 'bold',
          token: 'entity.name.function.frame',
        },
        { foreground: '333333', token: 'meta.tag.preprocessor.xml' },
        {
          foreground: '994500',
          fontStyle: 'italic',
          token: 'entity.other.attribute-name',
        },
        { foreground: '881280', token: 'entity.name.tag' },
      ],
      colors: {
        'editor.foreground': '#000000',
        'editor.background': '#FFFFFF',
        'editor.selectionBackground': '#BAD6FD',
        'editor.lineHighlightBackground': '#EFEFFF',
        'editorCursor.foreground': '#000000',
        'editorWhitespace.foreground': '#B3B3B3F4',
      },
    },
    Em = {
      base: 'vs-dark',
      inherit: !0,
      rules: [
        { foreground: '75715e', token: 'comment' },
        { foreground: 'e6db74', token: 'string' },
        { foreground: 'ae81ff', token: 'constant.numeric' },
        { foreground: 'ae81ff', token: 'constant.language' },
        { foreground: 'ae81ff', token: 'constant.character' },
        { foreground: 'ae81ff', token: 'constant.other' },
        { foreground: 'f92672', token: 'keyword' },
        { foreground: 'f92672', token: 'storage' },
        { foreground: '66d9ef', fontStyle: 'italic', token: 'storage.type' },
        {
          foreground: 'a6e22e',
          fontStyle: 'underline',
          token: 'entity.name.class',
        },
        {
          foreground: 'a6e22e',
          fontStyle: 'italic underline',
          token: 'entity.other.inherited-class',
        },
        { foreground: 'a6e22e', token: 'entity.name.function' },
        {
          foreground: 'fd971f',
          fontStyle: 'italic',
          token: 'variable.parameter',
        },
        { foreground: 'f92672', token: 'entity.name.tag' },
        { foreground: 'a6e22e', token: 'entity.other.attribute-name' },
        { foreground: '66d9ef', token: 'support.function' },
        { foreground: '66d9ef', token: 'support.constant' },
        { foreground: '66d9ef', fontStyle: 'italic', token: 'support.type' },
        { foreground: '66d9ef', fontStyle: 'italic', token: 'support.class' },
        { foreground: 'f8f8f0', background: 'f92672', token: 'invalid' },
        {
          foreground: 'f8f8f0',
          background: 'ae81ff',
          token: 'invalid.deprecated',
        },
        {
          foreground: 'cfcfc2',
          token: 'meta.structure.dictionary.json string.quoted.double.json',
        },
        { foreground: '75715e', token: 'meta.diff' },
        { foreground: '75715e', token: 'meta.diff.header' },
        { foreground: 'f92672', token: 'markup.deleted' },
        { foreground: 'a6e22e', token: 'markup.inserted' },
        { foreground: 'e6db74', token: 'markup.changed' },
        {
          foreground: 'ae81ffa0',
          token: 'constant.numeric.line-number.find-in-files - match',
        },
        { foreground: 'e6db74', token: 'entity.name.filename.find-in-files' },
      ],
      colors: {
        'editor.foreground': '#F8F8F2',
        'editor.background': '#222222',
        'editor.selectionBackground': '#49483E',
        'editor.lineHighlightBackground': '#3E3D32',
        'editorCursor.foreground': '#F8F8F0',
        'editorWhitespace.foreground': '#3B3A32',
        'editorIndentGuide.activeBackground': '#9D550FB0',
        'editor.selectionHighlightBorder': '#222218',
      },
    },
    Pm = !1,
    Sm = function (e) {
      var t = e.className,
        r = e.language,
        n = e.defaultLanguage,
        i = e.width,
        a = e.helpLink,
        s = e.helpCode,
        o = e.helpCodeViewWidth,
        l = e.height,
        c = e.onMount,
        u = e.onChange,
        p = ih(e, [
          'className',
          'language',
          'defaultLanguage',
          'width',
          'helpLink',
          'helpCode',
          'helpCodeViewWidth',
          'height',
          'onMount',
          'onChange',
        ]),
        h = oh(React.useState(!1), 2),
        d = h[0],
        f = h[1],
        m = Designable.React.useTheme(),
        y = React.useRef(''),
        g = React.useRef(null),
        b = React.useRef(null),
        v = React.useRef([]),
        x = React.useRef(null),
        w = React.useRef(),
        E = React.useRef(),
        P = React.useRef(r || n),
        S = React.useRef(''),
        T = React.useRef(!1),
        C = React.useRef(!1),
        A = React.useRef(Designable.Shared.uid()),
        R = Designable.React.usePrefix('monaco-input'),
        k = p.value || p.defaultValue
      React.useEffect(function () {
        return (
          (T.current = !1),
          Pm ||
            D.init().then(function (e) {
              e.editor.defineTheme('monokai', Em),
                e.editor.defineTheme('chrome-devtools', wm),
                e.languages.typescript.typescriptDefaults.setCompilerOptions({
                  target: e.languages.typescript.ScriptTarget.Latest,
                  allowNonTsExtensions: !0,
                  moduleResolution:
                    e.languages.typescript.ModuleResolutionKind.NodeJs,
                  module: e.languages.typescript.ModuleKind.CommonJS,
                  noEmit: !0,
                  esModuleInterop: !0,
                  jsx: e.languages.typescript.JsxEmit.React,
                  reactNamespace: 'React',
                  allowJs: !0,
                }),
                e.languages.typescript.typescriptDefaults.setDiagnosticsOptions(
                  { noSemanticValidation: !1, noSyntaxValidation: !0 }
                ),
                e.languages.registerDocumentFormattingEditProvider(
                  'typescript',
                  {
                    provideDocumentFormattingEdits: function (e) {
                      var t
                      return ah(this, void 0, void 0, function () {
                        var r
                        return sh(this, function (n) {
                          switch (n.label) {
                            case 0:
                              return (
                                (r = {}),
                                [
                                  4,
                                  xm(
                                    (null === (t = e.getDesignerLanguage) ||
                                    void 0 === t
                                      ? void 0
                                      : t.call(e)) || 'typescript',
                                    e.getValue()
                                  ),
                                ]
                              )
                            case 1:
                              return [
                                2,
                                [
                                  ((r.text = n.sent()),
                                  (r.range = e.getFullModelRange()),
                                  r),
                                ],
                              ]
                          }
                        })
                      })
                    },
                  }
                ),
                (Pm = !0)
            }),
          function () {
            x.current && x.current.dispose(), (T.current = !0)
          }
        )
      }, []),
        React.useEffect(
          function () {
            w.current && p.extraLib && N()
          },
          [p.extraLib]
        )
      var N = function () {
          x.current && x.current.dispose(),
            (x.current =
              w.current.languages.typescript.typescriptDefaults.addExtraLib(
                p.extraLib,
                ''.concat(A.current, '.d.ts')
              ))
        },
        O = function () {
          var e = P.current
          return 'javascript' === e || 'typescript' === e
        },
        I = function () {
          var e = P.current
          return 'javascript.expression' === e || 'typescript.expression' === e
        },
        F = function () {
          clearTimeout(b.current),
            (b.current = setTimeout(function () {
              null == u || u(y.current)
            }, 1e3))
        },
        j = function (e) {
          ;(C.current = !0),
            (y.current = e),
            'typescript' === S.current
              ? (clearTimeout(g.current),
                (g.current = setTimeout(function () {
                  try {
                    y.current &&
                      (O()
                        ? gm(y.current, {
                            sourceType: 'module',
                            plugins: ['typescript', 'jsx'],
                          })
                        : I() &&
                          bm(y.current, { plugins: ['typescript', 'jsx'] })),
                      w.current.editor.setModelMarkers(
                        E.current.getModel(),
                        P.current,
                        []
                      ),
                      (v.current = E.current.deltaDecorations(v.current, [
                        { range: new w.current.Range(1, 1, 1, 1), options: {} },
                      ])),
                      F()
                  } catch (e) {
                    ;(v.current = E.current.deltaDecorations(v.current, [
                      {
                        range: new w.current.Range(
                          e.loc.line,
                          e.loc.column,
                          e.loc.line,
                          e.loc.column
                        ),
                        options: {
                          isWholeLine: !0,
                          glyphMarginClassName: 'monaco-error-highline',
                        },
                      },
                    ])),
                      w.current.editor.setModelMarkers(
                        E.current.getModel(),
                        P.current,
                        [
                          {
                            code: '1003',
                            severity: 8,
                            startLineNumber: e.loc.line,
                            startColumn: e.loc.column,
                            endLineNumber: e.loc.line,
                            endColumn: e.loc.column,
                            message: e.message,
                          },
                        ]
                      )
                  }
                }, 240)))
              : (F(),
                (v.current = E.current.deltaDecorations(v.current, [
                  { range: new w.current.Range(1, 1, 1, 1), options: {} },
                ])))
        }
      ;(P.current = r || n),
        (S.current = /(?:javascript|typescript)/gi.test(P.current)
          ? 'typescript'
          : P.current)
      return React.createElement(
        'div',
        { className: lh(R, t, { loaded: d }), style: { width: i, height: l } },
        (function () {
          if (!1 === a) return null
          var e =
            'string' == typeof a
              ? a
              : O()
              ? 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript'
              : I()
              ? 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators'
              : void 0
          return (
            e &&
            React.createElement(
              Antd.Tooltip,
              {
                title: React.createElement(Designable.React.TextWidget, {
                  token: 'SettingComponents.MonacoInput.helpDocument',
                }),
              },
              React.createElement(
                'div',
                { className: R + '-helper' },
                React.createElement(
                  'a',
                  { target: '_blank', href: e, rel: 'noreferrer' },
                  React.createElement(Designable.React.IconWidget, {
                    infer: 'Help',
                  })
                )
              )
            )
          )
        })(),
        React.createElement(
          'div',
          { className: R + '-view' },
          React.createElement(
            _h,
            nh({}, p, {
              theme: 'dark' === m ? 'monokai' : 'chrome-devtools',
              defaultLanguage: S.current,
              language: S.current,
              options: nh(nh({ glyphMargin: !0 }, p.options), {
                tabSize: 2,
                smoothScrolling: !0,
                scrollbar: {
                  verticalScrollbarSize: 5,
                  horizontalScrollbarSize: 5,
                  alwaysConsumeMouseWheel: !1,
                },
              }),
              value: k,
              width: '100%',
              height: '100%',
              onMount: function (e, t) {
                ;(E.current = e), (w.current = t), null == c || c(e, t)
                var r = e.getModel(),
                  n = e.getValue()
                ;(r.getDesignerLanguage = function () {
                  return P.current
                }),
                  n
                    ? xm(P.current, n)
                        .then(function (t) {
                          e.setValue(t), f(!0)
                        })
                        .catch(function () {
                          f(!0)
                        })
                    : f(!0),
                  p.extraLib && N(),
                  e.onDidChangeModelContent(function () {
                    j(e.getValue())
                  })
              },
            })
          )
        ),
        s
          ? React.createElement(
              'div',
              { className: R + '-view', style: { width: o || '50%' } },
              React.createElement(_h, {
                value: s,
                theme: 'dark' === m ? 'monokai' : 'chrome-devtools',
                defaultLanguage: S.current,
                language: S.current,
                options: nh(nh({}, p.options), {
                  lineNumbers: 'off',
                  readOnly: !0,
                  glyphMargin: !1,
                  folding: !1,
                  lineDecorationsWidth: 0,
                  lineNumbersMinChars: 0,
                  minimap: { enabled: !1 },
                  tabSize: 2,
                  smoothScrolling: !0,
                  scrollbar: {
                    verticalScrollbarSize: 5,
                    horizontalScrollbarSize: 5,
                    alwaysConsumeMouseWheel: !1,
                  },
                }),
                width: '100%',
                height: '100%',
              })
            )
          : null
      )
    }
  Sm.loader = D
  var Tm =
      /<([-A-Za-z0-9_]+)((?:\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/,
    Cm = /^\{\{([\s\S]*)\}\}$/,
    Am = function (e) {
      return 'string' == typeof e && Cm.test(e)
    },
    Rm = function (e) {
      var t = String(e).replace(/[^\d\.]+/, '')
      if ('' !== t) return Number(t)
    },
    km = mh([
      {
        type: 'TEXT',
        icon: 'Text',
        component: Antd.Input,
        checker: function (e) {
          return (
            'string' == typeof e &&
            !Am(e) &&
            !(function (e) {
              return 'string' == typeof e && Tm.test(e)
            })(e)
          )
        },
      },
      {
        type: 'EXPRESSION',
        icon: 'Expression',
        component: function (e) {
          return React.createElement(
            Antd.Popover,
            {
              content: React.createElement(
                'div',
                {
                  style: {
                    width: 400,
                    height: 200,
                    marginLeft: -16,
                    marginRight: -16,
                    marginBottom: -12,
                  },
                },
                React.createElement(
                  Sm,
                  nh({}, e, { language: 'javascript.expression' })
                )
              ),
              trigger: 'click',
            },
            React.createElement(
              Antd.Button,
              { block: !0 },
              React.createElement(Designable.React.TextWidget, {
                token: 'SettingComponents.ValueInput.expression',
              })
            )
          )
        },
        checker: Am,
        toInputValue: function (e) {
          if (e && '{{}}' !== e) {
            var t = String(e).match(Cm)
            return (null == t ? void 0 : t[1]) || e || ''
          }
        },
        toChangeValue: function (e) {
          if (e && '{{}}' !== e) {
            var t = String(e).match(Cm)
            return '{{'.concat((null == t ? void 0 : t[1]) || e || '', '}}')
          }
        },
      },
      {
        type: 'BOOLEAN',
        icon: 'Boolean',
        component: function (e) {
          return React.createElement(
            Antd.Select,
            nh({}, e, {
              options: [
                { label: 'True', value: !0 },
                { label: 'False', value: !1 },
              ],
            })
          )
        },
        checker: function (e) {
          return 'boolean' == typeof e
        },
        toInputValue: function (e) {
          return !!e
        },
        toChangeValue: function (e) {
          return !!e
        },
      },
      {
        type: 'NUMBER',
        icon: 'Number',
        component: Antd.InputNumber,
        checker: function (e) {
          return 'number' == typeof e
        },
        toInputValue: Rm,
        toChangeValue: Rm,
      },
    ])
  function Nm() {
    return (
      (Nm =
        Object.assign ||
        function (e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = arguments[t]
            for (var n in r)
              Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
          }
          return e
        }),
      Nm.apply(this, arguments)
    )
  }
  function Om(e, t) {
    ;(null == t || t > e.length) && (t = e.length)
    for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r]
    return n
  }
  function Im(e, t) {
    if (e) {
      if ('string' == typeof e) return Om(e, t)
      var r = Object.prototype.toString.call(e).slice(8, -1)
      return (
        'Object' === r && e.constructor && (r = e.constructor.name),
        'Map' === r || 'Set' === r
          ? Array.from(e)
          : 'Arguments' === r ||
            /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
          ? Om(e, t)
          : void 0
      )
    }
  }
  function Fm(e, t) {
    return (
      (function (e) {
        if (Array.isArray(e)) return e
      })(e) ||
      (function (e, t) {
        var r =
          null == e
            ? null
            : ('undefined' != typeof Symbol && e[Symbol.iterator]) ||
              e['@@iterator']
        if (null != r) {
          var n,
            i,
            a = [],
            s = !0,
            o = !1
          try {
            for (
              r = r.call(e);
              !(s = (n = r.next()).done) &&
              (a.push(n.value), !t || a.length !== t);
              s = !0
            );
          } catch (e) {
            ;(o = !0), (i = e)
          } finally {
            try {
              s || null == r.return || r.return()
            } finally {
              if (o) throw i
            }
          }
          return a
        }
      })(e, t) ||
      Im(e, t) ||
      (function () {
        throw new TypeError(
          'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
        )
      })()
    )
  }
  function jm(e, t, r) {
    return (
      t in e
        ? Object.defineProperty(e, t, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0,
          })
        : (e[t] = r),
      e
    )
  }
  function _m(e) {
    for (var t = 1; t < arguments.length; t++) {
      var r = null != arguments[t] ? Object(arguments[t]) : {},
        n = Object.keys(r)
      'function' == typeof Object.getOwnPropertySymbols &&
        n.push.apply(
          n,
          Object.getOwnPropertySymbols(r).filter(function (e) {
            return Object.getOwnPropertyDescriptor(r, e).enumerable
          })
        ),
        n.forEach(function (t) {
          jm(e, t, r[t])
        })
    }
    return e
  }
  function Mm(e, t) {
    if (!(e instanceof t))
      throw new TypeError('Cannot call a class as a function')
  }
  function Dm(e, t) {
    for (var r = 0; r < t.length; r++) {
      var n = t[r]
      ;(n.enumerable = n.enumerable || !1),
        (n.configurable = !0),
        'value' in n && (n.writable = !0),
        Object.defineProperty(e, n.key, n)
    }
  }
  function Lm(e, t, r) {
    return (
      t && Dm(e.prototype, t),
      r && Dm(e, r),
      Object.defineProperty(e, 'prototype', { writable: !1 }),
      e
    )
  }
  function Bm(e) {
    return (
      (Bm =
        'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
          ? function (e) {
              return typeof e
            }
          : function (e) {
              return e &&
                'function' == typeof Symbol &&
                e.constructor === Symbol &&
                e !== Symbol.prototype
                ? 'symbol'
                : typeof e
            }),
      Bm(e)
    )
  }
  function zm(e) {
    if (void 0 === e)
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      )
    return e
  }
  function Um(e, t) {
    if (t && ('object' === Bm(t) || 'function' == typeof t)) return t
    if (void 0 !== t)
      throw new TypeError(
        'Derived constructors may only return object or undefined'
      )
    return zm(e)
  }
  function Wm(e) {
    return (
      (Wm = Object.setPrototypeOf
        ? Object.getPrototypeOf
        : function (e) {
            return e.__proto__ || Object.getPrototypeOf(e)
          }),
      Wm(e)
    )
  }
  function Hm(e, t) {
    return (
      (Hm =
        Object.setPrototypeOf ||
        function (e, t) {
          return (e.__proto__ = t), e
        }),
      Hm(e, t)
    )
  }
  function Vm(e, t) {
    if ('function' != typeof t && null !== t)
      throw new TypeError('Super expression must either be null or a function')
    ;(e.prototype = Object.create(t && t.prototype, {
      constructor: { value: e, writable: !0, configurable: !0 },
    })),
      Object.defineProperty(e, 'prototype', { writable: !1 }),
      t && Hm(e, t)
  }
  var $m = process.env.NODE_ENV,
    qm = function (e, t, r, n, i, a, s, o) {
      if ('production' !== $m && void 0 === t)
        throw new Error('invariant requires an error message argument')
      if (!e) {
        var l
        if (void 0 === t)
          l = new Error(
            'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'
          )
        else {
          var c = [r, n, i, a, s, o],
            u = 0
          ;(l = new Error(
            t.replace(/%s/g, function () {
              return c[u++]
            })
          )).name = 'Invariant Violation'
        }
        throw ((l.framesToPop = 1), l)
      }
    }
  function Km(e) {
    return (
      (function (e) {
        if (Array.isArray(e)) return Om(e)
      })(e) ||
      (function (e) {
        if (
          ('undefined' != typeof Symbol && null != e[Symbol.iterator]) ||
          null != e['@@iterator']
        )
          return Array.from(e)
      })(e) ||
      Im(e) ||
      (function () {
        throw new TypeError(
          'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
        )
      })()
    )
  }
  var Gm = (function () {
    function e() {
      Mm(this, e), jm(this, 'refs', {})
    }
    return (
      Lm(e, [
        {
          key: 'add',
          value: function (e, t) {
            this.refs[e] || (this.refs[e] = []), this.refs[e].push(t)
          },
        },
        {
          key: 'remove',
          value: function (e, t) {
            var r = this.getIndex(e, t)
            ;-1 !== r && this.refs[e].splice(r, 1)
          },
        },
        {
          key: 'isActive',
          value: function () {
            return this.active
          },
        },
        {
          key: 'getActive',
          value: function () {
            var e = this
            return this.refs[this.active.collection].find(function (t) {
              return t.node.sortableInfo.index == e.active.index
            })
          },
        },
        {
          key: 'getIndex',
          value: function (e, t) {
            return this.refs[e].indexOf(t)
          },
        },
        {
          key: 'getOrderedRefs',
          value: function () {
            var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : this.active.collection
            return this.refs[e].sort(Xm)
          },
        },
      ]),
      e
    )
  })()
  function Xm(e, t) {
    return e.node.sortableInfo.index - t.node.sortableInfo.index
  }
  function Ym(e, t) {
    return Object.keys(e).reduce(function (r, n) {
      return -1 === t.indexOf(n) && (r[n] = e[n]), r
    }, {})
  }
  var Jm = {
      end: ['touchend', 'touchcancel', 'mouseup'],
      move: ['touchmove', 'mousemove'],
      start: ['touchstart', 'mousedown'],
    },
    Qm = (function () {
      if ('undefined' == typeof window || 'undefined' == typeof document)
        return ''
      var e = window.getComputedStyle(document.documentElement, '') || [
          '-moz-hidden-iframe',
        ],
        t = (Array.prototype.slice
          .call(e)
          .join('')
          .match(/-(moz|webkit|ms)-/) ||
          ('' === e.OLink && ['', 'o']))[1]
      return 'ms' === t
        ? 'ms'
        : t && t.length
        ? t[0].toUpperCase() + t.substr(1)
        : ''
    })()
  function Zm(e, t) {
    Object.keys(t).forEach(function (r) {
      e.style[r] = t[r]
    })
  }
  function ey(e, t) {
    e.style[''.concat(Qm, 'Transform')] =
      null == t ? '' : 'translate3d('.concat(t.x, 'px,').concat(t.y, 'px,0)')
  }
  function ty(e, t) {
    e.style[''.concat(Qm, 'TransitionDuration')] =
      null == t ? '' : ''.concat(t, 'ms')
  }
  function ry(e, t) {
    for (; e; ) {
      if (t(e)) return e
      e = e.parentNode
    }
    return null
  }
  function ny(e, t, r) {
    return Math.max(e, Math.min(r, t))
  }
  function iy(e) {
    return 'px' === e.substr(-2) ? parseFloat(e) : 0
  }
  function ay(e) {
    var t = window.getComputedStyle(e)
    return {
      bottom: iy(t.marginBottom),
      left: iy(t.marginLeft),
      right: iy(t.marginRight),
      top: iy(t.marginTop),
    }
  }
  function sy(e, t) {
    var r = t.displayName || t.name
    return r ? ''.concat(e, '(').concat(r, ')') : e
  }
  function oy(e, t) {
    var r = e.getBoundingClientRect()
    return { top: r.top + t.top, left: r.left + t.left }
  }
  function ly(e) {
    return e.touches && e.touches.length
      ? { x: e.touches[0].pageX, y: e.touches[0].pageY }
      : e.changedTouches && e.changedTouches.length
      ? { x: e.changedTouches[0].pageX, y: e.changedTouches[0].pageY }
      : { x: e.pageX, y: e.pageY }
  }
  function cy(e) {
    return (
      (e.touches && e.touches.length) ||
      (e.changedTouches && e.changedTouches.length)
    )
  }
  function uy(e, t) {
    var r =
      arguments.length > 2 && void 0 !== arguments[2]
        ? arguments[2]
        : { left: 0, top: 0 }
    if (e) {
      var n = { left: r.left + e.offsetLeft, top: r.top + e.offsetTop }
      return e.parentNode === t ? n : uy(e.parentNode, t, n)
    }
  }
  function py(e, t, r) {
    return e < r && e > t ? e - 1 : e > r && e < t ? e + 1 : e
  }
  function hy(e) {
    var t = e.lockOffset,
      r = e.width,
      n = e.height,
      i = t,
      a = t,
      s = 'px'
    if ('string' == typeof t) {
      var o = /^[+-]?\d*(?:\.\d*)?(px|%)$/.exec(t)
      qm(
        null !== o,
        'lockOffset value should be a number or a string of a number followed by "px" or "%". Given %s',
        t
      ),
        (i = parseFloat(t)),
        (a = parseFloat(t)),
        (s = o[1])
    }
    return (
      qm(
        isFinite(i) && isFinite(a),
        'lockOffset value should be a finite. Given %s',
        t
      ),
      '%' === s && ((i = (i * r) / 100), (a = (a * n) / 100)),
      { x: i, y: a }
    )
  }
  function dy(e) {
    var t = e.height,
      r = e.width,
      n = e.lockOffset,
      i = Array.isArray(n) ? n : [n, n]
    qm(
      2 === i.length,
      'lockOffset prop of SortableContainer should be a single value or an array of exactly two values. Given %s',
      n
    )
    var a = Fm(i, 2),
      s = a[0],
      o = a[1]
    return [
      hy({ height: t, lockOffset: s, width: r }),
      hy({ height: t, lockOffset: o, width: r }),
    ]
  }
  function fy(e) {
    return e instanceof HTMLElement
      ? (function (e) {
          var t = window.getComputedStyle(e),
            r = /(auto|scroll)/
          return ['overflow', 'overflowX', 'overflowY'].find(function (e) {
            return r.test(t[e])
          })
        })(e)
        ? e
        : fy(e.parentNode)
      : null
  }
  function my(e) {
    var t = window.getComputedStyle(e)
    return 'grid' === t.display
      ? { x: iy(t.gridColumnGap), y: iy(t.gridRowGap) }
      : { x: 0, y: 0 }
  }
  var yy = 27,
    gy = 32,
    by = 37,
    vy = 38,
    xy = 39,
    wy = 40,
    Ey = 'A',
    Py = 'BUTTON',
    Sy = 'CANVAS',
    Ty = 'INPUT',
    Cy = 'OPTION',
    Ay = 'TEXTAREA',
    Ry = 'SELECT'
  function ky(e) {
    var t = 'input, textarea, select, canvas, [contenteditable]',
      r = e.querySelectorAll(t),
      n = e.cloneNode(!0)
    return (
      Km(n.querySelectorAll(t)).forEach(function (e, t) {
        ;('file' !== e.type && (e.value = r[t].value),
        'radio' === e.type &&
          e.name &&
          (e.name = '__sortableClone__'.concat(e.name)),
        e.tagName === Sy && r[t].width > 0 && r[t].height > 0) &&
          e.getContext('2d').drawImage(r[t], 0, 0)
      }),
      n
    )
  }
  function Ny(e) {
    return null != e.sortableHandle
  }
  var Oy = (function () {
    function e(t, r) {
      Mm(this, e), (this.container = t), (this.onScrollCallback = r)
    }
    return (
      Lm(e, [
        {
          key: 'clear',
          value: function () {
            null != this.interval &&
              (clearInterval(this.interval), (this.interval = null))
          },
        },
        {
          key: 'update',
          value: function (e) {
            var t = this,
              r = e.translate,
              n = e.minTranslate,
              i = e.maxTranslate,
              a = e.width,
              s = e.height,
              o = { x: 0, y: 0 },
              l = { x: 1, y: 1 },
              c = 10,
              u = 10,
              p = this.container,
              h = p.scrollTop,
              d = p.scrollLeft,
              f = p.scrollHeight,
              m = p.scrollWidth,
              y = 0 === h,
              g = f - h - p.clientHeight == 0,
              b = 0 === d,
              v = m - d - p.clientWidth == 0
            r.y >= i.y - s / 2 && !g
              ? ((o.y = 1), (l.y = u * Math.abs((i.y - s / 2 - r.y) / s)))
              : r.x >= i.x - a / 2 && !v
              ? ((o.x = 1), (l.x = c * Math.abs((i.x - a / 2 - r.x) / a)))
              : r.y <= n.y + s / 2 && !y
              ? ((o.y = -1), (l.y = u * Math.abs((r.y - s / 2 - n.y) / s)))
              : r.x <= n.x + a / 2 &&
                !b &&
                ((o.x = -1), (l.x = c * Math.abs((r.x - a / 2 - n.x) / a))),
              this.interval && (this.clear(), (this.isAutoScrolling = !1)),
              (0 === o.x && 0 === o.y) ||
                (this.interval = setInterval(function () {
                  t.isAutoScrolling = !0
                  var e = { left: l.x * o.x, top: l.y * o.y }
                  ;(t.container.scrollTop += e.top),
                    (t.container.scrollLeft += e.left),
                    t.onScrollCallback(e)
                }, 5))
          },
        },
      ]),
      e
    )
  })()
  var Iy = {
      axis: Na.oneOf(['x', 'y', 'xy']),
      contentWindow: Na.any,
      disableAutoscroll: Na.bool,
      distance: Na.number,
      getContainer: Na.func,
      getHelperDimensions: Na.func,
      helperClass: Na.string,
      helperContainer: Na.oneOfType([
        Na.func,
        'undefined' == typeof HTMLElement ? Na.any : Na.instanceOf(HTMLElement),
      ]),
      hideSortableGhost: Na.bool,
      keyboardSortingTransitionDuration: Na.number,
      lockAxis: Na.string,
      lockOffset: Na.oneOfType([
        Na.number,
        Na.string,
        Na.arrayOf(Na.oneOfType([Na.number, Na.string])),
      ]),
      lockToContainerEdges: Na.bool,
      onSortEnd: Na.func,
      onSortMove: Na.func,
      onSortOver: Na.func,
      onSortStart: Na.func,
      pressDelay: Na.number,
      pressThreshold: Na.number,
      keyCodes: Na.shape({
        lift: Na.arrayOf(Na.number),
        drop: Na.arrayOf(Na.number),
        cancel: Na.arrayOf(Na.number),
        up: Na.arrayOf(Na.number),
        down: Na.arrayOf(Na.number),
      }),
      shouldCancelStart: Na.func,
      transitionDuration: Na.number,
      updateBeforeSortStart: Na.func,
      useDragHandle: Na.bool,
      useWindowAsScrollContainer: Na.bool,
    },
    Fy = { lift: [gy], drop: [gy], cancel: [yy], up: [vy, by], down: [wy, xy] },
    jy = {
      axis: 'y',
      disableAutoscroll: !1,
      distance: 0,
      getHelperDimensions: function (e) {
        var t = e.node
        return { height: t.offsetHeight, width: t.offsetWidth }
      },
      hideSortableGhost: !0,
      lockOffset: '50%',
      lockToContainerEdges: !1,
      pressDelay: 0,
      pressThreshold: 5,
      keyCodes: Fy,
      shouldCancelStart: function (e) {
        return (
          -1 !== [Ty, Ay, Ry, Cy, Py].indexOf(e.target.tagName) ||
          !!ry(e.target, function (e) {
            return 'true' === e.contentEditable
          })
        )
      },
      transitionDuration: 300,
      useWindowAsScrollContainer: !1,
    },
    _y = Object.keys(Iy)
  function My(e) {
    qm(
      !(e.distance && e.pressDelay),
      'Attempted to set both `pressDelay` and `distance` on SortableContainer, you may only use one or the other, not both at the same time.'
    )
  }
  function Dy(e, t) {
    try {
      var r = e()
    } catch (e) {
      return t(!0, e)
    }
    return r && r.then
      ? r.then(t.bind(null, !1), t.bind(null, !0))
      : t(!1, value)
  }
  function Ly(e) {
    var t,
      r,
      n =
        arguments.length > 1 && void 0 !== arguments[1]
          ? arguments[1]
          : { withRef: !1 }
    return (
      (r = t =
        (function (t) {
          function r(e) {
            var t
            return (
              Mm(this, r),
              jm(zm(zm((t = Um(this, Wm(r).call(this, e))))), 'state', {}),
              jm(zm(zm(t)), 'handleStart', function (e) {
                var r = t.props,
                  n = r.distance,
                  i = r.shouldCancelStart
                if (2 !== e.button && !i(e)) {
                  ;(t.touched = !0), (t.position = ly(e))
                  var a = ry(e.target, function (e) {
                    return null != e.sortableInfo
                  })
                  if (
                    a &&
                    a.sortableInfo &&
                    t.nodeIsChild(a) &&
                    !t.state.sorting
                  ) {
                    var s = t.props.useDragHandle,
                      o = a.sortableInfo,
                      l = o.index,
                      c = o.collection
                    if (o.disabled) return
                    if (s && !ry(e.target, Ny)) return
                    ;(t.manager.active = { collection: c, index: l }),
                      cy(e) || e.target.tagName !== Ey || e.preventDefault(),
                      n ||
                        (0 === t.props.pressDelay
                          ? t.handlePress(e)
                          : (t.pressTimer = setTimeout(function () {
                              return t.handlePress(e)
                            }, t.props.pressDelay)))
                  }
                }
              }),
              jm(zm(zm(t)), 'nodeIsChild', function (e) {
                return e.sortableInfo.manager === t.manager
              }),
              jm(zm(zm(t)), 'handleMove', function (e) {
                var r = t.props,
                  n = r.distance,
                  i = r.pressThreshold
                if (
                  !t.state.sorting &&
                  t.touched &&
                  !t._awaitingUpdateBeforeSortStart
                ) {
                  var a = ly(e),
                    s = { x: t.position.x - a.x, y: t.position.y - a.y },
                    o = Math.abs(s.x) + Math.abs(s.y)
                  ;(t.delta = s),
                    n || (i && !(o >= i))
                      ? n && o >= n && t.manager.isActive() && t.handlePress(e)
                      : (clearTimeout(t.cancelTimer),
                        (t.cancelTimer = setTimeout(t.cancel, 0)))
                }
              }),
              jm(zm(zm(t)), 'handleEnd', function () {
                ;(t.touched = !1), t.cancel()
              }),
              jm(zm(zm(t)), 'cancel', function () {
                var e = t.props.distance
                t.state.sorting ||
                  (e || clearTimeout(t.pressTimer), (t.manager.active = null))
              }),
              jm(zm(zm(t)), 'handlePress', function (e) {
                try {
                  var r = t.manager.getActive(),
                    n = (function () {
                      if (r) {
                        var n = function () {
                            var r = h.sortableInfo.index,
                              n = ay(h),
                              i = my(t.container),
                              c = t.scrollContainer.getBoundingClientRect(),
                              m = s({ index: r, node: h, collection: d })
                            if (
                              ((t.node = h),
                              (t.margin = n),
                              (t.gridGap = i),
                              (t.width = m.width),
                              (t.height = m.height),
                              (t.marginOffset = {
                                x: t.margin.left + t.margin.right + t.gridGap.x,
                                y: Math.max(
                                  t.margin.top,
                                  t.margin.bottom,
                                  t.gridGap.y
                                ),
                              }),
                              (t.boundingClientRect =
                                h.getBoundingClientRect()),
                              (t.containerBoundingRect = c),
                              (t.index = r),
                              (t.newIndex = r),
                              (t.axis = {
                                x: a.indexOf('x') >= 0,
                                y: a.indexOf('y') >= 0,
                              }),
                              (t.offsetEdge = uy(h, t.container)),
                              (t.initialOffset = ly(
                                f
                                  ? _m({}, e, {
                                      pageX: t.boundingClientRect.left,
                                      pageY: t.boundingClientRect.top,
                                    })
                                  : e
                              )),
                              (t.initialScroll = {
                                left: t.scrollContainer.scrollLeft,
                                top: t.scrollContainer.scrollTop,
                              }),
                              (t.initialWindowScroll = {
                                left: window.pageXOffset,
                                top: window.pageYOffset,
                              }),
                              (t.helper = t.helperContainer.appendChild(ky(h))),
                              Zm(t.helper, {
                                boxSizing: 'border-box',
                                height: ''.concat(t.height, 'px'),
                                left: ''.concat(
                                  t.boundingClientRect.left - n.left,
                                  'px'
                                ),
                                pointerEvents: 'none',
                                position: 'fixed',
                                top: ''.concat(
                                  t.boundingClientRect.top - n.top,
                                  'px'
                                ),
                                width: ''.concat(t.width, 'px'),
                              }),
                              f && t.helper.focus(),
                              l &&
                                ((t.sortableGhost = h),
                                Zm(h, { opacity: 0, visibility: 'hidden' })),
                              (t.minTranslate = {}),
                              (t.maxTranslate = {}),
                              f)
                            ) {
                              var y = p
                                  ? {
                                      top: 0,
                                      left: 0,
                                      width: t.contentWindow.innerWidth,
                                      height: t.contentWindow.innerHeight,
                                    }
                                  : t.containerBoundingRect,
                                g = y.top,
                                b = y.left,
                                v = y.width,
                                x = g + y.height,
                                w = b + v
                              t.axis.x &&
                                ((t.minTranslate.x =
                                  b - t.boundingClientRect.left),
                                (t.maxTranslate.x =
                                  w - (t.boundingClientRect.left + t.width))),
                                t.axis.y &&
                                  ((t.minTranslate.y =
                                    g - t.boundingClientRect.top),
                                  (t.maxTranslate.y =
                                    x - (t.boundingClientRect.top + t.height)))
                            } else
                              t.axis.x &&
                                ((t.minTranslate.x =
                                  (p ? 0 : c.left) -
                                  t.boundingClientRect.left -
                                  t.width / 2),
                                (t.maxTranslate.x =
                                  (p
                                    ? t.contentWindow.innerWidth
                                    : c.left + c.width) -
                                  t.boundingClientRect.left -
                                  t.width / 2)),
                                t.axis.y &&
                                  ((t.minTranslate.y =
                                    (p ? 0 : c.top) -
                                    t.boundingClientRect.top -
                                    t.height / 2),
                                  (t.maxTranslate.y =
                                    (p
                                      ? t.contentWindow.innerHeight
                                      : c.top + c.height) -
                                    t.boundingClientRect.top -
                                    t.height / 2))
                            o &&
                              o.split(' ').forEach(function (e) {
                                return t.helper.classList.add(e)
                              }),
                              (t.listenerNode = e.touches
                                ? h
                                : t.contentWindow),
                              f
                                ? (t.listenerNode.addEventListener(
                                    'wheel',
                                    t.handleKeyEnd,
                                    !0
                                  ),
                                  t.listenerNode.addEventListener(
                                    'mousedown',
                                    t.handleKeyEnd,
                                    !0
                                  ),
                                  t.listenerNode.addEventListener(
                                    'keydown',
                                    t.handleKeyDown
                                  ))
                                : (Jm.move.forEach(function (e) {
                                    return t.listenerNode.addEventListener(
                                      e,
                                      t.handleSortMove,
                                      !1
                                    )
                                  }),
                                  Jm.end.forEach(function (e) {
                                    return t.listenerNode.addEventListener(
                                      e,
                                      t.handleSortEnd,
                                      !1
                                    )
                                  })),
                              t.setState({ sorting: !0, sortingIndex: r }),
                              u &&
                                u(
                                  {
                                    node: h,
                                    index: r,
                                    collection: d,
                                    isKeySorting: f,
                                    nodes: t.manager.getOrderedRefs(),
                                    helper: t.helper,
                                  },
                                  e
                                ),
                              f && t.keyMove(0)
                          },
                          i = t.props,
                          a = i.axis,
                          s = i.getHelperDimensions,
                          o = i.helperClass,
                          l = i.hideSortableGhost,
                          c = i.updateBeforeSortStart,
                          u = i.onSortStart,
                          p = i.useWindowAsScrollContainer,
                          h = r.node,
                          d = r.collection,
                          f = t.manager.isKeySorting,
                          m = (function () {
                            if ('function' == typeof c) {
                              t._awaitingUpdateBeforeSortStart = !0
                              var r = Dy(
                                function () {
                                  var t = h.sortableInfo.index
                                  return Promise.resolve(
                                    c(
                                      {
                                        collection: d,
                                        index: t,
                                        node: h,
                                        isKeySorting: f,
                                      },
                                      e
                                    )
                                  ).then(function () {})
                                },
                                function (e, r) {
                                  if (
                                    ((t._awaitingUpdateBeforeSortStart = !1), e)
                                  )
                                    throw r
                                  return r
                                }
                              )
                              if (r && r.then) return r.then(function () {})
                            }
                          })()
                        return m && m.then ? m.then(n) : n()
                      }
                    })()
                  return Promise.resolve(
                    n && n.then ? n.then(function () {}) : void 0
                  )
                } catch (e) {
                  return Promise.reject(e)
                }
              }),
              jm(zm(zm(t)), 'handleSortMove', function (e) {
                var r = t.props.onSortMove
                'function' == typeof e.preventDefault && e.preventDefault(),
                  t.updateHelperPosition(e),
                  t.animateNodes(),
                  t.autoscroll(),
                  r && r(e)
              }),
              jm(zm(zm(t)), 'handleSortEnd', function (e) {
                var r = t.props,
                  n = r.hideSortableGhost,
                  i = r.onSortEnd,
                  a = t.manager,
                  s = a.active.collection,
                  o = a.isKeySorting,
                  l = t.manager.getOrderedRefs()
                t.listenerNode &&
                  (o
                    ? (t.listenerNode.removeEventListener(
                        'wheel',
                        t.handleKeyEnd,
                        !0
                      ),
                      t.listenerNode.removeEventListener(
                        'mousedown',
                        t.handleKeyEnd,
                        !0
                      ),
                      t.listenerNode.removeEventListener(
                        'keydown',
                        t.handleKeyDown
                      ))
                    : (Jm.move.forEach(function (e) {
                        return t.listenerNode.removeEventListener(
                          e,
                          t.handleSortMove
                        )
                      }),
                      Jm.end.forEach(function (e) {
                        return t.listenerNode.removeEventListener(
                          e,
                          t.handleSortEnd
                        )
                      }))),
                  t.helper.parentNode.removeChild(t.helper),
                  n &&
                    t.sortableGhost &&
                    Zm(t.sortableGhost, { opacity: '', visibility: '' })
                for (var c = 0, u = l.length; c < u; c++) {
                  var p = l[c],
                    h = p.node
                  ;(p.edgeOffset = null),
                    (p.boundingClientRect = null),
                    ey(h, null),
                    ty(h, null),
                    (p.translate = null)
                }
                t.autoScroller.clear(),
                  (t.manager.active = null),
                  (t.manager.isKeySorting = !1),
                  t.setState({ sorting: !1, sortingIndex: null }),
                  'function' == typeof i &&
                    i(
                      {
                        collection: s,
                        newIndex: t.newIndex,
                        oldIndex: t.index,
                        isKeySorting: o,
                        nodes: l,
                      },
                      e
                    ),
                  (t.touched = !1)
              }),
              jm(zm(zm(t)), 'autoscroll', function () {
                var e = t.props.disableAutoscroll,
                  r = t.manager.isKeySorting
                if (e) t.autoScroller.clear()
                else {
                  if (r) {
                    var n = _m({}, t.translate),
                      i = 0,
                      a = 0
                    return (
                      t.axis.x &&
                        ((n.x = Math.min(
                          t.maxTranslate.x,
                          Math.max(t.minTranslate.x, t.translate.x)
                        )),
                        (i = t.translate.x - n.x)),
                      t.axis.y &&
                        ((n.y = Math.min(
                          t.maxTranslate.y,
                          Math.max(t.minTranslate.y, t.translate.y)
                        )),
                        (a = t.translate.y - n.y)),
                      (t.translate = n),
                      ey(t.helper, t.translate),
                      (t.scrollContainer.scrollLeft += i),
                      void (t.scrollContainer.scrollTop += a)
                    )
                  }
                  t.autoScroller.update({
                    height: t.height,
                    maxTranslate: t.maxTranslate,
                    minTranslate: t.minTranslate,
                    translate: t.translate,
                    width: t.width,
                  })
                }
              }),
              jm(zm(zm(t)), 'onAutoScroll', function (e) {
                ;(t.translate.x += e.left),
                  (t.translate.y += e.top),
                  t.animateNodes()
              }),
              jm(zm(zm(t)), 'handleKeyDown', function (e) {
                var r = e.keyCode,
                  n = t.props,
                  i = n.shouldCancelStart,
                  a = n.keyCodes,
                  s = _m({}, Fy, void 0 === a ? {} : a)
                ;(t.manager.active && !t.manager.isKeySorting) ||
                  !(
                    t.manager.active ||
                    (s.lift.includes(r) && !i(e) && t.isValidSortingTarget(e))
                  ) ||
                  (e.stopPropagation(),
                  e.preventDefault(),
                  s.lift.includes(r) && !t.manager.active
                    ? t.keyLift(e)
                    : s.drop.includes(r) && t.manager.active
                    ? t.keyDrop(e)
                    : s.cancel.includes(r)
                    ? ((t.newIndex = t.manager.active.index), t.keyDrop(e))
                    : s.up.includes(r)
                    ? t.keyMove(-1)
                    : s.down.includes(r) && t.keyMove(1))
              }),
              jm(zm(zm(t)), 'keyLift', function (e) {
                var r = e.target,
                  n = ry(r, function (e) {
                    return null != e.sortableInfo
                  }).sortableInfo,
                  i = n.index,
                  a = n.collection
                ;(t.initialFocusedNode = r),
                  (t.manager.isKeySorting = !0),
                  (t.manager.active = { index: i, collection: a }),
                  t.handlePress(e)
              }),
              jm(zm(zm(t)), 'keyMove', function (e) {
                var r = t.manager.getOrderedRefs(),
                  n = r[r.length - 1].node.sortableInfo.index,
                  i = t.newIndex + e,
                  a = t.newIndex
                if (!(i < 0 || i > n)) {
                  ;(t.prevIndex = a), (t.newIndex = i)
                  var s = py(t.newIndex, t.prevIndex, t.index),
                    o = r.find(function (e) {
                      return e.node.sortableInfo.index === s
                    }),
                    l = o.node,
                    c = t.containerScrollDelta,
                    u = o.boundingClientRect || oy(l, c),
                    p = o.translate || { x: 0, y: 0 },
                    h = u.top + p.y - c.top,
                    d = u.left + p.x - c.left,
                    f = a < i,
                    m = f && t.axis.x ? l.offsetWidth - t.width : 0,
                    y = f && t.axis.y ? l.offsetHeight - t.height : 0
                  t.handleSortMove({
                    pageX: d + m,
                    pageY: h + y,
                    ignoreTransition: 0 === e,
                  })
                }
              }),
              jm(zm(zm(t)), 'keyDrop', function (e) {
                t.handleSortEnd(e),
                  t.initialFocusedNode && t.initialFocusedNode.focus()
              }),
              jm(zm(zm(t)), 'handleKeyEnd', function (e) {
                t.manager.active && t.keyDrop(e)
              }),
              jm(zm(zm(t)), 'isValidSortingTarget', function (e) {
                var r = t.props.useDragHandle,
                  n = e.target,
                  i = ry(n, function (e) {
                    return null != e.sortableInfo
                  })
                return (
                  i &&
                  i.sortableInfo &&
                  !i.sortableInfo.disabled &&
                  (r ? Ny(n) : n.sortableInfo)
                )
              }),
              My(e),
              (t.manager = new Gm()),
              (t.events = {
                end: t.handleEnd,
                move: t.handleMove,
                start: t.handleStart,
              }),
              t
            )
          }
          return (
            Vm(r, React.Component),
            Lm(r, [
              {
                key: 'getChildContext',
                value: function () {
                  return { manager: this.manager }
                },
              },
              {
                key: 'componentDidMount',
                value: function () {
                  var e = this,
                    t = this.props.useWindowAsScrollContainer,
                    r = this.getContainer()
                  Promise.resolve(r).then(function (r) {
                    ;(e.container = r),
                      (e.document = e.container.ownerDocument || document)
                    var n =
                      e.props.contentWindow || e.document.defaultView || window
                    ;(e.contentWindow = 'function' == typeof n ? n() : n),
                      (e.scrollContainer = t
                        ? e.document.scrollingElement ||
                          e.document.documentElement
                        : fy(e.container) || e.container),
                      (e.autoScroller = new Oy(
                        e.scrollContainer,
                        e.onAutoScroll
                      )),
                      Object.keys(e.events).forEach(function (t) {
                        return Jm[t].forEach(function (r) {
                          return e.container.addEventListener(
                            r,
                            e.events[t],
                            !1
                          )
                        })
                      }),
                      e.container.addEventListener('keydown', e.handleKeyDown)
                  })
                },
              },
              {
                key: 'componentWillUnmount',
                value: function () {
                  var e = this
                  this.helper &&
                    this.helper.parentNode &&
                    this.helper.parentNode.removeChild(this.helper),
                    this.container &&
                      (Object.keys(this.events).forEach(function (t) {
                        return Jm[t].forEach(function (r) {
                          return e.container.removeEventListener(r, e.events[t])
                        })
                      }),
                      this.container.removeEventListener(
                        'keydown',
                        this.handleKeyDown
                      ))
                },
              },
              {
                key: 'updateHelperPosition',
                value: function (e) {
                  var t = this.props,
                    r = t.lockAxis,
                    n = t.lockOffset,
                    i = t.lockToContainerEdges,
                    a = t.transitionDuration,
                    s = t.keyboardSortingTransitionDuration,
                    o = void 0 === s ? a : s,
                    l = this.manager.isKeySorting,
                    c = e.ignoreTransition,
                    u = ly(e),
                    p = {
                      x: u.x - this.initialOffset.x,
                      y: u.y - this.initialOffset.y,
                    }
                  if (
                    ((p.y -= window.pageYOffset - this.initialWindowScroll.top),
                    (p.x -= window.pageXOffset - this.initialWindowScroll.left),
                    (this.translate = p),
                    i)
                  ) {
                    var h = Fm(
                        dy({
                          height: this.height,
                          lockOffset: n,
                          width: this.width,
                        }),
                        2
                      ),
                      d = h[0],
                      f = h[1],
                      m = { x: this.width / 2 - d.x, y: this.height / 2 - d.y },
                      y = { x: this.width / 2 - f.x, y: this.height / 2 - f.y }
                    ;(p.x = ny(
                      this.minTranslate.x + m.x,
                      this.maxTranslate.x - y.x,
                      p.x
                    )),
                      (p.y = ny(
                        this.minTranslate.y + m.y,
                        this.maxTranslate.y - y.y,
                        p.y
                      ))
                  }
                  'x' === r ? (p.y = 0) : 'y' === r && (p.x = 0),
                    l && o && !c && ty(this.helper, o),
                    ey(this.helper, p)
                },
              },
              {
                key: 'animateNodes',
                value: function () {
                  var e = this.props,
                    t = e.transitionDuration,
                    r = e.hideSortableGhost,
                    n = e.onSortOver,
                    i = this.containerScrollDelta,
                    a = this.windowScrollDelta,
                    s = this.manager.getOrderedRefs(),
                    o = this.offsetEdge.left + this.translate.x + i.left,
                    l = this.offsetEdge.top + this.translate.y + i.top,
                    c = this.manager.isKeySorting,
                    u = this.newIndex
                  this.newIndex = null
                  for (var p = 0, h = s.length; p < h; p++) {
                    var d = s[p].node,
                      f = d.sortableInfo.index,
                      m = d.offsetWidth,
                      y = d.offsetHeight,
                      g = {
                        height: this.height > y ? y / 2 : this.height / 2,
                        width: this.width > m ? m / 2 : this.width / 2,
                      },
                      b = c && f > this.index && f <= u,
                      v = c && f < this.index && f >= u,
                      x = { x: 0, y: 0 },
                      w = s[p].edgeOffset
                    w ||
                      ((w = uy(d, this.container)),
                      (s[p].edgeOffset = w),
                      c && (s[p].boundingClientRect = oy(d, i)))
                    var E = p < s.length - 1 && s[p + 1],
                      P = p > 0 && s[p - 1]
                    E &&
                      !E.edgeOffset &&
                      ((E.edgeOffset = uy(E.node, this.container)),
                      c && (E.boundingClientRect = oy(E.node, i))),
                      f !== this.index
                        ? (t && ty(d, t),
                          this.axis.x
                            ? this.axis.y
                              ? v ||
                                (f < this.index &&
                                  ((o + a.left - g.width <= w.left &&
                                    l + a.top <= w.top + g.height) ||
                                    l + a.top + g.height <= w.top))
                                ? ((x.x = this.width + this.marginOffset.x),
                                  w.left + x.x >
                                    this.containerBoundingRect.width -
                                      g.width &&
                                    E &&
                                    ((x.x = E.edgeOffset.left - w.left),
                                    (x.y = E.edgeOffset.top - w.top)),
                                  null === this.newIndex && (this.newIndex = f))
                                : (b ||
                                    (f > this.index &&
                                      ((o + a.left + g.width >= w.left &&
                                        l + a.top + g.height >= w.top) ||
                                        l + a.top + g.height >= w.top + y))) &&
                                  ((x.x = -(this.width + this.marginOffset.x)),
                                  w.left + x.x <
                                    this.containerBoundingRect.left + g.width &&
                                    P &&
                                    ((x.x = P.edgeOffset.left - w.left),
                                    (x.y = P.edgeOffset.top - w.top)),
                                  (this.newIndex = f))
                              : b ||
                                (f > this.index &&
                                  o + a.left + g.width >= w.left)
                              ? ((x.x = -(this.width + this.marginOffset.x)),
                                (this.newIndex = f))
                              : (v ||
                                  (f < this.index &&
                                    o + a.left <= w.left + g.width)) &&
                                ((x.x = this.width + this.marginOffset.x),
                                null == this.newIndex && (this.newIndex = f))
                            : this.axis.y &&
                              (b ||
                              (f > this.index && l + a.top + g.height >= w.top)
                                ? ((x.y = -(this.height + this.marginOffset.y)),
                                  (this.newIndex = f))
                                : (v ||
                                    (f < this.index &&
                                      l + a.top <= w.top + g.height)) &&
                                  ((x.y = this.height + this.marginOffset.y),
                                  null == this.newIndex &&
                                    (this.newIndex = f))),
                          ey(d, x),
                          (s[p].translate = x))
                        : r &&
                          ((this.sortableGhost = d),
                          Zm(d, { opacity: 0, visibility: 'hidden' }))
                  }
                  null == this.newIndex && (this.newIndex = this.index),
                    c && (this.newIndex = u)
                  var S = c ? this.prevIndex : u
                  n &&
                    this.newIndex !== S &&
                    n({
                      collection: this.manager.active.collection,
                      index: this.index,
                      newIndex: this.newIndex,
                      oldIndex: S,
                      isKeySorting: c,
                      nodes: s,
                      helper: this.helper,
                    })
                },
              },
              {
                key: 'getWrappedInstance',
                value: function () {
                  return (
                    qm(
                      n.withRef,
                      'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableContainer() call'
                    ),
                    this.refs.wrappedInstance
                  )
                },
              },
              {
                key: 'getContainer',
                value: function () {
                  var e = this.props.getContainer
                  return 'function' != typeof e
                    ? ReactDOM.findDOMNode(this)
                    : e(n.withRef ? this.getWrappedInstance() : void 0)
                },
              },
              {
                key: 'render',
                value: function () {
                  var t = n.withRef ? 'wrappedInstance' : null
                  return React.createElement(
                    e,
                    Nm({ ref: t }, Ym(this.props, _y))
                  )
                },
              },
              {
                key: 'helperContainer',
                get: function () {
                  var e = this.props.helperContainer
                  return 'function' == typeof e
                    ? e()
                    : this.props.helperContainer || this.document.body
                },
              },
              {
                key: 'containerScrollDelta',
                get: function () {
                  return this.props.useWindowAsScrollContainer
                    ? { left: 0, top: 0 }
                    : {
                        left:
                          this.scrollContainer.scrollLeft -
                          this.initialScroll.left,
                        top:
                          this.scrollContainer.scrollTop -
                          this.initialScroll.top,
                      }
                },
              },
              {
                key: 'windowScrollDelta',
                get: function () {
                  return {
                    left:
                      this.contentWindow.pageXOffset -
                      this.initialWindowScroll.left,
                    top:
                      this.contentWindow.pageYOffset -
                      this.initialWindowScroll.top,
                  }
                },
              },
            ]),
            r
          )
        })()),
      jm(t, 'displayName', sy('sortableList', e)),
      jm(t, 'defaultProps', jy),
      jm(t, 'propTypes', Iy),
      jm(t, 'childContextTypes', { manager: Na.object.isRequired }),
      r
    )
  }
  var By = {
      index: Na.number.isRequired,
      collection: Na.oneOfType([Na.number, Na.string]),
      disabled: Na.bool,
    },
    zy = Object.keys(By)
  function Uy(e) {
    var t,
      r,
      n =
        arguments.length > 1 && void 0 !== arguments[1]
          ? arguments[1]
          : { withRef: !1 }
    return (
      (r = t =
        (function (t) {
          function r() {
            return Mm(this, r), Um(this, Wm(r).apply(this, arguments))
          }
          return (
            Vm(r, React.Component),
            Lm(r, [
              {
                key: 'componentDidMount',
                value: function () {
                  this.register()
                },
              },
              {
                key: 'componentDidUpdate',
                value: function (e) {
                  this.node &&
                    (e.index !== this.props.index &&
                      (this.node.sortableInfo.index = this.props.index),
                    e.disabled !== this.props.disabled &&
                      (this.node.sortableInfo.disabled = this.props.disabled)),
                    e.collection !== this.props.collection &&
                      (this.unregister(e.collection), this.register())
                },
              },
              {
                key: 'componentWillUnmount',
                value: function () {
                  this.unregister()
                },
              },
              {
                key: 'register',
                value: function () {
                  var e = this.props,
                    t = e.collection,
                    r = e.disabled,
                    n = e.index,
                    i = ReactDOM.findDOMNode(this)
                  ;(i.sortableInfo = {
                    collection: t,
                    disabled: r,
                    index: n,
                    manager: this.context.manager,
                  }),
                    (this.node = i),
                    (this.ref = { node: i }),
                    this.context.manager.add(t, this.ref)
                },
              },
              {
                key: 'unregister',
                value: function () {
                  var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : this.props.collection
                  this.context.manager.remove(e, this.ref)
                },
              },
              {
                key: 'getWrappedInstance',
                value: function () {
                  return (
                    qm(
                      n.withRef,
                      'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableElement() call'
                    ),
                    this.refs.wrappedInstance
                  )
                },
              },
              {
                key: 'render',
                value: function () {
                  var t = n.withRef ? 'wrappedInstance' : null
                  return React.createElement(
                    e,
                    Nm({ ref: t }, Ym(this.props, zy))
                  )
                },
              },
            ]),
            r
          )
        })()),
      jm(t, 'displayName', sy('sortableElement', e)),
      jm(t, 'contextTypes', { manager: Na.object.isRequired }),
      jm(t, 'propTypes', By),
      jm(t, 'defaultProps', { collection: 0 }),
      r
    )
  }
  var Wy = function (e, t) {
      return Array.isArray(e)
        ? e.map(function (e) {
            return moment(e, t)
          })
        : e
        ? moment(e, t)
        : e
    },
    Hy = function (e, t, r) {
      var n = function (e, t, n) {
        if ((void 0 === n && (n = 0), !e)) return r
        if (Formily.Shared.isArr(t)) {
          var i = t[n]
          return Formily.Shared.isFn(i)
            ? i(e)
            : Formily.Shared.isEmpty(i)
            ? e
            : moment(e).format(i)
        }
        return Formily.Shared.isFn(t)
          ? t(e)
          : Formily.Shared.isEmpty(t)
          ? e
          : moment(e).format(t)
      }
      return Formily.Shared.isArr(e)
        ? e.map(function (e, r) {
            return n(e, t, r)
          })
        : e
        ? n(e, t)
        : e || r
    },
    Vy = function (e, t) {
      var r
      if ('ConfigContext' in Antd.ConfigProvider)
        return (0,
        React.useContext(Antd.ConfigProvider.ConfigContext).getPrefixCls)(
          e,
          null == t ? void 0 : t.prefixCls
        )
      var n =
        null !== (r = null == t ? void 0 : t.prefixCls) && void 0 !== r
          ? r
          : 'ant-'
      return ''.concat(n).concat(null != e ? e : '')
    },
    $y = function (e) {
      void 0 === e && (e = {})
      var t = {}
      for (var r in e) r.indexOf('data-') > -1 && (t[r] = e[r])
      return t
    },
    qy = function () {
      return (
        (qy =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        qy.apply(this, arguments)
      )
    },
    Ky = function (e, t) {
      var r = {}
      for (var n in e)
        Object.prototype.hasOwnProperty.call(e, n) &&
          t.indexOf(n) < 0 &&
          (r[n] = e[n])
      if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
        var i = 0
        for (n = Object.getOwnPropertySymbols(e); i < n.length; i++)
          t.indexOf(n[i]) < 0 &&
            Object.prototype.propertyIsEnumerable.call(e, n[i]) &&
            (r[n[i]] = e[n[i]])
      }
      return r
    },
    Gy = React.createContext(null),
    Xy = React.createContext(null),
    Yy = function () {
      return React.useContext(Gy)
    },
    Jy = function (e) {
      var t = React.useContext(Xy)
      return t ? t.index : e
    },
    Qy = function (e) {
      if ('array' === (null == e ? void 0 : e.type)) return []
      if ('object' === (null == e ? void 0 : e.type)) return {}
      if ('void' === (null == e ? void 0 : e.type))
        for (var t in e.properties) {
          var r = Qy(e.properties[t])
          if (Formily.Shared.isValid(r)) return r
        }
    },
    Zy = function (e) {
      var t = Formily.React.useField(),
        r = Formily.React.useFieldSchema()
      return React.createElement(
        Gy.Provider,
        { value: { field: t, schema: r, props: e } },
        e.children
      )
    }
  Zy.Item = function (e) {
    var t = e.children,
      r = Ky(e, ['children'])
    return React.createElement(
      Xy.Provider,
      { value: r },
      React.createElement(
        Formily.React.ExpressionScope,
        { value: { $record: r.record, $index: r.index } },
        t
      )
    )
  }
  var eg = (function (e) {
    var t,
      r,
      n =
        arguments.length > 1 && void 0 !== arguments[1]
          ? arguments[1]
          : { withRef: !1 }
    return (
      (r = t =
        (function (t) {
          function r() {
            return Mm(this, r), Um(this, Wm(r).apply(this, arguments))
          }
          return (
            Vm(r, React.Component),
            Lm(r, [
              {
                key: 'componentDidMount',
                value: function () {
                  ReactDOM.findDOMNode(this).sortableHandle = !0
                },
              },
              {
                key: 'getWrappedInstance',
                value: function () {
                  return (
                    qm(
                      n.withRef,
                      'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableHandle() call'
                    ),
                    this.refs.wrappedInstance
                  )
                },
              },
              {
                key: 'render',
                value: function () {
                  var t = n.withRef ? 'wrappedInstance' : null
                  return React.createElement(e, Nm({ ref: t }, this.props))
                },
              },
            ]),
            r
          )
        })()),
      jm(t, 'displayName', sy('sortableHandle', e)),
      r
    )
  })(function (e) {
    var t = Vy('formily-array-base')
    return React.createElement(
      icons.MenuOutlined,
      qy({}, e, {
        className: lh(''.concat(t, '-sort-handle'), e.className),
        style: qy({}, e.style),
      })
    )
  })
  ;(Zy.SortHandle = function (e) {
    var t,
      r = Yy()
    return r
      ? 'editable' !==
        (null === (t = r.field) || void 0 === t ? void 0 : t.pattern)
        ? null
        : React.createElement(eg, qy({}, e))
      : null
  }),
    (Zy.Index = function (e) {
      var t = Jy(),
        r = Vy('formily-array-base')
      return React.createElement(
        'span',
        qy({}, e, { className: ''.concat(r, '-index') }),
        '#',
        t + 1,
        '.'
      )
    }),
    (Zy.Addition = function (e) {
      var t,
        r,
        n,
        i = Formily.React.useField(),
        a = Yy(),
        s = Vy('formily-array-base')
      return a
        ? 'editable' !==
            (null === (t = a.field) || void 0 === t ? void 0 : t.pattern) &&
          'disabled' !==
            (null === (r = a.field) || void 0 === r ? void 0 : r.pattern)
          ? null
          : React.createElement(
              Antd.Button,
              qy({ type: 'dashed', block: !0 }, e, {
                disabled: Formily.Shared.isBool(null == i ? void 0 : i.disabled)
                  ? null == i
                    ? void 0
                    : i.disabled
                  : null === (n = a.field) || void 0 === n
                  ? void 0
                  : n.disabled,
                className: lh(''.concat(s, '-addition'), e.className),
                onClick: function (t) {
                  var r, n, i, s, o, l, c, u, p, h, d
                  if (
                    !(null === (r = a.props) || void 0 === r
                      ? void 0
                      : r.disabled)
                  ) {
                    var f = (function (e, t) {
                      return Formily.Shared.isValid(e)
                        ? Formily.Shared.clone(e)
                        : Array.isArray(null == t ? void 0 : t.items)
                        ? Qy(t.items[0])
                        : Qy(t.items)
                    })(e.defaultValue, a.schema)
                    'unshift' === e.method
                      ? (null ===
                          (i =
                            null === (n = a.field) || void 0 === n
                              ? void 0
                              : n.unshift) ||
                          void 0 === i ||
                          i.call(n, f),
                        null ===
                          (o =
                            null === (s = a.props) || void 0 === s
                              ? void 0
                              : s.onAdd) ||
                          void 0 === o ||
                          o.call(s, 0))
                      : (null ===
                          (c =
                            null === (l = a.field) || void 0 === l
                              ? void 0
                              : l.push) ||
                          void 0 === c ||
                          c.call(l, f),
                        null ===
                          (p =
                            null === (u = a.props) || void 0 === u
                              ? void 0
                              : u.onAdd) ||
                          void 0 === p ||
                          p.call(
                            u,
                            (null ===
                              (d =
                                null === (h = null == a ? void 0 : a.field) ||
                                void 0 === h
                                  ? void 0
                                  : h.value) || void 0 === d
                              ? void 0
                              : d.length) - 1
                          )),
                      e.onClick && e.onClick(t)
                  }
                },
                icon: React.createElement(icons.PlusOutlined, null),
              }),
              e.title || i.title
            )
        : null
    }),
    (Zy.Remove = React.forwardRef(function (e, t) {
      var r,
        n = Jy(e.index),
        i = Yy(),
        a = Vy('formily-array-base')
      return i
        ? 'editable' !==
          (null === (r = i.field) || void 0 === r ? void 0 : r.pattern)
          ? null
          : React.createElement(
              icons.DeleteOutlined,
              qy({}, e, {
                className: lh(''.concat(a, '-remove'), e.className),
                ref: t,
                onClick: function (t) {
                  var r, a, s, o, l
                  ;(null === (r = i.props) || void 0 === r
                    ? void 0
                    : r.disabled) ||
                    (t.stopPropagation(),
                    null ===
                      (s =
                        null === (a = i.field) || void 0 === a
                          ? void 0
                          : a.remove) ||
                      void 0 === s ||
                      s.call(a, n),
                    null ===
                      (l =
                        null === (o = i.props) || void 0 === o
                          ? void 0
                          : o.onRemove) ||
                      void 0 === l ||
                      l.call(o, n),
                    e.onClick && e.onClick(t))
                },
              })
            )
        : null
    })),
    (Zy.MoveDown = React.forwardRef(function (e, t) {
      var r,
        n = Jy(e.index),
        i = Yy(),
        a = Vy('formily-array-base')
      return i
        ? 'editable' !==
          (null === (r = i.field) || void 0 === r ? void 0 : r.pattern)
          ? null
          : React.createElement(
              icons.DownOutlined,
              qy({}, e, {
                className: lh(''.concat(a, '-move-down'), e.className),
                ref: t,
                onClick: function (t) {
                  var r, a, s, o, l
                  ;(null === (r = i.props) || void 0 === r
                    ? void 0
                    : r.disabled) ||
                    (t.stopPropagation(),
                    null ===
                      (s =
                        null === (a = i.field) || void 0 === a
                          ? void 0
                          : a.moveDown) ||
                      void 0 === s ||
                      s.call(a, n),
                    null ===
                      (l =
                        null === (o = i.props) || void 0 === o
                          ? void 0
                          : o.onMoveDown) ||
                      void 0 === l ||
                      l.call(o, n),
                    e.onClick && e.onClick(t))
                },
              })
            )
        : null
    })),
    (Zy.MoveUp = React.forwardRef(function (e, t) {
      var r,
        n = Jy(e.index),
        i = Yy(),
        a = Vy('formily-array-base')
      return i
        ? 'editable' !==
          (null === (r = i.field) || void 0 === r ? void 0 : r.pattern)
          ? null
          : React.createElement(
              icons.UpOutlined,
              qy({}, e, {
                className: lh(''.concat(a, '-move-up'), e.className),
                ref: t,
                onClick: function (t) {
                  var r, a, s, o
                  ;(null === (r = i.props) || void 0 === r
                    ? void 0
                    : r.disabled) ||
                    (t.stopPropagation(),
                    null === (a = null == i ? void 0 : i.field) ||
                      void 0 === a ||
                      a.moveUp(n),
                    null ===
                      (o =
                        null === (s = null == i ? void 0 : i.props) ||
                        void 0 === s
                          ? void 0
                          : s.onMoveUp) ||
                      void 0 === o ||
                      o.call(s, n),
                    e.onClick && e.onClick(t))
                },
              })
            )
        : null
    })),
    (Zy.useArray = Yy),
    (Zy.useIndex = Jy),
    (Zy.useRecord = function (e) {
      var t = React.useContext(Xy)
      return t ? t.record : e
    }),
    (Zy.mixin = function (e) {
      return (
        (e.Index = Zy.Index),
        (e.SortHandle = Zy.SortHandle),
        (e.Addition = Zy.Addition),
        (e.Remove = Zy.Remove),
        (e.MoveDown = Zy.MoveDown),
        (e.MoveUp = Zy.MoveUp),
        (e.useArray = Zy.useArray),
        (e.useIndex = Zy.useIndex),
        (e.useRecord = Zy.useRecord),
        e
      )
    })
  var tg = function () {
      return (
        (tg =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        tg.apply(this, arguments)
      )
    },
    rg = function (e, t) {
      var r = 'function' == typeof Symbol && e[Symbol.iterator]
      if (!r) return e
      var n,
        i,
        a = r.call(e),
        s = []
      try {
        for (; (void 0 === t || t-- > 0) && !(n = a.next()).done; )
          s.push(n.value)
      } catch (e) {
        i = { error: e }
      } finally {
        try {
          n && !n.done && (r = a.return) && r.call(a)
        } finally {
          if (i) throw i.error
        }
      }
      return s
    },
    ng = Uy(function (e) {
      return React.createElement('tr', tg({}, e))
    }),
    ig = Ly(function (e) {
      return React.createElement('tbody', tg({}, e))
    }),
    ag = function (e) {
      var t
      return (
        (null === (t = e['x-component']) || void 0 === t
          ? void 0
          : t.indexOf('Column')) > -1
      )
    },
    sg = function (e) {
      var t
      return (
        (null === (t = e['x-component']) || void 0 === t
          ? void 0
          : t.indexOf('Addition')) > -1
      )
    },
    og = { request: null },
    lg = Formily.React.observer(
      function (e) {
        var t,
          r = Formily.React.useField(),
          n = Vy('formily-array-table'),
          i = r.errors,
          a =
            null === (t = e.options) || void 0 === t
              ? void 0
              : t.map(function (t) {
                  var n = t.label,
                    a = t.value,
                    s = i.some(function (t) {
                      var n = (function (e) {
                          var t
                          return Number(
                            null ===
                              (t = e
                                .slice(e.indexOf(r.address.toString()) + 1)
                                .match(/(\d+)/)) || void 0 === t
                              ? void 0
                              : t[1]
                          )
                        })(t.address),
                        i = (a - 1) * e.pageSize,
                        s = a * e.pageSize
                      return n >= i && n <= s
                    })
                  return {
                    label: s
                      ? React.createElement(Antd.Badge, { dot: !0 }, n)
                      : n,
                    value: a,
                  }
                }),
          s = 15 * String(null == a ? void 0 : a.length).length
        return React.createElement(Antd.Select, {
          value: e.value,
          onChange: e.onChange,
          options: a,
          virtual: !0,
          style: { width: s < 60 ? 60 : s },
          className: lh(''.concat(n, '-status-select'), {
            'has-error': null == i ? void 0 : i.length,
          }),
        })
      },
      {
        scheduler: function (e) {
          clearTimeout(og.request),
            (og.request = setTimeout(function () {
              e()
            }, 100))
        },
      }
    ),
    cg = function (e) {
      var t,
        r = rg(React.useState(1), 2),
        n = r[0],
        i = r[1],
        a = Vy('formily-array-table'),
        s = e.pageSize || 10,
        o = e.size || 'default',
        l = e.dataSource || [],
        c = (n - 1) * s,
        u = c + s - 1,
        p = (null == l ? void 0 : l.length) || 0,
        h = Math.ceil(p / s),
        d = Array.from(new Array(h)).map(function (e, t) {
          var r = t + 1
          return { label: r, value: r }
        }),
        f = function (e) {
          i(e)
        }
      React.useEffect(
        function () {
          h > 0 && h < n && f(h)
        },
        [h, n]
      )
      return React.createElement(
        React.Fragment,
        null,
        null === (t = e.children) || void 0 === t
          ? void 0
          : t.call(
              e,
              null == l ? void 0 : l.slice(c, u + 1),
              (function () {
                if (!(h <= 1))
                  return React.createElement(
                    'div',
                    { className: ''.concat(a, '-pagination') },
                    React.createElement(
                      Antd.Space,
                      null,
                      React.createElement(lg, {
                        value: n,
                        pageSize: s,
                        onChange: f,
                        options: d,
                        notFoundContent: !1,
                      }),
                      React.createElement(
                        Antd.Pagination,
                        tg({}, e, {
                          pageSize: s,
                          current: n,
                          total: l.length,
                          size: o,
                          showSizeChanger: !1,
                          onChange: f,
                        })
                      )
                    )
                  )
              })()
            )
      )
    },
    ug = function (e) {
      return React.createElement(ng, tg({ index: e['data-row-key'] || 0 }, e))
    },
    pg = Formily.React.observer(function (e) {
      var t = React.useRef(),
        r = Formily.React.useField(),
        n = Vy('formily-array-table'),
        i = Array.isArray(r.value) ? r.value.slice() : [],
        a = (function () {
          var e = Formily.React.useField(),
            t = Formily.React.useFieldSchema(),
            r = function (t) {
              var n, i, a
              if (
                ag(t) ||
                (function (e) {
                  var t
                  return (
                    (null === (t = e['x-component']) || void 0 === t
                      ? void 0
                      : t.indexOf('Operations')) > -1
                  )
                })(t) ||
                sg(t)
              ) {
                if (
                  !(null === (n = t['x-component-props']) || void 0 === n
                    ? void 0
                    : n.dataIndex) &&
                  !t.name
                )
                  return []
                var s =
                    (null === (i = t['x-component-props']) || void 0 === i
                      ? void 0
                      : i.dataIndex) || t.name,
                  o = e.query(e.address.concat(s)).take(),
                  l =
                    (null === (a = null == o ? void 0 : o.component) ||
                    void 0 === a
                      ? void 0
                      : a[1]) ||
                    t['x-component-props'] ||
                    {}
                return [
                  {
                    name: s,
                    display: (null == o ? void 0 : o.display) || t['x-display'],
                    field: o,
                    schema: t,
                    columnProps: l,
                  },
                ]
              }
              if (t.properties)
                return t.reduceProperties(function (e, t) {
                  return e.concat(r(t))
                }, [])
            }
          if (!t) throw new Error('can not found schema object')
          return (function (e) {
            return e
              ? (Formily.Shared.isArr(e) ? e : [e]).reduce(function (e, t) {
                  var n = r(t)
                  return n ? e.concat(n) : e
                }, [])
              : []
          })(t.items)
        })(),
        s = (function (e, t) {
          return t.reduce(function (t, r, n) {
            var i = r.name,
              a = r.columnProps,
              s = r.schema
            return 'visible' !== r.display
              ? t
              : ag(s)
              ? t.concat(
                  tg(tg({}, a), {
                    key: n,
                    dataIndex: i,
                    render: function (t, r) {
                      var n = e.indexOf(r)
                      return React.createElement(
                        Zy.Item,
                        { index: n, record: r },
                        React.createElement(Formily.React.RecursionField, {
                          schema: s,
                          name: n,
                          onlyRenderProperties: !0,
                        })
                      )
                    },
                  })
                )
              : t
          }, [])
        })(i, a),
        o = Formily.Shared.isBool(e.pagination) ? {} : e.pagination,
        l = Formily.React.useFieldSchema().reduceProperties(function (e, t, r) {
          return sg(t)
            ? React.createElement(Formily.React.RecursionField, {
                schema: t,
                name: r,
              })
            : e
        }, null),
        c = function (e) {
          return i.indexOf(e)
        }
      return React.createElement(
        cg,
        tg({}, o, { dataSource: i }),
        function (i, o) {
          return React.createElement(
            'div',
            { ref: t, className: n },
            React.createElement(
              Zy,
              null,
              React.createElement(
                Antd.Table,
                tg({ size: 'small', bordered: !0, rowKey: c }, e, {
                  onChange: function () {},
                  pagination: !1,
                  columns: s,
                  dataSource: i,
                  components: {
                    body: {
                      wrapper: function (e) {
                        return React.createElement(
                          ig,
                          tg(
                            {
                              useDragHandle: !0,
                              lockAxis: 'y',
                              helperClass: ''.concat(n, '-sort-helper'),
                              helperContainer: function () {
                                var e
                                return null === (e = t.current) || void 0 === e
                                  ? void 0
                                  : e.querySelector('tbody')
                              },
                              onSortStart: function (e) {
                                !(function (e) {
                                  var t = document.body.querySelector(
                                    '.'.concat(n, '-sort-helper')
                                  )
                                  if (t) {
                                    var r = e.querySelectorAll('td')
                                    requestAnimationFrame(function () {
                                      t.querySelectorAll('td').forEach(
                                        function (e, t) {
                                          r[t] &&
                                            (e.style.width = getComputedStyle(
                                              r[t]
                                            ).width)
                                        }
                                      )
                                    })
                                  }
                                })(e.node)
                              },
                              onSortEnd: function (e) {
                                var t = e.oldIndex,
                                  n = e.newIndex
                                r.move(t, n)
                              },
                            },
                            e
                          )
                        )
                      },
                      row: ug,
                    },
                  },
                })
              ),
              React.createElement(
                'div',
                { style: { marginTop: 5, marginBottom: 5 } },
                o
              ),
              a.map(function (e, t) {
                if (ag(e.schema))
                  return React.createElement(Formily.React.RecursionField, {
                    name: e.name,
                    schema: e.schema,
                    onlyRenderSelf: !0,
                    key: t,
                  })
              }),
              l
            )
          )
        }
      )
    })
  ;(pg.displayName = 'ArrayTable'),
    (pg.Column = function () {
      return React.createElement(React.Fragment, null)
    }),
    Zy.mixin(pg)
  var hg = function () {
      return (
        (hg =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        hg.apply(this, arguments)
      )
    },
    dg = Uy(function (e) {
      var t = Vy('formily-array-items')
      return React.createElement(
        'div',
        hg({}, e, { className: lh(''.concat(t, '-item'), e.className) }),
        e.children
      )
    }),
    fg = Ly(function (e) {
      var t = Vy('formily-array-items')
      return React.createElement(
        'div',
        hg({}, e, { className: lh(''.concat(t, '-list'), e.className) }),
        e.children
      )
    }),
    mg = Formily.React.observer(function (e) {
      var t = Formily.React.useField(),
        r = Vy('formily-array-items'),
        n = Formily.React.useFieldSchema(),
        i = Formily.React.useFieldSchema().reduceProperties(function (e, t, r) {
          return (function (e) {
            var t
            return (
              (null === (t = e['x-component']) || void 0 === t
                ? void 0
                : t.indexOf('Addition')) > -1
            )
          })(t)
            ? React.createElement(Formily.React.RecursionField, {
                schema: t,
                name: r,
              })
            : e
        }, null),
        a = Array.isArray(t.value) ? t.value : []
      if (!n) throw new Error('can not found schema object')
      return React.createElement(
        Zy,
        null,
        React.createElement(
          'div',
          hg({}, e, {
            onChange: function () {},
            className: lh(r, e.className),
          }),
          React.createElement(
            fg,
            {
              useDragHandle: !0,
              lockAxis: 'y',
              helperClass: ''.concat(r, '-sort-helper'),
              onSortEnd: function (e) {
                var r = e.oldIndex,
                  n = e.newIndex
                t.move(r, n)
              },
            },
            null == a
              ? void 0
              : a.map(function (e, t) {
                  var i = Array.isArray(n.items)
                    ? n.items[t] || n.items[0]
                    : n.items
                  return React.createElement(
                    Zy.Item,
                    { key: t, index: t, record: e },
                    React.createElement(
                      dg,
                      { key: 'item-'.concat(t), index: t },
                      React.createElement(
                        'div',
                        { className: ''.concat(r, '-item-inner') },
                        React.createElement(Formily.React.RecursionField, {
                          schema: i,
                          name: t,
                        })
                      )
                    )
                  )
                })
          ),
          i
        )
      )
    })
  ;(mg.displayName = 'ArrayItems'),
    (mg.Item = function (e) {
      var t = Vy('formily-array-items')
      return React.createElement(
        'div',
        hg({}, e, {
          onChange: function () {},
          className: lh(
            ''.concat(t, '-').concat(e.type || 'card'),
            e.className
          ),
        }),
        e.children
      )
    }),
    Zy.mixin(mg)
  var yg = function () {
      return (
        (yg =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        yg.apply(this, arguments)
      )
    },
    gg = function (e, t) {
      var r = {}
      for (var n in e)
        Object.prototype.hasOwnProperty.call(e, n) &&
          t.indexOf(n) < 0 &&
          (r[n] = e[n])
      if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
        var i = 0
        for (n = Object.getOwnPropertySymbols(e); i < n.length; i++)
          t.indexOf(n[i]) < 0 &&
            Object.prototype.propertyIsEnumerable.call(e, n[i]) &&
            (r[n[i]] = e[n[i]])
      }
      return r
    },
    bg = function (e, t) {
      var r = 'function' == typeof Symbol && e[Symbol.iterator]
      if (!r) return e
      var n,
        i,
        a = r.call(e),
        s = []
      try {
        for (; (void 0 === t || t-- > 0) && !(n = a.next()).done; )
          s.push(n.value)
      } catch (e) {
        i = { error: e }
      } finally {
        try {
          n && !n.done && (r = a.return) && r.call(a)
        } finally {
          if (i) throw i.error
        }
      }
      return s
    },
    vg = function (e, t) {
      return Formily.Shared.isValid(e)
        ? (function (e, t) {
            var r
            return Array.isArray(e)
              ? -1 === t
                ? e[0]
                : null !== (r = e[t]) && void 0 !== r
                ? r
                : e[e.length - 1]
              : e
          })(e, t)
        : e
    },
    xg = function (e) {
      var t = React.useRef(null),
        r = e.breakpoints
      if (!Formily.Shared.isArr(r)) return { ref: t, props: e }
      var n = bg(React.useState(e), 2),
        i = n[0],
        a = n[1],
        s = function () {
          t.current &&
            a(
              (function (e, t) {
                var r = e.clientWidth,
                  n = t.breakpoints,
                  i = t.layout,
                  a = t.labelAlign,
                  s = t.wrapperAlign,
                  o = t.labelCol,
                  l = t.wrapperCol,
                  c = gg(t, [
                    'breakpoints',
                    'layout',
                    'labelAlign',
                    'wrapperAlign',
                    'labelCol',
                    'wrapperCol',
                  ]),
                  u = (function (e, t) {
                    for (var r = 0; r < e.length; r++) if (t <= e[r]) return r
                  })(n, r)
                return yg(
                  {
                    layout: vg(i, u),
                    labelAlign: vg(a, u),
                    wrapperAlign: vg(s, u),
                    labelCol: vg(o, u),
                    wrapperCol: vg(l, u),
                  },
                  c
                )
              })(t.current, e)
            )
        }
      return (
        React.useEffect(function () {
          var e = new ResizeObserver(function () {
            s()
          })
          return (
            t.current && e.observe(t.current),
            s(),
            function () {
              e.disconnect()
            }
          )
        }, []),
        { ref: t, props: i }
      )
    },
    wg = function () {
      return (
        (wg =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        wg.apply(this, arguments)
      )
    },
    Eg = function (e, t) {
      var r = {}
      for (var n in e)
        Object.prototype.hasOwnProperty.call(e, n) &&
          t.indexOf(n) < 0 &&
          (r[n] = e[n])
      if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
        var i = 0
        for (n = Object.getOwnPropertySymbols(e); i < n.length; i++)
          t.indexOf(n[i]) < 0 &&
            Object.prototype.propertyIsEnumerable.call(e, n[i]) &&
            (r[n[i]] = e[n[i]])
      }
      return r
    },
    Pg = React.createContext(null),
    Sg = React.createContext(null),
    Tg = function () {
      return React.useContext(Pg)
    },
    Cg = function () {
      return React.useContext(Sg)
    },
    Ag = function () {
      return wg(wg({}, Tg()), Cg())
    },
    Rg = function (e) {
      var t,
        r,
        n = e.shallow,
        i = e.children,
        a = e.prefixCls,
        s = e.className,
        o = e.style,
        l = Eg(e, ['shallow', 'children', 'prefixCls', 'className', 'style']),
        c = xg(l),
        u = c.ref,
        p = c.props,
        h = Tg(),
        d = Vy('form', { prefixCls: a }),
        f = Vy('formily-layout', { prefixCls: a }),
        m = lh(
          f,
          (((t = {})[''.concat(d, '-').concat(p.layout)] = !0),
          (t[''.concat(d, '-rtl')] = 'rtl' === p.direction),
          (t[''.concat(d, '-').concat(p.size)] = p.size),
          t),
          s
        )
      return React.createElement(
        'div',
        { ref: u, className: m, style: o },
        ((r = wg({}, h)),
        n
          ? (p.size && (r.size = p.size), p.colon && (r.colon = p.colon))
          : Object.assign(r, p),
        React.createElement(
          Pg.Provider,
          { value: r },
          React.createElement(Sg.Provider, { value: n ? p : void 0 }, i)
        ))
      )
    }
  ;(Rg.defaultProps = { shallow: !0 }),
    (Rg.useFormDeepLayout = Tg),
    (Rg.useFormShallowLayout = Cg),
    (Rg.useFormLayout = Ag)
  var kg = function (e, t) {
      var r = 'function' == typeof Symbol && e[Symbol.iterator]
      if (!r) return e
      var n,
        i,
        a = r.call(e),
        s = []
      try {
        for (; (void 0 === t || t-- > 0) && !(n = a.next()).done; )
          s.push(n.value)
      } catch (e) {
        i = { error: e }
      } finally {
        try {
          n && !n.done && (r = a.return) && r.call(a)
        } finally {
          if (i) throw i.error
        }
      }
      return s
    },
    Ng = function (e, t, r) {
      if (r || 2 === arguments.length)
        for (var n, i = 0, a = t.length; i < a; i++)
          (!n && i in t) ||
            (n || (n = Array.prototype.slice.call(t, 0, i)), (n[i] = t[i]))
      return e.concat(n || Array.prototype.slice.call(t))
    },
    Og = React.createContext('N/A'),
    Ig = Og.Provider,
    Fg = function (e) {
      var t = React.useContext(Og) || 'N/A'
      return Formily.Shared.isValid(e) && '' !== e ? e : t
    },
    jg = function (e, t, r, n) {
      void 0 === n && (n = [])
      var i,
        a = r || {},
        s = a.inputKey,
        o = void 0 === s ? 'value' : s,
        l = a.outputKey,
        c = void 0 === l ? 'label' : l,
        u = a.childrenKey,
        p = void 0 === u ? 'children' : u
      if (Formily.Shared.isArr(e))
        return (
          Formily.Shared.isArr(t)
            ? (i = t.map(function (t) {
                return jg(e, t, r, n)
              }))
            : e.forEach(function (e) {
                var a
                if (void 0 === i) {
                  var s = Ng(Ng([], kg(n), !1), [null == e ? void 0 : e[c]], !1)
                  ;(null == e ? void 0 : e[o]) === t
                    ? (i = { leaf: null == e ? void 0 : e[c], whole: s })
                    : (null === (a = null == e ? void 0 : e[p]) || void 0 === a
                        ? void 0
                        : a.length) &&
                      (i = jg(null == e ? void 0 : e[p], t, r, s))
                }
              }),
          i
        )
    },
    _g = Formily.React.observer(function (e) {
      var t,
        r,
        n,
        i = Formily.React.useField(),
        a = Vy('form-text', e),
        s = (
          null === (t = null == i ? void 0 : i.dataSource) || void 0 === t
            ? void 0
            : t.length
        )
          ? i.dataSource
          : (
              null === (r = null == e ? void 0 : e.options) || void 0 === r
                ? void 0
                : r.length
            )
          ? e.options
          : [],
        o = Fg(),
        l = function (e) {
          var t
          return (
            (null ===
              (t =
                null == s
                  ? void 0
                  : s.find(function (t) {
                      return t.value == (null == e ? void 0 : e.value)
                    })) || void 0 === t
              ? void 0
              : t.label) ||
            e.label ||
            o
          )
        }
      return React.createElement(
        'div',
        { className: lh(a, e.className), style: e.style },
        (n = (function () {
          var t = e.value
          return 'multiple' === e.mode || 'tags' === e.mode
            ? e.labelInValue
              ? Formily.Shared.isArr(t)
                ? t
                : []
              : Formily.Shared.isArr(t)
              ? t.map(function (e) {
                  return { label: e, value: e }
                })
              : []
            : e.labelInValue
            ? Formily.Shared.isValid(t)
              ? [t]
              : []
            : Formily.Shared.isValid(t)
            ? [{ label: t, value: t }]
            : []
        })()).length
          ? 1 === n.length
            ? l(n[0])
            : n.map(function (e, t) {
                return React.createElement(Antd.Tag, { key: t }, l(e))
              })
          : o
      )
    }),
    Mg = Formily.React.observer(function (e) {
      var t,
        r,
        n,
        i = Formily.React.useField(),
        a = Fg(),
        s = Vy('form-text', e),
        o = (
          null === (t = null == i ? void 0 : i.dataSource) || void 0 === t
            ? void 0
            : t.length
        )
          ? i.dataSource
          : (
              null === (r = null == e ? void 0 : e.treeData) || void 0 === r
                ? void 0
                : r.length
            )
          ? e.treeData
          : [],
        l = function (e, t, r) {
          for (var n, i = 0; i < (null == t ? void 0 : t.length); i++) {
            var a = t[i]
            if ((null == a ? void 0 : a.value) === e)
              return null !== (n = null == a ? void 0 : a.label) && void 0 !== n
                ? n
                : a[r]
            var s = l(e, null == a ? void 0 : a.children, r)
            if (s) return s
          }
        }
      return React.createElement(
        'div',
        { className: lh(s, e.className), style: e.style },
        (
          null ==
          (n = (function () {
            var t = e.value
            return e.multiple
              ? e.labelInValue
                ? Formily.Shared.isArr(t)
                  ? t
                  : []
                : Formily.Shared.isArr(t)
                ? t.map(function (e) {
                    return { label: e, value: e }
                  })
                : []
              : e.labelInValue
              ? t
                ? [t]
                : []
              : t
              ? [{ label: t, value: t }]
              : []
          })())
            ? void 0
            : n.length
        )
          ? n.map(function (t, r) {
              var n = t.value,
                i = t.label
              return React.createElement(
                Antd.Tag,
                { key: r },
                l(n, o, e.treeNodeLabelProp) || i || a
              )
            })
          : React.createElement(Antd.Tag, null, a)
      )
    }),
    Dg = Formily.React.observer(function (e) {
      var t,
        r,
        n = Formily.React.useField(),
        i = Fg(),
        a = Vy('form-text', e),
        s = (
          null === (t = null == n ? void 0 : n.dataSource) || void 0 === t
            ? void 0
            : t.length
        )
          ? n.dataSource
          : (
              null === (r = null == e ? void 0 : e.options) || void 0 === r
                ? void 0
                : r.length
            )
          ? e.options
          : []
      return React.createElement(
        'div',
        { className: lh(a, e.className), style: e.style },
        (function () {
          var t,
            r,
            n,
            a =
              ((n = Formily.Shared.toArr(e.value)),
              e.multiple
                ? n.map(function (e) {
                    return e[e.length - 1]
                  })
                : n.slice(e.value.length - 1))
          return (
            (null ===
              (r =
                null === (t = jg(s, a)) || void 0 === t
                  ? void 0
                  : t.filter(function (e) {
                      return Formily.Shared.isValid(e)
                    })) || void 0 === r
              ? void 0
              : r
                  .map(function (e) {
                    var t
                    return null === (t = null == e ? void 0 : e.whole) ||
                      void 0 === t
                      ? void 0
                      : t.join('/')
                  })
                  .join(', ')) || i
          )
        })()
      )
    }),
    Lg = function (e) {
      var t = Vy('form-text', e)
      return React.createElement(
        'div',
        { className: lh(t, e.className), style: e.style },
        Fg(e.value)
      )
    }
  ;(Lg.Input = function (e) {
    var t = Vy('form-text', e)
    return React.createElement(
      Antd.Space,
      { className: lh(t, e.className), style: e.style },
      e.addonBefore,
      e.prefix,
      Fg(e.value),
      e.suffix,
      e.addonAfter
    )
  }),
    (Lg.Select = _g),
    (Lg.TreeSelect = Mg),
    (Lg.Cascader = Dg),
    (Lg.DatePicker = function (e) {
      var t,
        r = Fg(),
        n = Vy('form-text', e)
      return React.createElement(
        'div',
        { className: lh(n, e.className) },
        ((t = Hy(e.value, e.format, r)),
        Formily.Shared.isArr(t) ? t.join('~') : t)
      )
    }),
    (Lg.DateRangePicker = function (e) {
      var t,
        r = Fg(),
        n = Vy('form-text', e)
      return React.createElement(
        'div',
        { className: lh(n, e.className), style: e.style },
        ((t = Hy(e.value, e.format, r)),
        Formily.Shared.isArr(t) ? t.join('~') : t)
      )
    }),
    (Lg.TimePicker = function (e) {
      var t,
        r = Fg(),
        n = Vy('form-text', e)
      return React.createElement(
        'div',
        { className: lh(n, e.className), style: e.style },
        ((t = Hy(e.value, e.format, r)),
        Formily.Shared.isArr(t) ? t.join('~') : t)
      )
    }),
    (Lg.TimeRangePicker = function (e) {
      var t,
        r = Fg(),
        n = Vy('form-text', e)
      return React.createElement(
        'div',
        { className: lh(n, e.className), style: e.style },
        ((t = Hy(e.value, e.format, r)),
        Formily.Shared.isArr(t) ? t.join('~') : t)
      )
    }),
    (Lg.Placeholder = Ig),
    (Lg.usePlaceholder = Fg)
  var Bg = Lg,
    zg = function () {
      return (
        (zg =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        zg.apply(this, arguments)
      )
    },
    Ug = function (e, t) {
      var r = {}
      for (var n in e)
        Object.prototype.hasOwnProperty.call(e, n) &&
          t.indexOf(n) < 0 &&
          (r[n] = e[n])
      if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
        var i = 0
        for (n = Object.getOwnPropertySymbols(e); i < n.length; i++)
          t.indexOf(n[i]) < 0 &&
            Object.prototype.propertyIsEnumerable.call(e, n[i]) &&
            (r[n[i]] = e[n[i]])
      }
      return r
    },
    Wg = function (e) {
      var t = e.form,
        r = e.component,
        n = e.onAutoSubmit,
        i = e.onAutoSubmitFailed,
        a = e.previewTextPlaceholder,
        s = Ug(e, [
          'form',
          'component',
          'onAutoSubmit',
          'onAutoSubmitFailed',
          'previewTextPlaceholder',
        ]),
        o = Formily.React.useParentForm(),
        l = function (e) {
          return React.createElement(
            Formily.React.ExpressionScope,
            { value: { $$form: e } },
            React.createElement(
              Bg.Placeholder,
              { value: a },
              React.createElement(
                Rg,
                zg({}, s),
                React.createElement(
                  r,
                  {
                    onSubmit: function (t) {
                      var r, a
                      null === (r = null == t ? void 0 : t.stopPropagation) ||
                        void 0 === r ||
                        r.call(t),
                        null === (a = null == t ? void 0 : t.preventDefault) ||
                          void 0 === a ||
                          a.call(t),
                        e.submit(n).catch(i)
                    },
                  },
                  s.children
                )
              )
            )
          )
        }
      if (t)
        return React.createElement(
          Formily.React.FormProvider,
          { form: t },
          l(t)
        )
      if (!o) throw new Error('must pass form instance by createForm')
      return l(o)
    }
  Wg.defaultProps = { component: 'form' }
  var Hg = function () {
      return (
        (Hg =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        Hg.apply(this, arguments)
      )
    },
    Vg = function (e, t) {
      var r = {}
      for (var n in e)
        Object.prototype.hasOwnProperty.call(e, n) &&
          t.indexOf(n) < 0 &&
          (r[n] = e[n])
      if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
        var i = 0
        for (n = Object.getOwnPropertySymbols(e); i < n.length; i++)
          t.indexOf(n[i]) < 0 &&
            Object.prototype.propertyIsEnumerable.call(e, n[i]) &&
            (r[n[i]] = e[n[i]])
      }
      return r
    },
    $g = function (e, t) {
      var r = 'function' == typeof Symbol && e[Symbol.iterator]
      if (!r) return e
      var n,
        i,
        a = r.call(e),
        s = []
      try {
        for (; (void 0 === t || t-- > 0) && !(n = a.next()).done; )
          s.push(n.value)
      } catch (e) {
        i = { error: e }
      } finally {
        try {
          n && !n.done && (r = a.return) && r.call(a)
        } finally {
          if (i) throw i.error
        }
      }
      return s
    }
  var qg = {
      error: React.createElement(icons.CloseCircleOutlined, null),
      success: React.createElement(icons.CheckCircleOutlined, null),
      warning: React.createElement(icons.ExclamationCircleOutlined, null),
    },
    Kg = function (e) {
      var t,
        r,
        n,
        i,
        a,
        s = e.children,
        o = Vg(e, ['children']),
        l = $g(React.useState(!1), 2),
        c = l[0],
        u = l[1],
        p = (function (e) {
          var t,
            r,
            n,
            i,
            a,
            s,
            o,
            l,
            c,
            u,
            p,
            h,
            d,
            f,
            m,
            y,
            g,
            b,
            v,
            x,
            w,
            E,
            P,
            S,
            T = Ag()
          return Hg(Hg({}, e), {
            layout:
              null !==
                (r = null !== (t = e.layout) && void 0 !== t ? t : T.layout) &&
              void 0 !== r
                ? r
                : 'horizontal',
            colon: null !== (n = e.colon) && void 0 !== n ? n : T.colon,
            labelAlign:
              'vertical' === T.layout
                ? null !==
                    (a =
                      null !== (i = e.labelAlign) && void 0 !== i
                        ? i
                        : T.labelAlign) && void 0 !== a
                  ? a
                  : 'left'
                : null !==
                    (o =
                      null !== (s = e.labelAlign) && void 0 !== s
                        ? s
                        : T.labelAlign) && void 0 !== o
                ? o
                : 'right',
            labelWrap:
              null !== (l = e.labelWrap) && void 0 !== l ? l : T.labelWrap,
            labelWidth:
              null !== (c = e.labelWidth) && void 0 !== c ? c : T.labelWidth,
            wrapperWidth:
              null !== (u = e.wrapperWidth) && void 0 !== u
                ? u
                : T.wrapperWidth,
            labelCol:
              null !== (p = e.labelCol) && void 0 !== p ? p : T.labelCol,
            wrapperCol:
              null !== (h = e.wrapperCol) && void 0 !== h ? h : T.wrapperCol,
            wrapperAlign:
              null !== (d = e.wrapperAlign) && void 0 !== d
                ? d
                : T.wrapperAlign,
            wrapperWrap:
              null !== (f = e.wrapperWrap) && void 0 !== f ? f : T.wrapperWrap,
            fullness:
              null !== (m = e.fullness) && void 0 !== m ? m : T.fullness,
            size: null !== (y = e.size) && void 0 !== y ? y : T.size,
            inset: null !== (g = e.inset) && void 0 !== g ? g : T.inset,
            asterisk: e.asterisk,
            bordered:
              null !== (b = e.bordered) && void 0 !== b ? b : T.bordered,
            feedbackIcon: e.feedbackIcon,
            feedbackLayout:
              null !==
                (x =
                  null !== (v = e.feedbackLayout) && void 0 !== v
                    ? v
                    : T.feedbackLayout) && void 0 !== x
                ? x
                : 'loose',
            tooltipLayout:
              null !==
                (E =
                  null !== (w = e.tooltipLayout) && void 0 !== w
                    ? w
                    : T.tooltipLayout) && void 0 !== E
                ? E
                : 'icon',
            tooltipIcon:
              null !==
                (S =
                  null !== (P = e.tooltipIcon) && void 0 !== P
                    ? P
                    : T.tooltipIcon) && void 0 !== S
                ? S
                : React.createElement(icons.QuestionCircleOutlined, null),
          })
        })(o),
        h = (function () {
          var e = $g(React.useState(!1), 2),
            t = e[0],
            r = e[1],
            n = React.useRef(),
            i = React.useRef(),
            a = Ag(),
            s = JSON.stringify(a.labelCol)
          return (
            React.useEffect(
              function () {
                requestAnimationFrame(function () {
                  if (n.current && i.current) {
                    var e = i.current.getBoundingClientRect().width,
                      a = n.current.getBoundingClientRect().width
                    e && a && a < e ? t || r(!0) : t && r(!1)
                  }
                })
              },
              [s]
            ),
            { overflow: t, containerRef: n, contentRef: i }
          )
        })(),
        d = h.containerRef,
        f = h.contentRef,
        m = h.overflow,
        y = p.label,
        g = p.style,
        b = p.layout,
        v = p.colon,
        x = void 0 === v || v,
        w = p.addonBefore,
        E = p.addonAfter,
        P = p.asterisk,
        S = p.feedbackStatus,
        T = p.extra,
        C = p.feedbackText,
        A = p.fullness,
        R = p.feedbackLayout,
        k = p.feedbackIcon,
        N = p.getPopupContainer,
        O = p.inset,
        I = p.bordered,
        F = void 0 === I || I,
        j = p.labelWidth,
        _ = p.wrapperWidth,
        M = p.labelCol,
        D = p.wrapperCol,
        L = p.labelAlign,
        B = p.wrapperAlign,
        z = void 0 === B ? 'left' : B,
        U = p.size,
        W = p.labelWrap,
        H = p.wrapperWrap,
        V = p.tooltipLayout,
        $ = p.tooltip,
        q = p.tooltipIcon,
        K = Hg({}, p.labelStyle),
        G = Hg({}, p.wrapperStyle),
        X = !1
      ;(j || _) &&
        (j &&
          ((K.width = 'auto' === j ? void 0 : j),
          (K.maxWidth = 'auto' === j ? void 0 : j)),
        _ &&
          ((G.width = 'auto' === _ ? void 0 : _),
          (G.maxWidth = 'auto' === _ ? void 0 : _))),
        (M || D) && (K.width || G.width || 'vertical' === b || (X = !0))
      var Y = Vy('formily-item', o),
        J =
          'popover' === R
            ? React.createElement(
                Antd.Popover,
                {
                  autoAdjustOverflow: !0,
                  placement: 'top',
                  content: React.createElement(
                    'div',
                    {
                      className: lh(
                        ((t = {}),
                        (t[''.concat(Y, '-').concat(S, '-help')] = !!S),
                        (t[''.concat(Y, '-help')] = !0),
                        t)
                      ),
                    },
                    qg[S],
                    ' ',
                    C
                  ),
                  visible: !!C,
                  getPopupContainer: N,
                },
                s
              )
            : s
      return React.createElement(
        'div',
        Hg({}, $y(o), {
          style: Hg(Hg({}, g), {}),
          'data-grid-span': o.gridSpan,
          className: lh(
            ((r = {}),
            (r[''.concat(Y)] = !0),
            (r[''.concat(Y, '-layout-').concat(b)] = !0),
            (r[''.concat(Y, '-').concat(S)] = !!S),
            (r[''.concat(Y, '-feedback-has-text')] = !!C),
            (r[''.concat(Y, '-size-').concat(U)] = !!U),
            (r[''.concat(Y, '-feedback-layout-').concat(R)] = !!R),
            (r[''.concat(Y, '-fullness')] = !!A || !!O || !!k),
            (r[''.concat(Y, '-inset')] = !!O),
            (r[''.concat(Y, '-active')] = c),
            (r[''.concat(Y, '-inset-active')] = !!O && c),
            (r[''.concat(Y, '-label-align-').concat(L)] = !0),
            (r[''.concat(Y, '-control-align-').concat(z)] = !0),
            (r[''.concat(Y, '-label-wrap')] = !!W),
            (r[''.concat(Y, '-control-wrap')] = !!H),
            (r[''.concat(Y, '-bordered-none')] = !1 === F || !!O || !!k),
            (r[o.className] = !!o.className),
            r)
          ),
          onFocus: function () {
            ;(k || O) && u(!0)
          },
          onBlur: function () {
            ;(k || O) && u(!1)
          },
        }),
        (function () {
          var e, t
          return y
            ? React.createElement(
                'div',
                {
                  className: lh(
                    ((e = {}),
                    (e[''.concat(Y, '-label')] = !0),
                    (e[''.concat(Y, '-label-tooltip')] =
                      ($ && 'text' === V) || m),
                    (e[''.concat(Y, '-item-col-').concat(M)] = X && !!M),
                    e)
                  ),
                  style: K,
                },
                ((t = React.createElement(
                  'div',
                  { className: ''.concat(Y, '-label-content'), ref: d },
                  React.createElement(
                    'span',
                    { ref: f },
                    P &&
                      React.createElement(
                        'span',
                        { className: ''.concat(Y, '-asterisk') },
                        '*'
                      ),
                    React.createElement('label', null, y)
                  )
                )),
                ('text' === V && $) || m
                  ? React.createElement(
                      Antd.Tooltip,
                      {
                        placement: 'top',
                        align: { offset: [0, 10] },
                        title: m
                          ? React.createElement(
                              'div',
                              null,
                              React.createElement('div', null, y),
                              React.createElement('div', null, $)
                            )
                          : $,
                      },
                      t
                    )
                  : t),
                (function () {
                  if ($ && 'icon' === V && !m)
                    return React.createElement(
                      'span',
                      { className: ''.concat(Y, '-label-tooltip-icon') },
                      React.createElement(
                        Antd.Tooltip,
                        {
                          placement: 'top',
                          align: { offset: [0, 2] },
                          title: $,
                        },
                        q
                      )
                    )
                })(),
                ' ' !== y &&
                  React.createElement(
                    'span',
                    { className: ''.concat(Y, '-colon') },
                    x ? ':' : ''
                  )
              )
            : null
        })(),
        React.createElement(
          'div',
          {
            className: lh(
              ((n = {}),
              (n[''.concat(Y, '-control')] = !0),
              (n[''.concat(Y, '-item-col-').concat(D)] = X && !!D && y),
              n)
            ),
          },
          React.createElement(
            'div',
            { className: lh(''.concat(Y, '-control-content')) },
            w &&
              React.createElement(
                'div',
                { className: lh(''.concat(Y, '-addon-before')) },
                w
              ),
            React.createElement(
              'div',
              {
                style: G,
                className: lh(
                  ((i = {}),
                  (i[''.concat(Y, '-control-content-component')] = !0),
                  (i[
                    ''.concat(Y, '-control-content-component-has-feedback-icon')
                  ] = !!k),
                  i)
                ),
              },
              React.createElement(Sg.Provider, { value: void 0 }, J),
              k &&
                React.createElement(
                  'div',
                  { className: lh(''.concat(Y, '-feedback-icon')) },
                  k
                )
            ),
            E &&
              React.createElement(
                'div',
                { className: lh(''.concat(Y, '-addon-after')) },
                E
              )
          ),
          !!C &&
            'popover' !== R &&
            'none' !== R &&
            React.createElement(
              'div',
              {
                className: lh(
                  ((a = {}),
                  (a[''.concat(Y, '-').concat(S, '-help')] = !!S),
                  (a[''.concat(Y, '-help')] = !0),
                  (a[''.concat(Y, '-help-enter')] = !0),
                  (a[''.concat(Y, '-help-enter-active')] = !0),
                  a)
                ),
              },
              C
            ),
          T &&
            React.createElement(
              'div',
              { className: lh(''.concat(Y, '-extra')) },
              T
            )
        )
      )
    },
    Gg = Formily.React.connect(
      Kg,
      Formily.React.mapProps(function (e, t) {
        if (Formily.Core.isVoidField(t))
          return {
            label: t.title || e.label,
            asterisk: e.asterisk,
            extra: e.extra || t.description,
          }
        if (!t) return e
        return {
          label: e.label || t.title,
          feedbackStatus: t.validating
            ? 'pending'
            : t.decoratorProps.feedbackStatus || t.validateStatus,
          feedbackText: (function () {
            var r = function (e) {
              return e.reduce(function (t, r, n) {
                return r
                  ? n < e.length - 1
                    ? t.concat([r, ', '])
                    : t.concat([r])
                  : t
              }, [])
            }
            if (!t.validating)
              return e.feedbackText
                ? e.feedbackText
                : t.selfErrors.length
                ? r(t.selfErrors)
                : t.selfWarnings.length
                ? r(t.selfWarnings)
                : t.selfSuccesses.length
                ? r(t.selfSuccesses)
                : void 0
          })(),
          asterisk:
            !(!t.required || 'readPretty' === t.pattern) ||
            ('asterisk' in e && e.asterisk),
          extra: e.extra || t.description,
        }
      })
    )
  Gg.BaseItem = Kg
  var Xg,
    Yg = function () {
      return (
        (Yg =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        Yg.apply(this, arguments)
      )
    },
    Jg = function (e) {
      return 1 === e.nodeType
    },
    Qg = (function () {
      function e(e) {
        var t = this
        ;(this.childList = []),
          (this.handler = function (e) {
            e.forEach(function (e) {
              'childList' === e.type &&
                (e.addedNodes.forEach(function (e) {
                  Jg(e) && t.addObserver(e)
                }),
                e.removedNodes.forEach(function (e) {
                  Jg(e) && t.removeObserver(e)
                }))
            }),
              t.callback(e, t.observer)
          }),
          (this.observe = function (e, r) {
            ;(t.init = r),
              t.observeChildList(e),
              t.observer.observe(
                e,
                Yg(Yg({}, t.init), {
                  subtree: !1,
                  childList: !0,
                  characterData: !1,
                  characterDataOldValue: !1,
                  attributeOldValue: !1,
                })
              )
          }),
          (this.disconnect = function () {
            t.observer.disconnect()
          }),
          (this.callback = e),
          (this.observer = new MutationObserver(this.handler))
      }
      return (
        (e.prototype.observeChildList = function (e) {
          var t = this
          Array.from(e.children).forEach(function (e) {
            t.addObserver(e)
          })
        }),
        (e.prototype.addObserver = function (e) {
          var t = this,
            r = this.childList.find(function (t) {
              return t.element === e
            })
          if (!r) {
            var n = this.childList.length,
              i = {
                element: e,
                observer: new MutationObserver(this.callback),
                dispose: function () {
                  i.observer &&
                    (i.observer.disconnect(),
                    delete i.observer,
                    t.childList.splice(n, 1))
                },
              }
            i.observer.observe(
              i.element,
              Yg(Yg({}, this.init), {
                subtree: !1,
                childList: !1,
                characterData: !1,
                characterDataOldValue: !1,
                attributeOldValue: !1,
              })
            ),
              this.childList.push(i)
          }
        }),
        (e.prototype.removeObserver = function (e) {
          var t,
            r = this.childList.find(function (t) {
              return t.element === e
            })
          r && (null === (t = r.dispose) || void 0 === t || t.call(r))
        }),
        e
      )
    })(),
    Zg = [],
    eb = 'ResizeObserver loop completed with undelivered notifications.'
  !(function (e) {
    ;(e.BORDER_BOX = 'border-box'),
      (e.CONTENT_BOX = 'content-box'),
      (e.DEVICE_PIXEL_CONTENT_BOX = 'device-pixel-content-box')
  })(Xg || (Xg = {}))
  var tb,
    rb = function (e) {
      return Object.freeze(e)
    },
    nb = function (e, t) {
      ;(this.inlineSize = e), (this.blockSize = t), rb(this)
    },
    ib = (function () {
      function e(e, t, r, n) {
        return (
          (this.x = e),
          (this.y = t),
          (this.width = r),
          (this.height = n),
          (this.top = this.y),
          (this.left = this.x),
          (this.bottom = this.top + this.height),
          (this.right = this.left + this.width),
          rb(this)
        )
      }
      return (
        (e.prototype.toJSON = function () {
          var e = this
          return {
            x: e.x,
            y: e.y,
            top: e.top,
            right: e.right,
            bottom: e.bottom,
            left: e.left,
            width: e.width,
            height: e.height,
          }
        }),
        (e.fromRect = function (t) {
          return new e(t.x, t.y, t.width, t.height)
        }),
        e
      )
    })(),
    ab = function (e) {
      return e instanceof SVGElement && 'getBBox' in e
    },
    sb = function (e) {
      if (ab(e)) {
        var t = e.getBBox(),
          r = t.width,
          n = t.height
        return !r && !n
      }
      var i = e,
        a = i.offsetWidth,
        s = i.offsetHeight
      return !(a || s || e.getClientRects().length)
    },
    ob = function (e) {
      var t, r
      if (e instanceof Element) return !0
      var n =
        null ===
          (r = null === (t = e) || void 0 === t ? void 0 : t.ownerDocument) ||
        void 0 === r
          ? void 0
          : r.defaultView
      return !!(n && e instanceof n.Element)
    },
    lb = 'undefined' != typeof window ? window : {},
    cb = new WeakMap(),
    ub = /auto|scroll/,
    pb = /^tb|vertical/,
    hb = /msie|trident/i.test(lb.navigator && lb.navigator.userAgent),
    db = function (e) {
      return parseFloat(e || '0')
    },
    fb = function (e, t, r) {
      return (
        void 0 === e && (e = 0),
        void 0 === t && (t = 0),
        void 0 === r && (r = !1),
        new nb((r ? t : e) || 0, (r ? e : t) || 0)
      )
    },
    mb = rb({
      devicePixelContentBoxSize: fb(),
      borderBoxSize: fb(),
      contentBoxSize: fb(),
      contentRect: new ib(0, 0, 0, 0),
    }),
    yb = function (e, t) {
      if ((void 0 === t && (t = !1), cb.has(e) && !t)) return cb.get(e)
      if (sb(e)) return cb.set(e, mb), mb
      var r = getComputedStyle(e),
        n = ab(e) && e.ownerSVGElement && e.getBBox(),
        i = !hb && 'border-box' === r.boxSizing,
        a = pb.test(r.writingMode || ''),
        s = !n && ub.test(r.overflowY || ''),
        o = !n && ub.test(r.overflowX || ''),
        l = n ? 0 : db(r.paddingTop),
        c = n ? 0 : db(r.paddingRight),
        u = n ? 0 : db(r.paddingBottom),
        p = n ? 0 : db(r.paddingLeft),
        h = n ? 0 : db(r.borderTopWidth),
        d = n ? 0 : db(r.borderRightWidth),
        f = n ? 0 : db(r.borderBottomWidth),
        m = p + c,
        y = l + u,
        g = (n ? 0 : db(r.borderLeftWidth)) + d,
        b = h + f,
        v = o ? e.offsetHeight - b - e.clientHeight : 0,
        x = s ? e.offsetWidth - g - e.clientWidth : 0,
        w = i ? m + g : 0,
        E = i ? y + b : 0,
        P = n ? n.width : db(r.width) - w - x,
        S = n ? n.height : db(r.height) - E - v,
        T = P + m + x + g,
        C = S + y + v + b,
        A = rb({
          devicePixelContentBoxSize: fb(
            Math.round(P * devicePixelRatio),
            Math.round(S * devicePixelRatio),
            a
          ),
          borderBoxSize: fb(T, C, a),
          contentBoxSize: fb(P, S, a),
          contentRect: new ib(p, l, P, S),
        })
      return cb.set(e, A), A
    },
    gb = function (e, t, r) {
      var n = yb(e, r),
        i = n.borderBoxSize,
        a = n.contentBoxSize,
        s = n.devicePixelContentBoxSize
      switch (t) {
        case Xg.DEVICE_PIXEL_CONTENT_BOX:
          return s
        case Xg.BORDER_BOX:
          return i
        default:
          return a
      }
    },
    bb = function (e) {
      var t = yb(e)
      ;(this.target = e),
        (this.contentRect = t.contentRect),
        (this.borderBoxSize = rb([t.borderBoxSize])),
        (this.contentBoxSize = rb([t.contentBoxSize])),
        (this.devicePixelContentBoxSize = rb([t.devicePixelContentBoxSize]))
    },
    vb = function (e) {
      if (sb(e)) return 1 / 0
      for (var t = 0, r = e.parentNode; r; ) (t += 1), (r = r.parentNode)
      return t
    },
    xb = function () {
      var e = 1 / 0,
        t = []
      Zg.forEach(function (r) {
        if (0 !== r.activeTargets.length) {
          var n = []
          r.activeTargets.forEach(function (t) {
            var r = new bb(t.target),
              i = vb(t.target)
            n.push(r),
              (t.lastReportedSize = gb(t.target, t.observedBox)),
              i < e && (e = i)
          }),
            t.push(function () {
              r.callback.call(r.observer, n, r.observer)
            }),
            r.activeTargets.splice(0, r.activeTargets.length)
        }
      })
      for (var r = 0, n = t; r < n.length; r++) {
        ;(0, n[r])()
      }
      return e
    },
    wb = function (e) {
      Zg.forEach(function (t) {
        t.activeTargets.splice(0, t.activeTargets.length),
          t.skippedTargets.splice(0, t.skippedTargets.length),
          t.observationTargets.forEach(function (r) {
            r.isActive() &&
              (vb(r.target) > e
                ? t.activeTargets.push(r)
                : t.skippedTargets.push(r))
          })
      })
    },
    Eb = function () {
      var e,
        t = 0
      for (
        wb(t);
        Zg.some(function (e) {
          return e.activeTargets.length > 0
        });

      )
        (t = xb()), wb(t)
      return (
        Zg.some(function (e) {
          return e.skippedTargets.length > 0
        }) &&
          ('function' == typeof ErrorEvent
            ? (e = new ErrorEvent('error', { message: eb }))
            : ((e = document.createEvent('Event')).initEvent('error', !1, !1),
              (e.message = eb)),
          window.dispatchEvent(e)),
        t > 0
      )
    },
    Pb = [],
    Sb = function (e) {
      if (!tb) {
        var t = 0,
          r = document.createTextNode('')
        new MutationObserver(function () {
          return Pb.splice(0).forEach(function (e) {
            return e()
          })
        }).observe(r, { characterData: !0 }),
          (tb = function () {
            r.textContent = '' + (t ? t-- : t++)
          })
      }
      Pb.push(e), tb()
    },
    Tb = 0,
    Cb = { attributes: !0, characterData: !0, childList: !0, subtree: !0 },
    Ab = [
      'resize',
      'load',
      'transitionend',
      'animationend',
      'animationstart',
      'animationiteration',
      'keyup',
      'keydown',
      'mouseup',
      'mousedown',
      'mouseover',
      'mouseout',
      'blur',
      'focus',
    ],
    Rb = function (e) {
      return void 0 === e && (e = 0), Date.now() + e
    },
    kb = !1,
    Nb = new ((function () {
      function e() {
        var e = this
        ;(this.stopped = !0),
          (this.listener = function () {
            return e.schedule()
          })
      }
      return (
        (e.prototype.run = function (e) {
          var t = this
          if ((void 0 === e && (e = 250), !kb)) {
            kb = !0
            var r,
              n = Rb(e)
            ;(r = function () {
              var r = !1
              try {
                r = Eb()
              } finally {
                if (((kb = !1), (e = n - Rb()), !Tb)) return
                r ? t.run(1e3) : e > 0 ? t.run(e) : t.start()
              }
            }),
              Sb(function () {
                requestAnimationFrame(r)
              })
          }
        }),
        (e.prototype.schedule = function () {
          this.stop(), this.run()
        }),
        (e.prototype.observe = function () {
          var e = this,
            t = function () {
              return e.observer && e.observer.observe(document.body, Cb)
            }
          document.body ? t() : lb.addEventListener('DOMContentLoaded', t)
        }),
        (e.prototype.start = function () {
          var e = this
          this.stopped &&
            ((this.stopped = !1),
            (this.observer = new MutationObserver(this.listener)),
            this.observe(),
            Ab.forEach(function (t) {
              return lb.addEventListener(t, e.listener, !0)
            }))
        }),
        (e.prototype.stop = function () {
          var e = this
          this.stopped ||
            (this.observer && this.observer.disconnect(),
            Ab.forEach(function (t) {
              return lb.removeEventListener(t, e.listener, !0)
            }),
            (this.stopped = !0))
        }),
        e
      )
    })())(),
    Ob = function (e) {
      !Tb && e > 0 && Nb.start(), !(Tb += e) && Nb.stop()
    },
    Ib = (function () {
      function e(e, t) {
        ;(this.target = e),
          (this.observedBox = t || Xg.CONTENT_BOX),
          (this.lastReportedSize = { inlineSize: 0, blockSize: 0 })
      }
      return (
        (e.prototype.isActive = function () {
          var e,
            t = gb(this.target, this.observedBox, !0)
          return (
            (e = this.target),
            ab(e) ||
              (function (e) {
                switch (e.tagName) {
                  case 'INPUT':
                    if ('image' !== e.type) break
                  case 'VIDEO':
                  case 'AUDIO':
                  case 'EMBED':
                  case 'OBJECT':
                  case 'CANVAS':
                  case 'IFRAME':
                  case 'IMG':
                    return !0
                }
                return !1
              })(e) ||
              'inline' !== getComputedStyle(e).display ||
              (this.lastReportedSize = t),
            this.lastReportedSize.inlineSize !== t.inlineSize ||
              this.lastReportedSize.blockSize !== t.blockSize
          )
        }),
        e
      )
    })(),
    Fb = function (e, t) {
      ;(this.activeTargets = []),
        (this.skippedTargets = []),
        (this.observationTargets = []),
        (this.observer = e),
        (this.callback = t)
    },
    jb = new WeakMap(),
    _b = function (e, t) {
      for (var r = 0; r < e.length; r += 1) if (e[r].target === t) return r
      return -1
    },
    Mb = (function () {
      function e() {}
      return (
        (e.connect = function (e, t) {
          var r = new Fb(e, t)
          jb.set(e, r)
        }),
        (e.observe = function (e, t, r) {
          var n = jb.get(e),
            i = 0 === n.observationTargets.length
          _b(n.observationTargets, t) < 0 &&
            (i && Zg.push(n),
            n.observationTargets.push(new Ib(t, r && r.box)),
            Ob(1),
            Nb.schedule())
        }),
        (e.unobserve = function (e, t) {
          var r = jb.get(e),
            n = _b(r.observationTargets, t),
            i = 1 === r.observationTargets.length
          n >= 0 &&
            (i && Zg.splice(Zg.indexOf(r), 1),
            r.observationTargets.splice(n, 1),
            Ob(-1))
        }),
        (e.disconnect = function (e) {
          var t = this,
            r = jb.get(e)
          r.observationTargets.slice().forEach(function (r) {
            return t.unobserve(e, r.target)
          }),
            r.activeTargets.splice(0, r.activeTargets.length)
        }),
        e
      )
    })(),
    Db = (function () {
      function e(e) {
        if (0 === arguments.length)
          throw new TypeError(
            "Failed to construct 'ResizeObserver': 1 argument required, but only 0 present."
          )
        if ('function' != typeof e)
          throw new TypeError(
            "Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function."
          )
        Mb.connect(this, e)
      }
      return (
        (e.prototype.observe = function (e, t) {
          if (0 === arguments.length)
            throw new TypeError(
              "Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present."
            )
          if (!ob(e))
            throw new TypeError(
              "Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element"
            )
          Mb.observe(this, e, t)
        }),
        (e.prototype.unobserve = function (e) {
          if (0 === arguments.length)
            throw new TypeError(
              "Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present."
            )
          if (!ob(e))
            throw new TypeError(
              "Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element"
            )
          Mb.unobserve(this, e)
        }),
        (e.prototype.disconnect = function () {
          Mb.disconnect(this)
        }),
        (e.toString = function () {
          return 'function ResizeObserver () { [polyfill code] }'
        }),
        e
      )
    })(),
    Lb = function () {
      return (
        (Lb =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        Lb.apply(this, arguments)
      )
    },
    Bb = function (e, t) {
      var r = 'function' == typeof Symbol && e[Symbol.iterator]
      if (!r) return e
      var n,
        i,
        a = r.call(e),
        s = []
      try {
        for (; (void 0 === t || t-- > 0) && !(n = a.next()).done; )
          s.push(n.value)
      } catch (e) {
        i = { error: e }
      } finally {
        try {
          n && !n.done && (r = a.return) && r.call(a)
        } finally {
          if (i) throw i.error
        }
      }
      return s
    },
    zb = function (e, t, r) {
      if (r || 2 === arguments.length)
        for (var n, i = 0, a = t.length; i < a; i++)
          (!n && i in t) ||
            (n || (n = Array.prototype.slice.call(t, 0, i)), (n[i] = t[i]))
      return e.concat(n || Array.prototype.slice.call(t))
    },
    Ub = /span\s*(\d+)/,
    Wb = function (e, t) {
      return (
        void 0 === t && (t = !1),
        e.reduce(function (e, r) {
          var n
          return t || r.visible
            ? -1 === r.originSpan
              ? e + (null !== (n = r.span) && void 0 !== n ? n : 1)
              : e + r.span
            : e
        }, 0)
      )
    },
    Hb = function (e, t) {
      return (
        void 0 === t && (t = !1),
        e.reduce(function (e, r) {
          var n
          return t || r.visible
            ? -1 === r.originSpan
              ? e + (null !== (n = r.span) && void 0 !== n ? n : 1)
              : e + r.originSpan
            : e
        }, 0)
      )
    },
    Vb = function (e) {
      var t, r
      return Number(
        null !==
          (r =
            null === (t = String(e).match(Ub)) || void 0 === t
              ? void 0
              : t[1]) && void 0 !== r
          ? r
          : 1
      )
    },
    $b = function (e, t) {
      return (function (e) {
        return null != e
      })(e)
        ? (function (e, t) {
            var r
            return Array.isArray(e)
              ? -1 === t
                ? e[0]
                : null !== (r = e[t]) && void 0 !== r
                ? r
                : e[e.length - 1]
              : e
          })(e, t.breakpoint)
        : e
    },
    qb = function (e) {
      return Promise.resolve(0).then(e)
    },
    Kb = (function () {
      function e(e) {
        var t = this
        ;(this.width = 0),
          (this.height = 0),
          (this.children = []),
          (this.childTotalColumns = 0),
          (this.shadowChildTotalColumns = 0),
          (this.childOriginTotalColumns = 0),
          (this.shadowChildOriginTotalColumns = 0),
          (this.ready = !1),
          (this.connect = function (e) {
            if (e) {
              t.container = e
              var r = Formily.Reactive.batch.bound(function () {
                  n(), (t.ready = !0)
                }),
                n = Formily.Reactive.batch.bound(function () {
                  var e
                  ;(t.children =
                    ((e = t.container.children),
                    Array.from(e).reduce(function (e, t, r) {
                      var n,
                        i = getComputedStyle(t),
                        a = !('none' === i.display),
                        s = t.getAttribute('data-grid-span'),
                        o =
                          null !== (n = Vb(i.gridColumnStart)) && void 0 !== n
                            ? n
                            : 1,
                        l = {
                          index: r,
                          span: o,
                          visible: a,
                          originSpan: Number(null != s ? s : o),
                          element: t,
                        }
                      return (
                        s || t.setAttribute('data-grid-span', String(o)),
                        e.concat(l)
                      )
                    }, []))),
                    (t.childTotalColumns = Wb(t.children)),
                    (t.shadowChildTotalColumns = Wb(t.children, !0)),
                    (t.childOriginTotalColumns = Hb(t.children)),
                    (t.shadowChildOriginTotalColumns = Hb(t.children, !0))
                  var r,
                    n,
                    i,
                    a,
                    s,
                    o = t.container.getBoundingClientRect()
                  o.width &&
                    o.height &&
                    ((t.width = o.width), (t.height = o.height)),
                    (n = 0),
                    (i = 0),
                    (a = 0),
                    (s = 0),
                    (r = t).ready &&
                      (r.children = r.children.map(function (e) {
                        var t,
                          o = n % r.columns,
                          l = i % r.columns,
                          c = r.columns - o,
                          u = e.originSpan,
                          p = u > r.columns ? r.columns : u,
                          h = r.options.strictAutoFit ? p : p > c ? c : p,
                          d =
                            -1 === u
                              ? 'span '.concat(c, ' / -1')
                              : 'span '.concat(h, ' / auto')
                        return (
                          e.element.style.gridColumn !== d &&
                            (e.element.style.gridColumn = d),
                          e.visible && (n += h),
                          (i += h),
                          0 === o && a++,
                          0 == l && s++,
                          (e.shadowRow = s),
                          (e.shadowColumn = l + 1),
                          e.visible && ((e.row = a), (e.column = o + 1)),
                          (null === (t = r.options) || void 0 === t
                            ? void 0
                            : t.shouldVisible) &&
                            (r.options.shouldVisible(e, r)
                              ? (e.visible || (e.element.style.display = ''),
                                (e.visible = !0))
                              : (e.visible &&
                                  (e.element.style.display = 'none'),
                                (e.visible = !1))),
                          e
                        )
                      })),
                    qb(function () {
                      var e, r
                      null ===
                        (r =
                          null === (e = t.options) || void 0 === e
                            ? void 0
                            : e.onDigest) ||
                        void 0 === r ||
                        r.call(e, t)
                    }),
                    t.ready ||
                      qb(function () {
                        var e, r
                        null ===
                          (r =
                            null === (e = t.options) || void 0 === e
                              ? void 0
                              : e.onInitialized) ||
                          void 0 === r ||
                          r.call(e, t)
                      })
                }),
                i = new Qg(n),
                a = new Db(n),
                s = Formily.Reactive.reaction(function () {
                  return Lb({}, t.options)
                }, n)
              return (
                a.observe(t.container),
                i.observe(t.container, {
                  attributeFilter: ['data-grid-span'],
                  attributes: !0,
                }),
                r(),
                function () {
                  a.unobserve(t.container),
                    a.disconnect(),
                    i.disconnect(),
                    s(),
                    (t.children = [])
                }
              )
            }
            return function () {}
          }),
          (this.options = Lb(
            {
              breakpoints: [720, 1280, 1920],
              columnGap: 8,
              rowGap: 4,
              minWidth: 100,
              colWrap: !0,
              strictAutoFit: !1,
            },
            e
          )),
          Formily.Reactive.define(this, {
            options: Formily.Reactive.observable.shallow,
            width: Formily.Reactive.observable.ref,
            height: Formily.Reactive.observable.ref,
            ready: Formily.Reactive.observable.ref,
            children: Formily.Reactive.observable.ref,
            childOriginTotalColumns: Formily.Reactive.observable.ref,
            shadowChildOriginTotalColumns: Formily.Reactive.observable.ref,
            shadowChildTotalColumns: Formily.Reactive.observable.ref,
            childTotalColumns: Formily.Reactive.observable.ref,
            columns: Formily.Reactive.observable.computed,
            templateColumns: Formily.Reactive.observable.computed,
            gap: Formily.Reactive.observable.computed,
            maxColumns: Formily.Reactive.observable.computed,
            minColumns: Formily.Reactive.observable.computed,
            maxWidth: Formily.Reactive.observable.computed,
            minWidth: Formily.Reactive.observable.computed,
            breakpoints: Formily.Reactive.observable.computed,
            breakpoint: Formily.Reactive.observable.computed,
            rowGap: Formily.Reactive.observable.computed,
            columnGap: Formily.Reactive.observable.computed,
            colWrap: Formily.Reactive.observable.computed,
          })
      }
      return (
        Object.defineProperty(e.prototype, 'breakpoints', {
          get: function () {
            return this.options.breakpoints
          },
          set: function (e) {
            this.options.breakpoints = e
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'breakpoint', {
          get: function () {
            return (function (e, t) {
              if (Array.isArray(e))
                for (var r = 0; r < e.length; r++) if (t <= e[r]) return r
              return -1
            })(this.options.breakpoints, this.width)
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'maxWidth', {
          get: function () {
            var e
            return null !== (e = $b(this.options.maxWidth, this)) &&
              void 0 !== e
              ? e
              : 1 / 0
          },
          set: function (e) {
            this.options.maxWidth = e
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'minWidth', {
          get: function () {
            var e
            return null !== (e = $b(this.options.minWidth, this)) &&
              void 0 !== e
              ? e
              : 100
          },
          set: function (e) {
            this.options.minWidth = e
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'maxColumns', {
          get: function () {
            var e
            return null !== (e = $b(this.options.maxColumns, this)) &&
              void 0 !== e
              ? e
              : 1 / 0
          },
          set: function (e) {
            this.options.maxColumns = e
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'maxRows', {
          get: function () {
            var e
            return null !== (e = this.options.maxRows) && void 0 !== e
              ? e
              : 1 / 0
          },
          set: function (e) {
            this.options.maxRows = e
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'minColumns', {
          get: function () {
            var e
            return null !== (e = $b(this.options.minColumns, this)) &&
              void 0 !== e
              ? e
              : 1
          },
          set: function (e) {
            this.options.minColumns = e
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'rowGap', {
          get: function () {
            var e
            return null !== (e = $b(this.options.rowGap, this)) && void 0 !== e
              ? e
              : 5
          },
          set: function (e) {
            this.options.rowGap = e
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'columnGap', {
          get: function () {
            var e
            return null !== (e = $b(this.options.columnGap, this)) &&
              void 0 !== e
              ? e
              : 10
          },
          set: function (e) {
            this.options.columnGap = e
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'colWrap', {
          get: function () {
            var e
            return (
              null === (e = $b(this.options.colWrap, this)) || void 0 === e || e
            )
          },
          set: function (e) {
            this.options.colWrap = e
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'columns', {
          get: function () {
            if (!this.ready) return 0
            var e = this.childOriginTotalColumns
            if (!1 === this.colWrap) return e
            var t = this.childSize,
              r = Math.round(this.width / (this.maxWidth + this.columnGap)),
              n = Math.min(e, r),
              i = this.options.strictAutoFit ? r : n,
              a = Math.round(this.width / (this.minWidth + this.columnGap)),
              s = Math.min(e, a),
              o = this.options.strictAutoFit ? a : s,
              l = Math.min(t, e, i, o),
              c = Math.max(t, e, i, o),
              u = (function (e, t, r, n, i, a) {
                for (var s = [], o = r; o <= t; o++) {
                  var l = e - (o - 1) * a,
                    c = l / o
                  c >= i && c <= n
                    ? s.push(o)
                    : c < i
                    ? s.push(Math.min(Math.floor(l / i), t))
                    : c > n && s.push(Math.min(Math.floor(l / n), t))
                }
                return Math.max.apply(Math, zb([], Bb(s), !1))
              })(this.width, c, l, this.maxWidth, this.minWidth, this.columnGap)
            return u >= this.maxColumns
              ? this.maxColumns
              : u <= this.minColumns
              ? this.minColumns
              : u
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'rows', {
          get: function () {
            return Math.ceil(this.childTotalColumns / this.columns)
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'shadowRows', {
          get: function () {
            return Math.ceil(this.shadowChildTotalColumns / this.columns)
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'templateColumns', {
          get: function () {
            if (!this.width) return ''
            if (this.maxWidth === 1 / 0)
              return 'repeat('.concat(this.columns, ',minmax(0,1fr))')
            if (!0 !== this.options.strictAutoFit) {
              var e =
                (this.width - (this.columns - 1) * this.columnGap) /
                this.columns
              if (e < this.minWidth || e > this.maxWidth)
                return 'repeat('.concat(this.columns, ',minmax(0,1fr))')
            }
            return 'repeat('
              .concat(this.columns, ',minmax(')
              .concat(this.minWidth, 'px,')
              .concat(this.maxWidth, 'px))')
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'gap', {
          get: function () {
            return ''.concat(this.rowGap, 'px ').concat(this.columnGap, 'px')
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'childSize', {
          get: function () {
            return this.children.length
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(e.prototype, 'fullnessLastColumn', {
          get: function () {
            var e
            return (
              this.columns ===
              (null === (e = this.children[this.childSize - 1]) || void 0 === e
                ? void 0
                : e.span)
            )
          },
          enumerable: !1,
          configurable: !0,
        }),
        (e.id = function (e) {
          return (
            void 0 === e && (e = {}),
            JSON.stringify(
              [
                'maxRows',
                'maxColumns',
                'minColumns',
                'maxWidth',
                'minWidth',
                'breakpoints',
                'columnGap',
                'rowGap',
                'colWrap',
                'strictAutoFit',
              ].map(function (t) {
                return e[t]
              })
            )
          )
        }),
        e
      )
    })(),
    Gb = function () {
      return (
        (Gb =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        Gb.apply(this, arguments)
      )
    },
    Xb = function (e, t) {
      var r = {}
      for (var n in e)
        Object.prototype.hasOwnProperty.call(e, n) &&
          t.indexOf(n) < 0 &&
          (r[n] = e[n])
      if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
        var i = 0
        for (n = Object.getOwnPropertySymbols(e); i < n.length; i++)
          t.indexOf(n[i]) < 0 &&
            Object.prototype.propertyIsEnumerable.call(e, n[i]) &&
            (r[n[i]] = e[n[i]])
      }
      return r
    },
    Yb = React.createContext(null),
    Jb = Formily.React.observer(
      function (e) {
        var t,
          r,
          n = e.children,
          i = e.className,
          a = e.style,
          s = Xb(e, ['children', 'className', 'style']),
          o = Ag(),
          l = Gb(
            {
              columnGap:
                null !== (t = null == o ? void 0 : o.gridColumnGap) &&
                void 0 !== t
                  ? t
                  : 8,
              rowGap:
                null !== (r = null == o ? void 0 : o.gridRowGap) && void 0 !== r
                  ? r
                  : 4,
            },
            s
          ),
          c = React.useMemo(
            function () {
              return Formily.Reactive.markRaw(
                (null == l ? void 0 : l.grid) ? l.grid : new Kb(l)
              )
            },
            [Kb.id(l)]
          ),
          u = React.useRef(),
          p = Vy('formily-grid', s),
          h = $y(s)
        return (
          React.useLayoutEffect(
            function () {
              return c.connect(u.current)
            },
            [c]
          ),
          React.createElement(
            Yb.Provider,
            { value: c },
            React.createElement(
              'div',
              Gb({}, h, {
                className: lh(''.concat(p, '-layout'), i),
                style: Gb(Gb({}, a), {
                  gridTemplateColumns: c.templateColumns,
                  gap: c.gap,
                }),
                ref: u,
              }),
              n
            )
          )
        )
      },
      { forwardRef: !0 }
    ),
    Qb = Formily.React.observer(function (e) {
      var t = e.gridSpan,
        r = e.children,
        n = Xb(e, ['gridSpan', 'children'])
      return React.createElement(
        'div',
        Gb({}, n, { style: n.style, 'data-grid-span': t }),
        r
      )
    })
  ;(Qb.defaultProps = { gridSpan: 1 }),
    (Jb.createFormGrid = function (e) {
      return Formily.Reactive.markRaw(new Kb(e))
    }),
    (Jb.useGridSpan = function (e) {
      return void 0 === e && (e = 1), e
    }),
    (Jb.useGridColumn = function (e) {
      return void 0 === e && (e = 1), e
    }),
    (Jb.useFormGrid = function () {
      return React.useContext(Yb)
    }),
    (Jb.GridColumn = Qb)
  var Zb = function () {
      return (
        (Zb =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        Zb.apply(this, arguments)
      )
    },
    ev = function (e, t) {
      var r = {}
      for (var n in e)
        Object.prototype.hasOwnProperty.call(e, n) &&
          t.indexOf(n) < 0 &&
          (r[n] = e[n])
      if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
        var i = 0
        for (n = Object.getOwnPropertySymbols(e); i < n.length; i++)
          t.indexOf(n[i]) < 0 &&
            Object.prototype.propertyIsEnumerable.call(e, n[i]) &&
            (r[n[i]] = e[n[i]])
      }
      return r
    },
    tv = function (e) {
      var t = Formily.Reactive.model({
        activeKey: e,
        setActiveKey: function (e) {
          t.activeKey = e
        },
      })
      return Formily.Reactive.markRaw(t)
    },
    rv = Formily.React.observer(function (e) {
      var t = e.formTab,
        r = ev(e, ['formTab']),
        n = Formily.React.useField(),
        i = (function () {
          var e = Formily.React.useField(),
            t = Formily.React.useFieldSchema(),
            r = []
          return (
            t.mapProperties(function (t, n) {
              var i,
                a,
                s = e.query(e.address.concat(n)).take()
              'none' !== (null == s ? void 0 : s.display) &&
                'hidden' !== (null == s ? void 0 : s.display) &&
                (null === (i = t['x-component']) || void 0 === i
                  ? void 0
                  : i.indexOf('TabPane')) > -1 &&
                r.push({
                  name: n,
                  props: Zb(
                    {
                      key:
                        (null ===
                          (a = null == t ? void 0 : t['x-component-props']) ||
                        void 0 === a
                          ? void 0
                          : a.key) || n,
                    },
                    null == t ? void 0 : t['x-component-props']
                  ),
                  schema: t,
                })
            }),
            r
          )
        })(),
        a = React.useMemo(function () {
          return t || tv()
        }, []),
        s = Vy('formily-tab', r),
        o = r.activeKey || (null == a ? void 0 : a.activeKey),
        l = function (e, t) {
          var r = n.form.queryFeedbacks({
            type: 'error',
            address: ''.concat(n.address.concat(e), '.*'),
          })
          return r.length
            ? React.createElement(
                Antd.Badge,
                { size: 'small', className: 'errors-badge', count: r.length },
                t.tab
              )
            : t.tab
        }
      return React.createElement(
        Antd.Tabs,
        Zb({}, r, {
          className: lh(s, r.className),
          activeKey: o,
          onChange: function (e) {
            var n, i
            null === (n = r.onChange) || void 0 === n || n.call(r, e),
              null === (i = null == t ? void 0 : t.setActiveKey) ||
                void 0 === i ||
                i.call(t, e)
          },
        }),
        i.map(function (e, t) {
          var r = e.props,
            n = e.schema,
            i = e.name
          return React.createElement(
            Antd.Tabs.TabPane,
            Zb({ key: t }, r, { tab: l(i, r), forceRender: !0 }),
            React.createElement(Formily.React.RecursionField, {
              schema: n,
              name: i,
            })
          )
        })
      )
    })
  ;(rv.TabPane = function (e) {
    var t = e.children
    return React.createElement(React.Fragment, null, t)
  }),
    (rv.createFormTab = tv)
  var nv = function () {
      return (
        (nv =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        nv.apply(this, arguments)
      )
    },
    iv = function (e, t) {
      var r = {}
      for (var n in e)
        Object.prototype.hasOwnProperty.call(e, n) &&
          t.indexOf(n) < 0 &&
          (r[n] = e[n])
      if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
        var i = 0
        for (n = Object.getOwnPropertySymbols(e); i < n.length; i++)
          t.indexOf(n[i]) < 0 &&
            Object.prototype.propertyIsEnumerable.call(e, n[i]) &&
            (r[n[i]] = e[n[i]])
      }
      return r
    },
    av = function (e) {
      var t = Formily.Reactive.model({
        activeKeys: e,
        setActiveKeys: function (e) {
          t.activeKeys = e
        },
        hasActiveKey: function (e) {
          if (Array.isArray(t.activeKeys)) {
            if (t.activeKeys.includes(e)) return !0
          } else if (t.activeKeys == e) return !0
          return !1
        },
        addActiveKey: function (e) {
          t.hasActiveKey(e) ||
            (t.activeKeys = Formily.Shared.toArr(t.activeKeys).concat(e))
        },
        removeActiveKey: function (e) {
          Array.isArray(t.activeKeys)
            ? (t.activeKeys = t.activeKeys.filter(function (t) {
                return t != e
              }))
            : (t.activeKeys = '')
        },
        toggleActiveKey: function (e) {
          t.hasActiveKey(e) ? t.removeActiveKey(e) : t.addActiveKey(e)
        },
      })
      return Formily.Reactive.markRaw(t)
    },
    sv = Formily.React.observer(function (e) {
      var t = e.formCollapse,
        r = iv(e, ['formCollapse']),
        n = Formily.React.useField(),
        i = (function () {
          var e = Formily.React.useField(),
            t = Formily.React.useFieldSchema(),
            r = []
          return (
            t.mapProperties(function (t, n) {
              var i,
                a,
                s = e.query(e.address.concat(n)).take()
              'none' !== (null == s ? void 0 : s.display) &&
                'hidden' !== (null == s ? void 0 : s.display) &&
                (null === (i = t['x-component']) || void 0 === i
                  ? void 0
                  : i.indexOf('CollapsePanel')) > -1 &&
                r.push({
                  name: n,
                  props: nv(
                    nv({}, null == t ? void 0 : t['x-component-props']),
                    {
                      key:
                        (null ===
                          (a = null == t ? void 0 : t['x-component-props']) ||
                        void 0 === a
                          ? void 0
                          : a.key) || n,
                    }
                  ),
                  schema: t,
                })
            }),
            r
          )
        })(),
        a = Vy('formily-collapse', r),
        s = React.useMemo(function () {
          return t || av()
        }, []),
        o = function (e, t) {
          var r = n.form.queryFeedbacks({
            type: 'error',
            address: ''.concat(n.address.concat(e), '.*'),
          })
          return r.length
            ? React.createElement(
                Antd.Badge,
                { size: 'small', className: 'errors-badge', count: r.length },
                t.header
              )
            : t.header
        }
      return React.createElement(
        Antd.Collapse,
        nv({}, r, {
          className: lh(a, r.className),
          activeKey: (function () {
            var e
            return r.activeKey
              ? r.activeKey
              : (null == s ? void 0 : s.activeKeys)
              ? null == s
                ? void 0
                : s.activeKeys
              : r.accordion
              ? null === (e = i[0]) || void 0 === e
                ? void 0
                : e.name
              : i.map(function (e) {
                  return e.name
                })
          })(),
          onChange: function (e) {
            var t, n
            null === (t = null == r ? void 0 : r.onChange) ||
              void 0 === t ||
              t.call(r, e),
              null === (n = null == s ? void 0 : s.setActiveKeys) ||
                void 0 === n ||
                n.call(s, e)
          },
        }),
        i.map(function (e, t) {
          var r = e.props,
            n = e.schema,
            i = e.name
          return React.createElement(
            Antd.Collapse.Panel,
            nv({ key: t }, r, { header: o(i, r), forceRender: !0 }),
            React.createElement(Formily.React.RecursionField, {
              schema: n,
              name: i,
            })
          )
        })
      )
    })
  ;(sv.CollapsePanel = function (e) {
    var t = e.children
    return React.createElement(React.Fragment, null, t)
  }),
    (sv.createFormCollapse = av)
  var ov = function () {
      return (
        (ov =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        ov.apply(this, arguments)
      )
    },
    lv = Formily.React.connect(
      Antd.Input,
      Formily.React.mapProps(function (e, t) {
        return ov(ov({}, e), {
          suffix: React.createElement(
            'span',
            null,
            (null == t ? void 0 : t.loading) ||
              (null == t ? void 0 : t.validating)
              ? React.createElement(icons.LoadingOutlined, null)
              : e.suffix
          ),
        })
      }),
      Formily.React.mapReadPretty(Bg.Input)
    )
  lv.TextArea = Formily.React.connect(
    Antd.Input.TextArea,
    Formily.React.mapReadPretty(Bg.Input)
  )
  var cv = function () {
      return (
        (cv =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        cv.apply(this, arguments)
      )
    },
    uv = Formily.React.connect(
      Antd.Radio,
      Formily.React.mapProps({ value: 'checked', onInput: 'onChange' })
    )
  ;(uv.__ANT_RADIO = !0),
    (uv.Group = Formily.React.connect(
      Antd.Radio.Group,
      Formily.React.mapProps({ dataSource: 'options' }),
      Formily.React.mapReadPretty(Bg.Select)
    ))
  var pv = function () {
      return (
        (pv =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        pv.apply(this, arguments)
      )
    },
    hv = Formily.React.connect(
      Antd.Select,
      Formily.React.mapProps(
        { dataSource: 'options', loading: !0 },
        function (e, t) {
          return pv(pv({}, e), {
            suffixIcon:
              (null == t ? void 0 : t.loading) ||
              (null == t ? void 0 : t.validating)
                ? React.createElement(icons.LoadingOutlined, null)
                : e.suffixIcon,
          })
        }
      ),
      Formily.React.mapReadPretty(Bg.Select)
    ),
    dv = function () {
      return (
        (dv =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        dv.apply(this, arguments)
      )
    },
    fv = function () {
      return function (e) {
        var t =
            e.format ||
            (function (e) {
              return 'month' === e.picker
                ? 'YYYY-MM'
                : 'quarter' === e.picker
                ? 'YYYY-\\QQ'
                : 'year' === e.picker
                ? 'YYYY'
                : 'week' === e.picker
                ? 'gggg-wo'
                : e.showTime
                ? 'YYYY-MM-DD HH:mm:ss'
                : 'YYYY-MM-DD'
            })(e),
          r = e.onChange
        return dv(dv({}, e), {
          format: t,
          value: Wy(e.value, 'gggg-wo' === t ? 'gggg-ww' : t),
          onChange: function (e) {
            r && r(Hy(e, t))
          },
        })
      }
    },
    mv = Formily.React.connect(
      Antd.DatePicker,
      Formily.React.mapProps(fv()),
      Formily.React.mapReadPretty(Bg.DatePicker)
    )
  mv.RangePicker = Formily.React.connect(
    Antd.DatePicker.RangePicker,
    Formily.React.mapProps(fv()),
    Formily.React.mapReadPretty(Bg.DateRangePicker)
  )
  var yv = function () {
      return (
        (yv =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        yv.apply(this, arguments)
      )
    },
    gv = function () {
      return function (e) {
        var t = e.format || 'HH:mm:ss',
          r = e.onChange
        return yv(yv({}, e), {
          format: t,
          value: Wy(e.value, t),
          onChange: function (e) {
            r && r(Hy(e, t))
          },
        })
      }
    },
    bv = Formily.React.connect(
      Antd.TimePicker,
      Formily.React.mapProps(gv()),
      Formily.React.mapReadPretty(Bg.TimePicker)
    )
  bv.RangePicker = Formily.React.connect(
    Antd.TimePicker.RangePicker,
    Formily.React.mapProps(gv()),
    Formily.React.mapReadPretty(Bg.TimeRangePicker)
  )
  var vv = Formily.React.connect(
      Antd.InputNumber,
      Formily.React.mapReadPretty(Bg.Input)
    ),
    xv = function () {
      return (
        (xv =
          Object.assign ||
          function (e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
              for (var i in (t = arguments[r]))
                Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i])
            return e
          }),
        xv.apply(this, arguments)
      )
    },
    wv = Formily.React.connect(
      Antd.Switch,
      Formily.React.mapProps({ value: 'checked' }, function (e) {
        var t = e.onChange
        return (
          delete e.value,
          xv(xv({}, e), {
            onChange: function (e) {
              null == t || t(e, null)
            },
          })
        )
      })
    ),
    Ev = Formily.React.observer(function (e) {
      var t = Designable.React.useTreeNode(),
        r = Formily.React.useField(),
        n = oh(React.useState(!1), 2),
        i = n[0],
        a = n[1],
        s = oh(React.useState(!1), 2),
        o = s[0],
        l = s[1],
        c = oh(React.useState(), 2),
        u = c[0],
        p = c[1],
        h = Designable.React.usePrefix('drawer-setter'),
        d = Designable.React.usePrefix(
          e.wrapperClassName || 'settings-form-wrapper'
        )
      React.useLayoutEffect(
        function () {
          var e = document.querySelector('.' + d)
          e && p(e)
        },
        [t]
      )
      var f = function () {
        l(!0),
          setTimeout(function () {
            a(!1), l(!1)
          }, 150)
      }
      return React.createElement(
        React.Fragment,
        null,
        React.createElement(
          Antd.Button,
          nh(
            {
              block: !0,
              onClick: function () {
                a(!0)
              },
            },
            e.triggerProps
          ),
          e.text || r.title
        ),
        u && i
          ? ReactDOM.createPortal(
              React.createElement(
                'div',
                {
                  className: lh(h, 'animate__animated animate__slideInRight', {
                    animate__slideOutRight: o,
                  }),
                },
                React.createElement(
                  'div',
                  { className: h + '-header', onClick: f },
                  React.createElement(Designable.React.IconWidget, {
                    infer: 'Return',
                    size: 18,
                  }),
                  React.createElement(
                    'span',
                    { className: h + '-header-text' },
                    e.text || r.title
                  )
                ),
                React.createElement(
                  'div',
                  { className: h + '-body' },
                  React.createElement(
                    Rg,
                    {
                      colon: !1,
                      labelWidth: 120,
                      labelAlign: 'left',
                      wrapperAlign: 'right',
                      feedbackLayout: 'none',
                      tooltipLayout: 'text',
                    },
                    e.children
                  )
                )
              ),
              u
            )
          : null
      )
    }),
    Pv = new Map(),
    Sv = Formily.React.observer(function (e) {
      var t = e.className
      e.style
      var r = e.children,
        n = ih(e, ['className', 'style', 'children']),
        i = Designable.React.usePrefix('fold-item'),
        a = Formily.React.useField(),
        s = React.useMemo(function () {
          return Formily.Reactive.observable.ref(Pv.get(a.address.toString()))
        }, []),
        o = React.useRef({ base: null, extra: null })
      return (
        React.Children.forEach(r, function (e) {
          var t, r
          React.isValidElement(e) &&
            ('FoldItem.Base' ===
              (null === (t = null == e ? void 0 : e.type) || void 0 === t
                ? void 0
                : t.displayName) && (o.current.base = e.props.children),
            'FoldItem.Extra' ===
              (null === (r = null == e ? void 0 : e.type) || void 0 === r
                ? void 0
                : r.displayName) && (o.current.extra = e.props.children))
        }),
        React.createElement(
          'div',
          { className: lh(i, t) },
          React.createElement(
            'div',
            {
              className: i + '-base',
              onClick: function () {
                ;(s.value = !s.value), Pv.set(a.address.toString(), s.value)
              },
            },
            React.createElement(
              Gg.BaseItem,
              nh({}, n, {
                label: React.createElement(
                  'span',
                  { className: lh(i + '-title', { expand: s.value }) },
                  o.current.extra &&
                    React.createElement(Designable.React.IconWidget, {
                      infer: 'Expand',
                      size: 10,
                    }),
                  n.label
                ),
              }),
              React.createElement(
                'div',
                {
                  style: { width: '100%' },
                  onClick: function (e) {
                    e.stopPropagation()
                  },
                },
                o.current.base
              )
            )
          ),
          s.value &&
            o.current.extra &&
            React.createElement(
              'div',
              { className: i + '-extra' },
              o.current.extra
            )
        )
      )
    }),
    Tv = function () {
      return React.createElement(React.Fragment, null)
    }
  Tv.displayName = 'FoldItem.Base'
  var Cv = function () {
    return React.createElement(React.Fragment, null)
  }
  ;(Cv.displayName = 'FoldItem.Extra'), (Sv.Base = Tv), (Sv.Extra = Cv)
  var Av = React.createContext(null),
    Rv = function (e) {
      var t = Designable.React.usePrefix('input-items')
      return React.createElement(
        Av.Provider,
        { value: e },
        React.createElement(
          'div',
          { className: lh(t, e.className), style: e.style },
          e.children
        )
      )
    }
  ;(Rv.defaultProps = { width: '100%' }),
    (Rv.Item = function (e) {
      var t = Designable.React.usePrefix('input-items-item'),
        r = React.useContext(Av)
      return React.createElement(
        'div',
        {
          className: lh(t, e.className, { vertical: e.vertical || r.vertical }),
          style: nh({ width: e.width || r.width }, e.style),
        },
        e.icon &&
          React.createElement(
            'div',
            { className: t + '-icon' },
            React.createElement(Designable.React.IconWidget, {
              infer: e.icon,
              size: 16,
            })
          ),
        e.title &&
          React.createElement('div', { className: t + '-title' }, e.title),
        React.createElement('div', { className: t + '-controller' }, e.children)
      )
    })
  var kv = { top: 1, right: 2, bottom: 3, left: 4, all: 1 },
    Nv =
      /([\d\.]+[^\d\s\.+-]+)(?:\s+([\d\.]+[^\d\s\.+-]+)(?:\s+([\d\.]+[^\d\s\.+-]+)(?:\s+([\d\.]+[^\d\s\.+-]+))?)?)?/,
    Ov = Formily.React.observer(function (e) {
      var t = Formily.React.useField(),
        r = Designable.React.usePrefix('box-style-setter'),
        n = function (e, t) {
          var r = String(t.value).match(Nv) || [],
            n = r[kv[e]],
            i = r[1],
            a = r[2],
            s = r[3],
            o = r[4],
            l = i === a && a === s && s === o
          return nh(nh({}, t), {
            value: 'all' === e ? (l ? i : void 0) : n,
            onChange: function (n) {
              var i, a
              'all' === e
                ? null === (i = t.onChange) ||
                  void 0 === i ||
                  i.call(
                    t,
                    ''
                      .concat(n || '0px', ' ')
                      .concat(n || '0px', ' ')
                      .concat(n || '0px', ' ')
                      .concat(n || '0px')
                  )
                : ((r[kv[e]] = n),
                  null === (a = t.onChange) ||
                    void 0 === a ||
                    a.call(
                      t,
                      ''
                        .concat(r[1] || '0px', ' ')
                        .concat(r[2] || '0px', ' ')
                        .concat(r[3] || '0px', ' ')
                        .concat(r[4] || '0px')
                    ))
            },
          })
        }
      return React.createElement(
        Sv,
        { className: lh(r, e.className), label: t.title },
        React.createElement(
          Sv.Base,
          null,
          React.createElement(
            bh,
            nh({}, n('all', e), { exclude: ['inherit', 'auto'] })
          )
        ),
        React.createElement(
          Sv.Extra,
          null,
          React.createElement(
            Rv,
            { width: '50%' },
            React.createElement(
              Rv.Item,
              { icon: e.labels[0] },
              React.createElement(
                bh,
                nh({}, n('top', e), { exclude: ['inherit', 'auto'] })
              )
            ),
            React.createElement(
              Rv.Item,
              { icon: e.labels[1] },
              React.createElement(
                bh,
                nh({}, n('right', e), { exclude: ['inherit', 'auto'] })
              )
            ),
            React.createElement(
              Rv.Item,
              { icon: e.labels[2] },
              React.createElement(
                bh,
                nh({}, n('bottom', e), { exclude: ['inherit', 'auto'] })
              )
            ),
            React.createElement(
              Rv.Item,
              { icon: e.labels[3] },
              React.createElement(
                bh,
                nh({}, n('left', e), { exclude: ['inherit', 'auto'] })
              )
            )
          )
        )
      )
    })
  Ov.defaultProps = {
    labels: [
      React.createElement(Designable.React.IconWidget, {
        infer: 'Top',
        size: 16,
        key: '1',
      }),
      React.createElement(Designable.React.IconWidget, {
        infer: 'Right',
        size: 16,
        key: '2',
      }),
      React.createElement(Designable.React.IconWidget, {
        infer: 'Bottom',
        size: 16,
        key: '3',
      }),
      React.createElement(Designable.React.IconWidget, {
        infer: 'Left',
        size: 16,
        key: '4',
      }),
    ],
  }
  var Iv = ['center', 'top', 'right', 'bottom', 'left'],
    Fv = [
      { label: 'None', value: 'none' },
      {
        label: React.createElement('span', {
          className: 'border-style-solid-line',
        }),
        value: 'solid',
      },
      {
        label: React.createElement('span', {
          className: 'border-style-dashed-line',
        }),
        value: 'dashed',
      },
      {
        label: React.createElement('span', {
          className: 'border-style-dotted-line',
        }),
        value: 'dotted',
      },
    ],
    jv = function (e, t) {
      var r = 'center' === e ? '' : '-'.concat(e)
      return Formily.Shared.camelCase('border'.concat(r, '-').concat(t))
    },
    _v = function (e) {
      for (var t = e.address.parent(), r = 0; r < Iv.length; r++) {
        var n = Iv[r],
          i = ''.concat(t, '.').concat(jv(n, 'style')),
          a = ''.concat(t, '.').concat(jv(n, 'width')),
          s = ''.concat(t, '.').concat(jv(n, 'color'))
        if (e.query(i).value() || e.query(a).value() || e.query(s).value())
          return n
      }
      return 'center'
    },
    Mv = Formily.React.observer(function (e) {
      var t = e.className,
        r = e.style,
        n = Formily.React.useField(),
        i = React.useMemo(
          function () {
            return Formily.Reactive.observable({ value: _v(n) })
          },
          [n.value]
        ),
        a = Designable.React.usePrefix('border-style-setter'),
        s = function (e) {
          return function (t) {
            if (
              ((t.display = i.value === e ? 'visible' : 'hidden'),
              'center' !== e)
            ) {
              var r = t.query('.borderStyle').value(),
                n = t.query('.borderWidth').value(),
                a = t.query('.borderColor').value()
              ;(r || n || a) && (t.value = void 0)
            }
          }
        }
      return React.createElement(
        Sv,
        { label: n.title },
        React.createElement(
          Sv.Extra,
          null,
          React.createElement(
            'div',
            { className: lh(a, t), style: r },
            React.createElement(
              'div',
              { className: a + '-position' },
              React.createElement(dh, {
                value: i.value,
                onChange: function (e) {
                  i.value = e
                },
              })
            ),
            React.createElement(
              'div',
              { className: a + '-input' },
              Iv.map(function (e, t) {
                return React.createElement(
                  React.Fragment,
                  { key: t },
                  React.createElement(Formily.React.Field, {
                    name: jv(e, 'style'),
                    basePath: n.address.parent(),
                    dataSource: Fv,
                    reactions: s(e),
                    component: [hv, { placeholder: 'Please Select' }],
                  }),
                  React.createElement(Formily.React.Field, {
                    name: jv(e, 'width'),
                    basePath: n.address.parent(),
                    reactions: s(e),
                    component: [bh, { exclude: ['auto'] }],
                  }),
                  React.createElement(Formily.React.Field, {
                    name: jv(e, 'color'),
                    basePath: n.address.parent(),
                    reactions: s(e),
                    component: [rh],
                  })
                )
              })
            )
          )
        )
      )
    }),
    Dv = function (e) {
      return React.createElement(
        Ov,
        nh({}, e, {
          labels: [
            React.createElement(Designable.React.IconWidget, {
              infer: 'TopLeft',
              size: 16,
              key: '1',
            }),
            React.createElement(Designable.React.IconWidget, {
              infer: 'TopRight',
              size: 16,
              key: '2',
            }),
            React.createElement(Designable.React.IconWidget, {
              infer: 'BottomRight',
              size: 16,
              key: '3',
            }),
            React.createElement(Designable.React.IconWidget, {
              infer: 'BottomLeft',
              size: 16,
              key: '4',
            }),
          ],
        })
      )
    },
    Lv = Formily.React.observer(function (e) {
      var t = Formily.React.useField(),
        r = Designable.React.usePrefix('background-style-setter')
      return React.createElement(
        Sv,
        { className: lh(r, e.className), label: t.title },
        React.createElement(
          Sv.Base,
          null,
          React.createElement(Formily.React.Field, {
            name: 'backgroundColor',
            basePath: t.address.parent(),
            component: [rh],
          })
        ),
        React.createElement(
          Sv.Extra,
          null,
          React.createElement(
            Rv,
            null,
            React.createElement(
              Rv.Item,
              { icon: 'Image' },
              React.createElement(Formily.React.Field, {
                name: 'backgroundImage',
                basePath: t.address.parent(),
                component: [hh],
              })
            ),
            React.createElement(
              Rv.Item,
              { icon: 'ImageSize', width: '50%' },
              React.createElement(Formily.React.Field, {
                name: 'backgroundSize',
                basePath: t.address.parent(),
                component: [vh],
              })
            ),
            React.createElement(
              Rv.Item,
              { icon: 'Repeat', width: '50%' },
              React.createElement(Formily.React.Field, {
                name: 'backgroundRepeat',
                basePath: t.address.parent(),
                component: [
                  hv,
                  { style: { width: '100%' }, placeholder: 'Repeat' },
                ],
                dataSource: [
                  { label: 'No Repeat', value: 'no-repeat' },
                  { label: 'Repeat', value: 'repeat' },
                  { label: 'Repeat X', value: 'repeat-x' },
                  { label: 'Repeat Y', value: 'repeat-y' },
                  { label: 'Space', value: 'space' },
                  { label: 'Round', value: 'round' },
                ],
              })
            ),
            React.createElement(
              Rv.Item,
              { icon: 'Position' },
              React.createElement(Formily.React.Field, {
                name: 'backgroundPosition',
                basePath: t.address.parent(),
                component: [lv, { placeholder: 'center center' }],
              })
            )
          )
        )
      )
    }),
    Bv = Formily.React.observer(function (e) {
      var t = Formily.React.useField(),
        r = Designable.React.usePrefix('shadow-style-setter'),
        n = function (t) {
          var r = String(e.value || '')
            .trim()
            .split(' ')
          return {
            value: r[t],
            onChange: function (n) {
              var i
              ;(r[t] = n),
                null === (i = e.onChange) ||
                  void 0 === i ||
                  i.call(
                    e,
                    ''
                      .concat(r[0] || '', ' ')
                      .concat(r[1] || '', ' ')
                      .concat(r[2] || '', ' ')
                      .concat(r[3] || '', ' ')
                      .concat(r[4] || '')
                  )
            },
          }
        }
      return React.createElement(
        Sv,
        { className: lh(r, e.className), style: e.style, label: t.title },
        React.createElement(
          Sv.Base,
          null,
          React.createElement(rh, nh({}, n(4)))
        ),
        React.createElement(
          Sv.Extra,
          null,
          React.createElement(
            Rv,
            { width: '50%' },
            React.createElement(
              Rv.Item,
              { icon: 'AxisX' },
              React.createElement(
                bh,
                nh({ exclude: ['inherit', 'auto'] }, n(0))
              )
            ),
            React.createElement(
              Rv.Item,
              { icon: 'AxisY' },
              React.createElement(
                bh,
                nh({ exclude: ['inherit', 'auto'] }, n(1))
              )
            ),
            React.createElement(
              Rv.Item,
              { icon: 'Blur' },
              React.createElement(
                bh,
                nh({ exclude: ['inherit', 'auto'] }, n(2))
              )
            ),
            React.createElement(
              Rv.Item,
              { icon: 'Shadow' },
              React.createElement(
                bh,
                nh({ exclude: ['inherit', 'auto'] }, n(3))
              )
            )
          )
        )
      )
    }),
    zv = [
      '宋体=SimSun',
      '微软雅黑=Microsoft Yahei',
      '苹方=PingFang SC',
      'Andale Mono=andale mono,monospace',
      'Arial=arial,helvetica,sans-serif',
      'Arial Black=arial black,sans-serif',
      'Book Antiqua=book antiqua,palatino,serif',
      'Comic Sans MS=comic sans ms,sans-serif',
      'Courier New=courier new,courier,monospace',
      'Georgia=georgia,palatino,serif',
      'Helvetica Neue=Helvetica Neue',
      'Helvetica=helvetica,arial,sans-serif',
      'Impact=impact,sans-serif',
      'Symbol=symbol',
      'Tahoma=tahoma,arial,helvetica,sans-serif',
      'Terminal=terminal,monaco,monospace',
      'Times New Roman=times new roman,times,serif',
      'Trebuchet MS=trebuchet ms,geneva,sans-serif',
      'Verdana=verdana,geneva,sans-serif',
    ].map(function (e) {
      var t = e.split('='),
        r = null == t ? void 0 : t[0],
        n = null == t ? void 0 : t[1]
      return {
        label: React.createElement('span', { style: { fontFamily: n } }, r),
        value: n,
      }
    }),
    Uv = Formily.React.observer(function (e) {
      var t = Formily.React.useField(),
        r = Designable.React.usePrefix('font-style-setter')
      return React.createElement(
        Sv,
        { label: t.title, className: lh(r, e.className), style: e.style },
        React.createElement(
          Sv.Base,
          null,
          React.createElement(Formily.React.Field, {
            name: 'fontFamily',
            basePath: t.address.parent(),
            component: [
              hv,
              { style: { width: '100%' }, placeholder: 'Helvetica Neue' },
            ],
            dataSource: zv,
          })
        ),
        React.createElement(
          Sv.Extra,
          null,
          React.createElement(
            Rv,
            null,
            React.createElement(
              Rv.Item,
              { icon: 'FontWeight', width: '50%' },
              React.createElement(Formily.React.Field, {
                name: 'fontWeight',
                basePath: t.address.parent(),
                component: [vv, { placeholder: '400' }],
              })
            ),
            React.createElement(
              Rv.Item,
              { icon: 'FontStyle', width: '50%' },
              React.createElement(Formily.React.Field, {
                name: 'fontStyle',
                basePath: t.address.parent(),
                dataSource: [
                  {
                    label: React.createElement(Designable.React.IconWidget, {
                      infer: 'NormalFontStyle',
                    }),
                    value: 'normal',
                  },
                  {
                    label: React.createElement(Designable.React.IconWidget, {
                      infer: 'ItalicFontStyle',
                    }),
                    value: 'italic',
                  },
                ],
                component: [uv.Group, { optionType: 'button' }],
              })
            ),
            React.createElement(
              Rv.Item,
              { icon: 'FontColor', width: '100%' },
              React.createElement(Formily.React.Field, {
                name: 'color',
                basePath: t.address.parent(),
                component: [rh],
              })
            ),
            React.createElement(
              Rv.Item,
              { icon: 'FontSize', width: '50%' },
              React.createElement(Formily.React.Field, {
                name: 'fontSize',
                basePath: t.address.parent(),
                component: [bh, { exclude: ['auto'] }],
              })
            ),
            React.createElement(
              Rv.Item,
              { icon: 'LineHeight', width: '50%' },
              React.createElement(Formily.React.Field, {
                name: 'lineHeight',
                basePath: t.address.parent(),
                component: [bh, { exclude: ['auto'] }],
              })
            ),
            React.createElement(
              Rv.Item,
              { icon: 'TextAlign' },
              React.createElement(Formily.React.Field, {
                name: 'textAlign',
                basePath: t.address.parent(),
                dataSource: [
                  {
                    label: React.createElement(Designable.React.IconWidget, {
                      infer: 'TextAlignLeft',
                    }),
                    value: 'left',
                  },
                  {
                    label: React.createElement(Designable.React.IconWidget, {
                      infer: 'TextAlignCenter',
                    }),
                    value: 'center',
                  },
                  {
                    label: React.createElement(Designable.React.IconWidget, {
                      infer: 'TextAlignRight',
                    }),
                    value: 'right',
                  },
                  {
                    label: React.createElement(Designable.React.IconWidget, {
                      infer: 'TextAlignJustify',
                    }),
                    value: 'justify',
                  },
                ],
                component: [uv.Group, { optionType: 'button' }],
              })
            ),
            React.createElement(
              Rv.Item,
              { icon: 'TextDecoration' },
              React.createElement(Formily.React.Field, {
                name: 'textDecoration',
                basePath: t.address.parent(),
                dataSource: [
                  { label: '--', value: 'none' },
                  {
                    label: React.createElement(Designable.React.IconWidget, {
                      infer: 'TextUnderline',
                    }),
                    value: 'underline',
                  },
                  {
                    label: React.createElement(Designable.React.IconWidget, {
                      infer: 'TextLineThrough',
                    }),
                    value: 'line-through',
                  },
                ],
                component: [uv.Group, { optionType: 'button' }],
              })
            )
          )
        )
      )
    }),
    Wv = Formily.React.observer(function (e) {
      var t = Formily.React.useField(),
        r = Designable.React.usePrefix('flex-style-setter')
      return React.createElement(
        'div',
        { className: lh(r, e.className), style: e.style },
        React.createElement(
          Rv,
          { vertical: !0 },
          React.createElement(Formily.React.Field, {
            name: 'flexDirection',
            basePath: t.address.parent(),
            dataSource: [
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexDirectionRow',
                }),
                value: 'row',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexDirectionColumn',
                }),
                value: 'column',
              },
            ],
            reactions: function (e) {
              e.decorator[1].title = 'Flex Direction : '.concat(e.value || '')
            },
            decorator: [Rv.Item],
            component: [uv.Group, { optionType: 'button' }],
          }),
          React.createElement(Formily.React.Field, {
            name: 'flexWrap',
            basePath: t.address.parent(),
            dataSource: [
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexNoWrap',
                }),
                value: 'nowrap',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexWrap',
                }),
                value: 'wrap',
              },
            ],
            reactions: function (e) {
              e.decorator[1].title = 'Flex Wrap : '.concat(e.value || '')
            },
            decorator: [Rv.Item],
            component: [uv.Group, { optionType: 'button' }],
          }),
          React.createElement(Formily.React.Field, {
            name: 'alignContent',
            basePath: t.address.parent(),
            dataSource: [
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignContentCenter',
                }),
                value: 'center',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignContentStart',
                }),
                value: 'flex-start',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignContentEnd',
                }),
                value: 'flex-end',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignContentSpaceAround',
                }),
                value: 'space-around',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignContentSpaceBetween',
                }),
                value: 'space-between',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignContentStretch',
                }),
                value: 'stretch',
              },
            ],
            reactions: function (e) {
              e.decorator[1].title = 'Align Content : '.concat(e.value || '')
            },
            decorator: [Rv.Item],
            component: [uv.Group, { optionType: 'button' }],
          }),
          React.createElement(Formily.React.Field, {
            name: 'justifyContent',
            basePath: t.address.parent(),
            dataSource: [
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexJustifyCenter',
                }),
                value: 'center',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexJustifyStart',
                }),
                value: 'flex-start',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexJustifyEnd',
                }),
                value: 'flex-end',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexJustifySpaceAround',
                }),
                value: 'space-around',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexJustifySpaceBetween',
                }),
                value: 'space-between',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexJustifySpaceEvenly',
                }),
                value: 'space-evenly',
              },
            ],
            reactions: function (e) {
              e.decorator[1].title = 'Justify Content : '.concat(e.value || '')
            },
            decorator: [Rv.Item],
            component: [uv.Group, { optionType: 'button' }],
          }),
          React.createElement(Formily.React.Field, {
            name: 'alignItems',
            basePath: t.address.parent(),
            dataSource: [
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignItemsCenter',
                }),
                value: 'center',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignItemsStart',
                }),
                value: 'flex-start',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignItemsEnd',
                }),
                value: 'flex-end',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignItemsStretch',
                }),
                value: 'stretch',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'FlexAlignItemsBaseline',
                }),
                value: 'baseline',
              },
            ],
            reactions: function (e) {
              e.decorator[1].title = 'Align Items : '.concat(e.value || '')
            },
            decorator: [Rv.Item],
            component: [uv.Group, { optionType: 'button' }],
          })
        )
      )
    }),
    Hv = Formily.React.observer(function (e) {
      var t = Formily.React.useField(),
        r = Designable.React.usePrefix('display-style-setter')
      return React.createElement(
        React.Fragment,
        null,
        React.createElement(
          Gg.BaseItem,
          { label: t.title, className: lh(r, e.className), style: e.style },
          React.createElement(Antd.Radio.Group, {
            className: r + '-radio',
            options: [
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'DisplayBlock',
                  size: 16,
                }),
                value: 'block',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'DisplayInlineBlock',
                  size: 16,
                }),
                value: 'inline-block',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'DisplayInline',
                  size: 16,
                }),
                value: 'inline',
              },
              {
                label: React.createElement(Designable.React.IconWidget, {
                  infer: 'DisplayFlex',
                  size: 16,
                }),
                value: 'flex',
              },
            ],
            value: e.value,
            onChange: function (t) {
              var r
              null === (r = e.onChange) ||
                void 0 === r ||
                r.call(e, t.target.value)
            },
            optionType: 'button',
          })
        ),
        React.createElement(Formily.React.Field, {
          name: 'flex',
          basePath: t.address.parent(),
          visible: !1,
          reactions: function (e) {
            e.visible = 'flex' === t.value
          },
          component: [Wv],
        })
      )
    }),
    Vv = Formily.React.observer(function (e) {
      var t,
        r = Designable.React.usePrefix('collapse-item'),
        n = Formily.React.useField(),
        i = oh(
          React.useState(null === (t = e.defaultExpand) || void 0 === t || t),
          2
        ),
        a = i[0],
        s = i[1]
      return React.createElement(
        'div',
        { className: lh(r, e.className, { expand: a }), style: e.style },
        React.createElement(
          'div',
          {
            className: r + '-header',
            onClick: function (e) {
              e.stopPropagation(), e.preventDefault(), s(!a)
            },
          },
          React.createElement(
            'div',
            { className: r + '-header-expand' },
            React.createElement(Designable.React.IconWidget, {
              infer: 'Expand',
              size: 10,
            })
          ),
          React.createElement(
            'div',
            { className: r + '-header-content' },
            n.title
          )
        ),
        React.createElement('div', { className: r + '-content' }, e.children)
      )
    }),
    $v = Formily.React.createSchemaField({
      components: {
        FormItem: Gg,
        CollapseItem: Vv,
        Input: lv,
        ValueInput: km,
        SizeInput: bh,
        ColorInput: rh,
        ImageInput: ph,
        MonacoInput: Sm,
        PositionInput: dh,
        CornerInput: ch,
        BackgroundImageInput: hh,
        BackgroundStyleSetter: Lv,
        BoxStyleSetter: Ov,
        BorderStyleSetter: Mv,
        BorderRadiusStyleSetter: Dv,
        DisplayStyleSetter: Hv,
        BoxShadowStyleSetter: Bv,
        FlexStyleSetter: Wv,
        FontStyleSetter: Uv,
        DrawerSetter: Ev,
        NumberPicker: vv,
        DatePicker: mv,
        TimePicker: bv,
        Select: hv,
        Radio: uv,
        Slider: Antd.Slider,
        Switch: wv,
        Space: function (e) {
          var t,
            r = Ag()
          return React.createElement(
            Antd.Space,
            cv(
              {
                size:
                  null !== (t = e.size) && void 0 !== t
                    ? t
                    : null == r
                    ? void 0
                    : r.spaceGap,
              },
              e
            )
          )
        },
        ArrayItems: mg,
        ArrayTable: pg,
        FormCollapse: sv,
        FormGrid: Jb,
        FormLayout: Rg,
        FormTab: rv,
      },
    }),
    qv = function (e) {
      return function (t, r) {
        var n,
          i,
          a,
          s = e[r] || e[t.value] || t.label,
          o = (function (e) {
            if (Designable.Shared.isStr(e)) {
              var t = e.match(/@([^:\s]+)(?:\s*\:\s*([\s\S]+))?/)
              return t ? [t[1], t[2]] : void 0
            }
          })(s)
        return nh(nh({}, t), {
          value:
            null !== (n = null == t ? void 0 : t.value) && void 0 !== n
              ? n
              : null,
          label: o
            ? React.createElement(Designable.React.IconWidget, {
                infer: o[0],
                tooltip: o[1],
              })
            : null !==
                (a =
                  null !== (i = null == s ? void 0 : s.label) && void 0 !== i
                    ? i
                    : s) && void 0 !== a
            ? a
            : 'Unknow',
        })
      }
    },
    Kv = function (e) {
      Formily.Core.onFieldReact('*', function (t) {
        var r,
          n,
          i = t.path.toString().replace(/\.[\d+]/g, ''),
          a = function (t) {
            var r = 'settings.'.concat(i).concat(t ? '.'.concat(t) : '')
            return (
              e.getMessage(r) ||
              Designable.Core.GlobalRegistry.getDesignerMessage(r)
            )
          },
          s = a('title') || a(),
          o = a('description'),
          l = a('tooltip'),
          c = a('dataSource'),
          u = a('placeholder')
        s && (t.title = s),
          o && (t.description = o),
          l &&
            ((t.decorator[1] = t.decorator[1] || []),
            (t.decorator[1].tooltip = l)),
          u &&
            ((t.component[1] = t.component[1] || []),
            (t.component[1].placeholder = u)),
          Formily.Core.isVoidField(t) ||
            ((null == c ? void 0 : c.length)
              ? (
                  null === (r = t.dataSource) || void 0 === r
                    ? void 0
                    : r.length
                )
                ? (t.dataSource = t.dataSource.map(qv(c)))
                : (t.dataSource = c.slice())
              : (t.dataSource =
                  null === (n = t.dataSource) || void 0 === n
                    ? void 0
                    : n.filter(Boolean)))
      })
    },
    Gv = null,
    Xv = function (e) {
      Formily.Core.onFieldInputValueChange('*', function () {
        clearTimeout(Gv),
          (Gv = setTimeout(function () {
            e.snapshot('update:node:props')
          }, 1e3))
      })
    },
    Yv = { idleRequest: null },
    Jv = Formily.React.observer(
      function (e) {
        var t,
          r,
          n = Designable.React.useWorkbench(),
          i =
            (null == n ? void 0 : n.activeWorkspace) ||
            (null == n ? void 0 : n.currentWorkspace),
          a = null == i ? void 0 : i.id,
          s = Designable.React.useOperation(a),
          o = Designable.React.useCurrentNode(a),
          l = Designable.React.useSelected(a),
          c = Designable.React.usePrefix('settings-form'),
          u =
            null === (t = null == o ? void 0 : o.designerProps) || void 0 === t
              ? void 0
              : t.propsSchema,
          p = !(
            o &&
            (null === (r = o.designerProps) || void 0 === r
              ? void 0
              : r.propsSchema) &&
            1 === l.length
          ),
          h = React.useMemo(
            function () {
              var t
              return Formily.Core.createForm({
                initialValues:
                  null === (t = null == o ? void 0 : o.designerProps) ||
                  void 0 === t
                    ? void 0
                    : t.defaultProps,
                values: null == o ? void 0 : o.props,
                effects: function (t) {
                  var r
                  Kv(o),
                    Xv(s),
                    null === (r = e.effects) || void 0 === r || r.call(e, t)
                },
              })
            },
            [o, null == o ? void 0 : o.props, u, s, p]
          )
        return React.createElement(
          Designable.React.IconWidget.Provider,
          { tooltip: !0 },
          React.createElement(
            'div',
            { className: c + '-wrapper' },
            !p &&
              React.createElement(Designable.React.NodePathWidget, {
                workspaceId: a,
              }),
            React.createElement(
              'div',
              { className: c + '-content' },
              p
                ? React.createElement(
                    'div',
                    { className: c + '-empty' },
                    React.createElement(Antd.Empty, null)
                  )
                : React.createElement(
                    'div',
                    {
                      className: lh(c, e.className),
                      style: e.style,
                      key: o.id,
                    },
                    React.createElement(
                      uh.Provider,
                      { value: e },
                      React.createElement(
                        Wg,
                        {
                          form: h,
                          colon: !1,
                          labelWidth: 120,
                          labelAlign: 'left',
                          wrapperAlign: 'right',
                          feedbackLayout: 'none',
                          tooltipLayout: 'text',
                        },
                        React.createElement($v, {
                          schema: u,
                          components: e.components,
                          scope: nh({ $node: o }, e.scope),
                        })
                      )
                    )
                  )
            )
          )
        )
      },
      {
        scheduler: function (e) {
          Designable.Shared.cancelIdle(Yv.idleRequest),
            (Yv.idleRequest = Designable.Shared.requestIdle(e, {
              timeout: 500,
            }))
        },
      }
    )
  ;(e.BackgroundImageInput = hh),
    (e.BackgroundSizeInput = vh),
    (e.BackgroundStyleSetter = Lv),
    (e.BorderRadiusStyleSetter = Dv),
    (e.BorderStyleSetter = Mv),
    (e.BoxShadowStyleSetter = Bv),
    (e.BoxStyleSetter = Ov),
    (e.CollapseItem = Vv),
    (e.ColorInput = rh),
    (e.CornerInput = ch),
    (e.DisplayStyleSetter = Hv),
    (e.DrawerSetter = Ev),
    (e.FlexStyleSetter = Wv),
    (e.FoldItem = Sv),
    (e.FontStyleSetter = Uv),
    (e.ImageInput = ph),
    (e.InputItems = Rv),
    (e.MonacoInput = Sm),
    (e.PositionInput = dh),
    (e.SchemaField = $v),
    (e.SettingsForm = Jv),
    (e.SizeInput = bh),
    (e.ValueInput = km),
    (e.createPolyInput = mh),
    (e.getNpmCDNRegistry = B),
    (e.setNpmCDNRegistry = function (e) {
      ;(L.cdn = e),
        D.config({
          paths: { vs: ''.concat(e, '/monaco-editor@0.43.0/min/vs') },
        })
    }),
    (e.useLocales = Kv),
    (e.useSnapshot = Xv),
    Object.defineProperty(e, '__esModule', { value: !0 })
})
